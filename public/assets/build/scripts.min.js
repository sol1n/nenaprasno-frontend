!function(e,t){"use strict";"object"==typeof module&&"object"==typeof module.exports?module.exports=e.document?t(e,!0):function(e){if(!e.document)throw new Error("jQuery requires a window with a document");return t(e)}:t(e)}("undefined"!=typeof window?window:this,function(e,t){"use strict";function n(e,t){t=t||ne;var n=t.createElement("script");n.text=e,t.head.appendChild(n).parentNode.removeChild(n)}function i(e){var t=!!e&&"length"in e&&e.length,n=he.type(e);return"function"!==n&&!he.isWindow(e)&&("array"===n||0===t||"number"==typeof t&&t>0&&t-1 in e)}function o(e,t){return e.nodeName&&e.nodeName.toLowerCase()===t.toLowerCase()}function r(e,t,n){return he.isFunction(t)?he.grep(e,function(e,i){return!!t.call(e,i,e)!==n}):t.nodeType?he.grep(e,function(e){return e===t!==n}):"string"!=typeof t?he.grep(e,function(e){return se.call(t,e)>-1!==n}):Te.test(t)?he.filter(t,e,n):(t=he.filter(t,e),he.grep(e,function(e){return se.call(t,e)>-1!==n&&1===e.nodeType}))}function a(e,t){for(;(e=e[t])&&1!==e.nodeType;);return e}function s(e){var t={};return he.each(e.match(Pe)||[],function(e,n){t[n]=!0}),t}function l(e){return e}function c(e){throw e}function u(e,t,n,i){var o;try{e&&he.isFunction(o=e.promise)?o.call(e).done(t).fail(n):e&&he.isFunction(o=e.then)?o.call(e,t,n):t.apply(void 0,[e].slice(i))}catch(e){n.apply(void 0,[e])}}function d(){ne.removeEventListener("DOMContentLoaded",d),e.removeEventListener("load",d),he.ready()}function f(){this.expando=he.expando+f.uid++}function p(e){return"true"===e||"false"!==e&&("null"===e?null:e===+e+""?+e:je.test(e)?JSON.parse(e):e)}function h(e,t,n){var i;if(void 0===n&&1===e.nodeType)if(i="data-"+t.replace(Fe,"-$&").toLowerCase(),"string"==typeof(n=e.getAttribute(i))){try{n=p(n)}catch(e){}$e.set(e,t,n)}else n=void 0;return n}function g(e,t,n,i){var o,r=1,a=20,s=i?function(){return i.cur()}:function(){return he.css(e,t,"")},l=s(),c=n&&n[3]||(he.cssNumber[t]?"":"px"),u=(he.cssNumber[t]||"px"!==c&&+l)&&Re.exec(he.css(e,t));if(u&&u[3]!==c){c=c||u[3],n=n||[],u=+l||1;do{r=r||".5",u/=r,he.style(e,t,u+c)}while(r!==(r=s()/l)&&1!==r&&--a)}return n&&(u=+u||+l||0,o=n[1]?u+(n[1]+1)*n[2]:+n[2],i&&(i.unit=c,i.start=u,i.end=o)),o}function m(e){var t,n=e.ownerDocument,i=e.nodeName,o=We[i];return o||(t=n.body.appendChild(n.createElement(i)),o=he.css(t,"display"),t.parentNode.removeChild(t),"none"===o&&(o="block"),We[i]=o,o)}function v(e,t){for(var n,i,o=[],r=0,a=e.length;r<a;r++)i=e[r],i.style&&(n=i.style.display,t?("none"===n&&(o[r]=Ie.get(i,"display")||null,o[r]||(i.style.display="")),""===i.style.display&&Ye(i)&&(o[r]=m(i))):"none"!==n&&(o[r]="none",Ie.set(i,"display",n)));for(r=0;r<a;r++)null!=o[r]&&(e[r].style.display=o[r]);return e}function b(e,t){var n;return n=void 0!==e.getElementsByTagName?e.getElementsByTagName(t||"*"):void 0!==e.querySelectorAll?e.querySelectorAll(t||"*"):[],void 0===t||t&&o(e,t)?he.merge([e],n):n}function y(e,t){for(var n=0,i=e.length;n<i;n++)Ie.set(e[n],"globalEval",!t||Ie.get(t[n],"globalEval"))}function x(e,t,n,i,o){for(var r,a,s,l,c,u,d=t.createDocumentFragment(),f=[],p=0,h=e.length;p<h;p++)if((r=e[p])||0===r)if("object"===he.type(r))he.merge(f,r.nodeType?[r]:r);else if(Ve.test(r)){for(a=a||d.appendChild(t.createElement("div")),s=(ze.exec(r)||["",""])[1].toLowerCase(),l=Ue[s]||Ue._default,a.innerHTML=l[1]+he.htmlPrefilter(r)+l[2],u=l[0];u--;)a=a.lastChild;he.merge(f,a.childNodes),a=d.firstChild,a.textContent=""}else f.push(t.createTextNode(r));for(d.textContent="",p=0;r=f[p++];)if(i&&he.inArray(r,i)>-1)o&&o.push(r);else if(c=he.contains(r.ownerDocument,r),a=b(d.appendChild(r),"script"),c&&y(a),n)for(u=0;r=a[u++];)Xe.test(r.type||"")&&n.push(r);return d}function w(){return!0}function C(){return!1}function S(){try{return ne.activeElement}catch(e){}}function T(e,t,n,i,o,r){var a,s;if("object"==typeof t){"string"!=typeof n&&(i=i||n,n=void 0);for(s in t)T(e,s,n,i,t[s],r);return e}if(null==i&&null==o?(o=n,i=n=void 0):null==o&&("string"==typeof n?(o=i,i=void 0):(o=i,i=n,n=void 0)),!1===o)o=C;else if(!o)return e;return 1===r&&(a=o,o=function(e){return he().off(e),a.apply(this,arguments)},o.guid=a.guid||(a.guid=he.guid++)),e.each(function(){he.event.add(this,t,o,i,n)})}function k(e,t){return o(e,"table")&&o(11!==t.nodeType?t:t.firstChild,"tr")?he(">tbody",e)[0]||e:e}function E(e){return e.type=(null!==e.getAttribute("type"))+"/"+e.type,e}function D(e){var t=nt.exec(e.type);return t?e.type=t[1]:e.removeAttribute("type"),e}function M(e,t){var n,i,o,r,a,s,l,c;if(1===t.nodeType){if(Ie.hasData(e)&&(r=Ie.access(e),a=Ie.set(t,r),c=r.events)){delete a.handle,a.events={};for(o in c)for(n=0,i=c[o].length;n<i;n++)he.event.add(t,o,c[o][n])}$e.hasData(e)&&(s=$e.access(e),l=he.extend({},s),$e.set(t,l))}}function P(e,t){var n=t.nodeName.toLowerCase();"input"===n&&Be.test(e.type)?t.checked=e.checked:"input"!==n&&"textarea"!==n||(t.defaultValue=e.defaultValue)}function A(e,t,i,o){t=re.apply([],t);var r,a,s,l,c,u,d=0,f=e.length,p=f-1,h=t[0],g=he.isFunction(h);if(g||f>1&&"string"==typeof h&&!pe.checkClone&&tt.test(h))return e.each(function(n){var r=e.eq(n);g&&(t[0]=h.call(this,n,r.html())),A(r,t,i,o)});if(f&&(r=x(t,e[0].ownerDocument,!1,e,o),a=r.firstChild,1===r.childNodes.length&&(r=a),a||o)){for(s=he.map(b(r,"script"),E),l=s.length;d<f;d++)c=r,d!==p&&(c=he.clone(c,!0,!0),l&&he.merge(s,b(c,"script"))),i.call(e[d],c,d);if(l)for(u=s[s.length-1].ownerDocument,he.map(s,D),d=0;d<l;d++)c=s[d],Xe.test(c.type||"")&&!Ie.access(c,"globalEval")&&he.contains(u,c)&&(c.src?he._evalUrl&&he._evalUrl(c.src):n(c.textContent.replace(it,""),u))}return e}function L(e,t,n){for(var i,o=t?he.filter(t,e):e,r=0;null!=(i=o[r]);r++)n||1!==i.nodeType||he.cleanData(b(i)),i.parentNode&&(n&&he.contains(i.ownerDocument,i)&&y(b(i,"script")),i.parentNode.removeChild(i));return e}function O(e,t,n){var i,o,r,a,s=e.style;return n=n||at(e),n&&(a=n.getPropertyValue(t)||n[t],""!==a||he.contains(e.ownerDocument,e)||(a=he.style(e,t)),!pe.pixelMarginRight()&&rt.test(a)&&ot.test(t)&&(i=s.width,o=s.minWidth,r=s.maxWidth,s.minWidth=s.maxWidth=s.width=a,a=n.width,s.width=i,s.minWidth=o,s.maxWidth=r)),void 0!==a?a+"":a}function N(e,t){return{get:function(){return e()?void delete this.get:(this.get=t).apply(this,arguments)}}}function I(e){if(e in ft)return e;for(var t=e[0].toUpperCase()+e.slice(1),n=dt.length;n--;)if((e=dt[n]+t)in ft)return e}function $(e){var t=he.cssProps[e];return t||(t=he.cssProps[e]=I(e)||e),t}function j(e,t,n){var i=Re.exec(t);return i?Math.max(0,i[2]-(n||0))+(i[3]||"px"):t}function F(e,t,n,i,o){var r,a=0;for(r=n===(i?"border":"content")?4:"width"===t?1:0;r<4;r+=2)"margin"===n&&(a+=he.css(e,n+qe[r],!0,o)),i?("content"===n&&(a-=he.css(e,"padding"+qe[r],!0,o)),"margin"!==n&&(a-=he.css(e,"border"+qe[r]+"Width",!0,o))):(a+=he.css(e,"padding"+qe[r],!0,o),"padding"!==n&&(a+=he.css(e,"border"+qe[r]+"Width",!0,o)));return a}function H(e,t,n){var i,o=at(e),r=O(e,t,o),a="border-box"===he.css(e,"boxSizing",!1,o);return rt.test(r)?r:(i=a&&(pe.boxSizingReliable()||r===e.style[t]),"auto"===r&&(r=e["offset"+t[0].toUpperCase()+t.slice(1)]),(r=parseFloat(r)||0)+F(e,t,n||(a?"border":"content"),i,o)+"px")}function R(e,t,n,i,o){return new R.prototype.init(e,t,n,i,o)}function q(){ht&&(!1===ne.hidden&&e.requestAnimationFrame?e.requestAnimationFrame(q):e.setTimeout(q,he.fx.interval),he.fx.tick())}function Y(){return e.setTimeout(function(){pt=void 0}),pt=he.now()}function _(e,t){var n,i=0,o={height:e};for(t=t?1:0;i<4;i+=2-t)n=qe[i],o["margin"+n]=o["padding"+n]=e;return t&&(o.opacity=o.width=e),o}function W(e,t,n){for(var i,o=(X.tweeners[t]||[]).concat(X.tweeners["*"]),r=0,a=o.length;r<a;r++)if(i=o[r].call(n,t,e))return i}function B(e,t,n){var i,o,r,a,s,l,c,u,d="width"in t||"height"in t,f=this,p={},h=e.style,g=e.nodeType&&Ye(e),m=Ie.get(e,"fxshow");n.queue||(a=he._queueHooks(e,"fx"),null==a.unqueued&&(a.unqueued=0,s=a.empty.fire,a.empty.fire=function(){a.unqueued||s()}),a.unqueued++,f.always(function(){f.always(function(){a.unqueued--,he.queue(e,"fx").length||a.empty.fire()})}));for(i in t)if(o=t[i],gt.test(o)){if(delete t[i],r=r||"toggle"===o,o===(g?"hide":"show")){if("show"!==o||!m||void 0===m[i])continue;g=!0}p[i]=m&&m[i]||he.style(e,i)}if((l=!he.isEmptyObject(t))||!he.isEmptyObject(p)){d&&1===e.nodeType&&(n.overflow=[h.overflow,h.overflowX,h.overflowY],c=m&&m.display,null==c&&(c=Ie.get(e,"display")),u=he.css(e,"display"),"none"===u&&(c?u=c:(v([e],!0),c=e.style.display||c,u=he.css(e,"display"),v([e]))),("inline"===u||"inline-block"===u&&null!=c)&&"none"===he.css(e,"float")&&(l||(f.done(function(){h.display=c}),null==c&&(u=h.display,c="none"===u?"":u)),h.display="inline-block")),n.overflow&&(h.overflow="hidden",f.always(function(){h.overflow=n.overflow[0],h.overflowX=n.overflow[1],h.overflowY=n.overflow[2]})),l=!1;for(i in p)l||(m?"hidden"in m&&(g=m.hidden):m=Ie.access(e,"fxshow",{display:c}),r&&(m.hidden=!g),g&&v([e],!0),f.done(function(){g||v([e]),Ie.remove(e,"fxshow");for(i in p)he.style(e,i,p[i])})),l=W(g?m[i]:0,i,f),i in m||(m[i]=l.start,g&&(l.end=l.start,l.start=0))}}function z(e,t){var n,i,o,r,a;for(n in e)if(i=he.camelCase(n),o=t[i],r=e[n],Array.isArray(r)&&(o=r[1],r=e[n]=r[0]),n!==i&&(e[i]=r,delete e[n]),(a=he.cssHooks[i])&&"expand"in a){r=a.expand(r),delete e[i];for(n in r)n in e||(e[n]=r[n],t[n]=o)}else t[i]=o}function X(e,t,n){var i,o,r=0,a=X.prefilters.length,s=he.Deferred().always(function(){delete l.elem}),l=function(){if(o)return!1;for(var t=pt||Y(),n=Math.max(0,c.startTime+c.duration-t),i=n/c.duration||0,r=1-i,a=0,l=c.tweens.length;a<l;a++)c.tweens[a].run(r);return s.notifyWith(e,[c,r,n]),r<1&&l?n:(l||s.notifyWith(e,[c,1,0]),s.resolveWith(e,[c]),!1)},c=s.promise({elem:e,props:he.extend({},t),opts:he.extend(!0,{specialEasing:{},easing:he.easing._default},n),originalProperties:t,originalOptions:n,startTime:pt||Y(),duration:n.duration,tweens:[],createTween:function(t,n){var i=he.Tween(e,c.opts,t,n,c.opts.specialEasing[t]||c.opts.easing);return c.tweens.push(i),i},stop:function(t){var n=0,i=t?c.tweens.length:0;if(o)return this;for(o=!0;n<i;n++)c.tweens[n].run(1);return t?(s.notifyWith(e,[c,1,0]),s.resolveWith(e,[c,t])):s.rejectWith(e,[c,t]),this}}),u=c.props;for(z(u,c.opts.specialEasing);r<a;r++)if(i=X.prefilters[r].call(c,e,u,c.opts))return he.isFunction(i.stop)&&(he._queueHooks(c.elem,c.opts.queue).stop=he.proxy(i.stop,i)),i;return he.map(u,W,c),he.isFunction(c.opts.start)&&c.opts.start.call(e,c),c.progress(c.opts.progress).done(c.opts.done,c.opts.complete).fail(c.opts.fail).always(c.opts.always),he.fx.timer(he.extend(l,{elem:e,anim:c,queue:c.opts.queue})),c}function U(e){return(e.match(Pe)||[]).join(" ")}function V(e){return e.getAttribute&&e.getAttribute("class")||""}function G(e,t,n,i){var o;if(Array.isArray(t))he.each(t,function(t,o){n||Et.test(e)?i(e,o):G(e+"["+("object"==typeof o&&null!=o?t:"")+"]",o,n,i)});else if(n||"object"!==he.type(t))i(e,t);else for(o in t)G(e+"["+o+"]",t[o],n,i)}function K(e){return function(t,n){"string"!=typeof t&&(n=t,t="*");var i,o=0,r=t.toLowerCase().match(Pe)||[];if(he.isFunction(n))for(;i=r[o++];)"+"===i[0]?(i=i.slice(1)||"*",(e[i]=e[i]||[]).unshift(n)):(e[i]=e[i]||[]).push(n)}}function Z(e,t,n,i){function o(s){var l;return r[s]=!0,he.each(e[s]||[],function(e,s){var c=s(t,n,i);return"string"!=typeof c||a||r[c]?a?!(l=c):void 0:(t.dataTypes.unshift(c),o(c),!1)}),l}var r={},a=e===Ht;return o(t.dataTypes[0])||!r["*"]&&o("*")}function Q(e,t){var n,i,o=he.ajaxSettings.flatOptions||{};for(n in t)void 0!==t[n]&&((o[n]?e:i||(i={}))[n]=t[n]);return i&&he.extend(!0,e,i),e}function J(e,t,n){for(var i,o,r,a,s=e.contents,l=e.dataTypes;"*"===l[0];)l.shift(),void 0===i&&(i=e.mimeType||t.getResponseHeader("Content-Type"));if(i)for(o in s)if(s[o]&&s[o].test(i)){l.unshift(o);break}if(l[0]in n)r=l[0];else{for(o in n){if(!l[0]||e.converters[o+" "+l[0]]){r=o;break}a||(a=o)}r=r||a}if(r)return r!==l[0]&&l.unshift(r),n[r]}function ee(e,t,n,i){var o,r,a,s,l,c={},u=e.dataTypes.slice();if(u[1])for(a in e.converters)c[a.toLowerCase()]=e.converters[a];for(r=u.shift();r;)if(e.responseFields[r]&&(n[e.responseFields[r]]=t),!l&&i&&e.dataFilter&&(t=e.dataFilter(t,e.dataType)),l=r,r=u.shift())if("*"===r)r=l;else if("*"!==l&&l!==r){if(!(a=c[l+" "+r]||c["* "+r]))for(o in c)if(s=o.split(" "),s[1]===r&&(a=c[l+" "+s[0]]||c["* "+s[0]])){!0===a?a=c[o]:!0!==c[o]&&(r=s[0],u.unshift(s[1]));break}if(!0!==a)if(a&&e.throws)t=a(t);else try{t=a(t)}catch(e){return{state:"parsererror",error:a?e:"No conversion from "+l+" to "+r}}}return{state:"success",data:t}}var te=[],ne=e.document,ie=Object.getPrototypeOf,oe=te.slice,re=te.concat,ae=te.push,se=te.indexOf,le={},ce=le.toString,ue=le.hasOwnProperty,de=ue.toString,fe=de.call(Object),pe={},he=function(e,t){return new he.fn.init(e,t)},ge=/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,me=/^-ms-/,ve=/-([a-z])/g,be=function(e,t){return t.toUpperCase()};he.fn=he.prototype={jquery:"3.2.1",constructor:he,length:0,toArray:function(){return oe.call(this)},get:function(e){return null==e?oe.call(this):e<0?this[e+this.length]:this[e]},pushStack:function(e){var t=he.merge(this.constructor(),e);return t.prevObject=this,t},each:function(e){return he.each(this,e)},map:function(e){return this.pushStack(he.map(this,function(t,n){return e.call(t,n,t)}))},slice:function(){return this.pushStack(oe.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},eq:function(e){var t=this.length,n=+e+(e<0?t:0);return this.pushStack(n>=0&&n<t?[this[n]]:[])},end:function(){return this.prevObject||this.constructor()},push:ae,sort:te.sort,splice:te.splice},he.extend=he.fn.extend=function(){var e,t,n,i,o,r,a=arguments[0]||{},s=1,l=arguments.length,c=!1;for("boolean"==typeof a&&(c=a,a=arguments[s]||{},s++),"object"==typeof a||he.isFunction(a)||(a={}),s===l&&(a=this,s--);s<l;s++)if(null!=(e=arguments[s]))for(t in e)n=a[t],i=e[t],a!==i&&(c&&i&&(he.isPlainObject(i)||(o=Array.isArray(i)))?(o?(o=!1,r=n&&Array.isArray(n)?n:[]):r=n&&he.isPlainObject(n)?n:{},a[t]=he.extend(c,r,i)):void 0!==i&&(a[t]=i));return a},he.extend({expando:"jQuery"+("3.2.1"+Math.random()).replace(/\D/g,""),isReady:!0,error:function(e){throw new Error(e)},noop:function(){},isFunction:function(e){return"function"===he.type(e)},isWindow:function(e){return null!=e&&e===e.window},isNumeric:function(e){var t=he.type(e);return("number"===t||"string"===t)&&!isNaN(e-parseFloat(e))},isPlainObject:function(e){var t,n;return!(!e||"[object Object]"!==ce.call(e))&&(!(t=ie(e))||"function"==typeof(n=ue.call(t,"constructor")&&t.constructor)&&de.call(n)===fe)},isEmptyObject:function(e){var t;for(t in e)return!1;return!0},type:function(e){return null==e?e+"":"object"==typeof e||"function"==typeof e?le[ce.call(e)]||"object":typeof e},globalEval:function(e){n(e)},camelCase:function(e){return e.replace(me,"ms-").replace(ve,be)},each:function(e,t){var n,o=0;if(i(e))for(n=e.length;o<n&&!1!==t.call(e[o],o,e[o]);o++);else for(o in e)if(!1===t.call(e[o],o,e[o]))break;return e},trim:function(e){return null==e?"":(e+"").replace(ge,"")},makeArray:function(e,t){var n=t||[];return null!=e&&(i(Object(e))?he.merge(n,"string"==typeof e?[e]:e):ae.call(n,e)),n},inArray:function(e,t,n){return null==t?-1:se.call(t,e,n)},merge:function(e,t){for(var n=+t.length,i=0,o=e.length;i<n;i++)e[o++]=t[i];return e.length=o,e},grep:function(e,t,n){for(var i=[],o=0,r=e.length,a=!n;o<r;o++)!t(e[o],o)!==a&&i.push(e[o]);return i},map:function(e,t,n){var o,r,a=0,s=[];if(i(e))for(o=e.length;a<o;a++)null!=(r=t(e[a],a,n))&&s.push(r);else for(a in e)null!=(r=t(e[a],a,n))&&s.push(r);return re.apply([],s)},guid:1,proxy:function(e,t){var n,i,o;if("string"==typeof t&&(n=e[t],t=e,e=n),he.isFunction(e))return i=oe.call(arguments,2),o=function(){return e.apply(t||this,i.concat(oe.call(arguments)))},o.guid=e.guid=e.guid||he.guid++,o},now:Date.now,support:pe}),"function"==typeof Symbol&&(he.fn[Symbol.iterator]=te[Symbol.iterator]),he.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "),function(e,t){le["[object "+t+"]"]=t.toLowerCase()});var ye=function(e){function t(e,t,n,i){var o,r,a,s,l,u,f,p=t&&t.ownerDocument,h=t?t.nodeType:9;if(n=n||[],"string"!=typeof e||!e||1!==h&&9!==h&&11!==h)return n;if(!i&&((t?t.ownerDocument||t:R)!==L&&A(t),t=t||L,N)){if(11!==h&&(l=ge.exec(e)))if(o=l[1]){if(9===h){if(!(a=t.getElementById(o)))return n;if(a.id===o)return n.push(a),n}else if(p&&(a=p.getElementById(o))&&F(t,a)&&a.id===o)return n.push(a),n}else{if(l[2])return K.apply(n,t.getElementsByTagName(e)),n;if((o=l[3])&&x.getElementsByClassName&&t.getElementsByClassName)return K.apply(n,t.getElementsByClassName(o)),n}if(x.qsa&&!B[e+" "]&&(!I||!I.test(e))){if(1!==h)p=t,f=e;else if("object"!==t.nodeName.toLowerCase()){for((s=t.getAttribute("id"))?s=s.replace(ye,xe):t.setAttribute("id",s=H),u=T(e),r=u.length;r--;)u[r]="#"+s+" "+d(u[r]);f=u.join(","),p=me.test(e)&&c(t.parentNode)||t}if(f)try{return K.apply(n,p.querySelectorAll(f)),n}catch(e){}finally{s===H&&t.removeAttribute("id")}}}return E(e.replace(re,"$1"),t,n,i)}function n(){function e(n,i){return t.push(n+" ")>w.cacheLength&&delete e[t.shift()],e[n+" "]=i}var t=[];return e}function i(e){return e[H]=!0,e}function o(e){var t=L.createElement("fieldset");try{return!!e(t)}catch(e){return!1}finally{t.parentNode&&t.parentNode.removeChild(t),t=null}}function r(e,t){for(var n=e.split("|"),i=n.length;i--;)w.attrHandle[n[i]]=t}function a(e,t){var n=t&&e,i=n&&1===e.nodeType&&1===t.nodeType&&e.sourceIndex-t.sourceIndex;if(i)return i;if(n)for(;n=n.nextSibling;)if(n===t)return-1;return e?1:-1}function s(e){return function(t){return"form"in t?t.parentNode&&!1===t.disabled?"label"in t?"label"in t.parentNode?t.parentNode.disabled===e:t.disabled===e:t.isDisabled===e||t.isDisabled!==!e&&Ce(t)===e:t.disabled===e:"label"in t&&t.disabled===e}}function l(e){return i(function(t){return t=+t,i(function(n,i){for(var o,r=e([],n.length,t),a=r.length;a--;)n[o=r[a]]&&(n[o]=!(i[o]=n[o]))})})}function c(e){return e&&void 0!==e.getElementsByTagName&&e}function u(){}function d(e){for(var t=0,n=e.length,i="";t<n;t++)i+=e[t].value;return i}function f(e,t,n){var i=t.dir,o=t.next,r=o||i,a=n&&"parentNode"===r,s=Y++;return t.first?function(t,n,o){for(;t=t[i];)if(1===t.nodeType||a)return e(t,n,o);return!1}:function(t,n,l){var c,u,d,f=[q,s];if(l){for(;t=t[i];)if((1===t.nodeType||a)&&e(t,n,l))return!0}else for(;t=t[i];)if(1===t.nodeType||a)if(d=t[H]||(t[H]={}),u=d[t.uniqueID]||(d[t.uniqueID]={}),o&&o===t.nodeName.toLowerCase())t=t[i]||t;else{if((c=u[r])&&c[0]===q&&c[1]===s)return f[2]=c[2];if(u[r]=f,f[2]=e(t,n,l))return!0}return!1}}function p(e){return e.length>1?function(t,n,i){for(var o=e.length;o--;)if(!e[o](t,n,i))return!1;return!0}:e[0]}function h(e,n,i){for(var o=0,r=n.length;o<r;o++)t(e,n[o],i);return i}function g(e,t,n,i,o){for(var r,a=[],s=0,l=e.length,c=null!=t;s<l;s++)(r=e[s])&&(n&&!n(r,i,o)||(a.push(r),c&&t.push(s)));return a}function m(e,t,n,o,r,a){return o&&!o[H]&&(o=m(o)),r&&!r[H]&&(r=m(r,a)),i(function(i,a,s,l){var c,u,d,f=[],p=[],m=a.length,v=i||h(t||"*",s.nodeType?[s]:s,[]),b=!e||!i&&t?v:g(v,f,e,s,l),y=n?r||(i?e:m||o)?[]:a:b;if(n&&n(b,y,s,l),o)for(c=g(y,p),o(c,[],s,l),u=c.length;u--;)(d=c[u])&&(y[p[u]]=!(b[p[u]]=d));if(i){if(r||e){if(r){for(c=[],u=y.length;u--;)(d=y[u])&&c.push(b[u]=d);r(null,y=[],c,l)}for(u=y.length;u--;)(d=y[u])&&(c=r?Q(i,d):f[u])>-1&&(i[c]=!(a[c]=d))}}else y=g(y===a?y.splice(m,y.length):y),r?r(null,a,y,l):K.apply(a,y)})}function v(e){for(var t,n,i,o=e.length,r=w.relative[e[0].type],a=r||w.relative[" "],s=r?1:0,l=f(function(e){return e===t},a,!0),c=f(function(e){return Q(t,e)>-1},a,!0),u=[function(e,n,i){var o=!r&&(i||n!==D)||((t=n).nodeType?l(e,n,i):c(e,n,i));return t=null,o}];s<o;s++)if(n=w.relative[e[s].type])u=[f(p(u),n)];else{if(n=w.filter[e[s].type].apply(null,e[s].matches),n[H]){for(i=++s;i<o&&!w.relative[e[i].type];i++);return m(s>1&&p(u),s>1&&d(e.slice(0,s-1).concat({value:" "===e[s-2].type?"*":""})).replace(re,"$1"),n,s<i&&v(e.slice(s,i)),i<o&&v(e=e.slice(i)),i<o&&d(e))}u.push(n)}return p(u)}function b(e,n){var o=n.length>0,r=e.length>0,a=function(i,a,s,l,c){var u,d,f,p=0,h="0",m=i&&[],v=[],b=D,y=i||r&&w.find.TAG("*",c),x=q+=null==b?1:Math.random()||.1,C=y.length;for(c&&(D=a===L||a||c);h!==C&&null!=(u=y[h]);h++){if(r&&u){for(d=0,a||u.ownerDocument===L||(A(u),s=!N);f=e[d++];)if(f(u,a||L,s)){l.push(u);break}c&&(q=x)}o&&((u=!f&&u)&&p--,i&&m.push(u))}if(p+=h,o&&h!==p){for(d=0;f=n[d++];)f(m,v,a,s);if(i){if(p>0)for(;h--;)m[h]||v[h]||(v[h]=V.call(l));v=g(v)}K.apply(l,v),c&&!i&&v.length>0&&p+n.length>1&&t.uniqueSort(l)}return c&&(q=x,D=b),m};return o?i(a):a}var y,x,w,C,S,T,k,E,D,M,P,A,L,O,N,I,$,j,F,H="sizzle"+1*new Date,R=e.document,q=0,Y=0,_=n(),W=n(),B=n(),z=function(e,t){return e===t&&(P=!0),0},X={}.hasOwnProperty,U=[],V=U.pop,G=U.push,K=U.push,Z=U.slice,Q=function(e,t){for(var n=0,i=e.length;n<i;n++)if(e[n]===t)return n;return-1},J="checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",ee="[\\x20\\t\\r\\n\\f]",te="(?:\\\\.|[\\w-]|[^\0-\\xa0])+",ne="\\["+ee+"*("+te+")(?:"+ee+"*([*^$|!~]?=)"+ee+"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|("+te+"))|)"+ee+"*\\]",ie=":("+te+")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|"+ne+")*)|.*)\\)|)",oe=new RegExp(ee+"+","g"),re=new RegExp("^"+ee+"+|((?:^|[^\\\\])(?:\\\\.)*)"+ee+"+$","g"),ae=new RegExp("^"+ee+"*,"+ee+"*"),se=new RegExp("^"+ee+"*([>+~]|"+ee+")"+ee+"*"),le=new RegExp("="+ee+"*([^\\]'\"]*?)"+ee+"*\\]","g"),ce=new RegExp(ie),ue=new RegExp("^"+te+"$"),de={ID:new RegExp("^#("+te+")"),CLASS:new RegExp("^\\.("+te+")"),TAG:new RegExp("^("+te+"|[*])"),ATTR:new RegExp("^"+ne),PSEUDO:new RegExp("^"+ie),CHILD:new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\("+ee+"*(even|odd|(([+-]|)(\\d*)n|)"+ee+"*(?:([+-]|)"+ee+"*(\\d+)|))"+ee+"*\\)|)","i"),bool:new RegExp("^(?:"+J+")$","i"),needsContext:new RegExp("^"+ee+"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\("+ee+"*((?:-\\d)?\\d*)"+ee+"*\\)|)(?=[^-]|$)","i")},fe=/^(?:input|select|textarea|button)$/i,pe=/^h\d$/i,he=/^[^{]+\{\s*\[native \w/,ge=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,me=/[+~]/,ve=new RegExp("\\\\([\\da-f]{1,6}"+ee+"?|("+ee+")|.)","ig"),be=function(e,t,n){var i="0x"+t-65536;return i!==i||n?t:i<0?String.fromCharCode(i+65536):String.fromCharCode(i>>10|55296,1023&i|56320)},ye=/([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g,xe=function(e,t){return t?"\0"===e?"�":e.slice(0,-1)+"\\"+e.charCodeAt(e.length-1).toString(16)+" ":"\\"+e},we=function(){A()},Ce=f(function(e){return!0===e.disabled&&("form"in e||"label"in e)},{dir:"parentNode",next:"legend"});try{K.apply(U=Z.call(R.childNodes),R.childNodes),U[R.childNodes.length].nodeType}catch(e){K={apply:U.length?function(e,t){G.apply(e,Z.call(t))}:function(e,t){for(var n=e.length,i=0;e[n++]=t[i++];);e.length=n-1}}}x=t.support={},S=t.isXML=function(e){var t=e&&(e.ownerDocument||e).documentElement;return!!t&&"HTML"!==t.nodeName},A=t.setDocument=function(e){var t,n,i=e?e.ownerDocument||e:R;return i!==L&&9===i.nodeType&&i.documentElement?(L=i,O=L.documentElement,N=!S(L),R!==L&&(n=L.defaultView)&&n.top!==n&&(n.addEventListener?n.addEventListener("unload",we,!1):n.attachEvent&&n.attachEvent("onunload",we)),x.attributes=o(function(e){return e.className="i",!e.getAttribute("className")}),x.getElementsByTagName=o(function(e){return e.appendChild(L.createComment("")),!e.getElementsByTagName("*").length}),x.getElementsByClassName=he.test(L.getElementsByClassName),x.getById=o(function(e){return O.appendChild(e).id=H,!L.getElementsByName||!L.getElementsByName(H).length}),x.getById?(w.filter.ID=function(e){var t=e.replace(ve,be);return function(e){return e.getAttribute("id")===t}},w.find.ID=function(e,t){if(void 0!==t.getElementById&&N){var n=t.getElementById(e);return n?[n]:[]}}):(w.filter.ID=function(e){var t=e.replace(ve,be);return function(e){var n=void 0!==e.getAttributeNode&&e.getAttributeNode("id");return n&&n.value===t}},w.find.ID=function(e,t){if(void 0!==t.getElementById&&N){var n,i,o,r=t.getElementById(e);if(r){if((n=r.getAttributeNode("id"))&&n.value===e)return[r];for(o=t.getElementsByName(e),i=0;r=o[i++];)if((n=r.getAttributeNode("id"))&&n.value===e)return[r]}return[]}}),w.find.TAG=x.getElementsByTagName?function(e,t){return void 0!==t.getElementsByTagName?t.getElementsByTagName(e):x.qsa?t.querySelectorAll(e):void 0}:function(e,t){var n,i=[],o=0,r=t.getElementsByTagName(e);if("*"===e){for(;n=r[o++];)1===n.nodeType&&i.push(n);return i}return r},w.find.CLASS=x.getElementsByClassName&&function(e,t){if(void 0!==t.getElementsByClassName&&N)return t.getElementsByClassName(e)},$=[],I=[],(x.qsa=he.test(L.querySelectorAll))&&(o(function(e){O.appendChild(e).innerHTML="<a id='"+H+"'></a><select id='"+H+"-\r\\' msallowcapture=''><option selected=''></option></select>",e.querySelectorAll("[msallowcapture^='']").length&&I.push("[*^$]="+ee+"*(?:''|\"\")"),e.querySelectorAll("[selected]").length||I.push("\\["+ee+"*(?:value|"+J+")"),e.querySelectorAll("[id~="+H+"-]").length||I.push("~="),e.querySelectorAll(":checked").length||I.push(":checked"),e.querySelectorAll("a#"+H+"+*").length||I.push(".#.+[+~]")}),o(function(e){e.innerHTML="<a href='' disabled='disabled'></a><select disabled='disabled'><option/></select>";var t=L.createElement("input");t.setAttribute("type","hidden"),e.appendChild(t).setAttribute("name","D"),e.querySelectorAll("[name=d]").length&&I.push("name"+ee+"*[*^$|!~]?="),2!==e.querySelectorAll(":enabled").length&&I.push(":enabled",":disabled"),O.appendChild(e).disabled=!0,2!==e.querySelectorAll(":disabled").length&&I.push(":enabled",":disabled"),e.querySelectorAll("*,:x"),I.push(",.*:")})),(x.matchesSelector=he.test(j=O.matches||O.webkitMatchesSelector||O.mozMatchesSelector||O.oMatchesSelector||O.msMatchesSelector))&&o(function(e){x.disconnectedMatch=j.call(e,"*"),j.call(e,"[s!='']:x"),$.push("!=",ie)}),I=I.length&&new RegExp(I.join("|")),$=$.length&&new RegExp($.join("|")),t=he.test(O.compareDocumentPosition),F=t||he.test(O.contains)?function(e,t){var n=9===e.nodeType?e.documentElement:e,i=t&&t.parentNode;return e===i||!(!i||1!==i.nodeType||!(n.contains?n.contains(i):e.compareDocumentPosition&&16&e.compareDocumentPosition(i)))}:function(e,t){if(t)for(;t=t.parentNode;)if(t===e)return!0;return!1},z=t?function(e,t){if(e===t)return P=!0,0;var n=!e.compareDocumentPosition-!t.compareDocumentPosition;return n||(n=(e.ownerDocument||e)===(t.ownerDocument||t)?e.compareDocumentPosition(t):1,1&n||!x.sortDetached&&t.compareDocumentPosition(e)===n?e===L||e.ownerDocument===R&&F(R,e)?-1:t===L||t.ownerDocument===R&&F(R,t)?1:M?Q(M,e)-Q(M,t):0:4&n?-1:1)}:function(e,t){if(e===t)return P=!0,0;var n,i=0,o=e.parentNode,r=t.parentNode,s=[e],l=[t];if(!o||!r)return e===L?-1:t===L?1:o?-1:r?1:M?Q(M,e)-Q(M,t):0;if(o===r)return a(e,t);for(n=e;n=n.parentNode;)s.unshift(n);for(n=t;n=n.parentNode;)l.unshift(n);for(;s[i]===l[i];)i++;return i?a(s[i],l[i]):s[i]===R?-1:l[i]===R?1:0},L):L},t.matches=function(e,n){return t(e,null,null,n)},t.matchesSelector=function(e,n){if((e.ownerDocument||e)!==L&&A(e),n=n.replace(le,"='$1']"),x.matchesSelector&&N&&!B[n+" "]&&(!$||!$.test(n))&&(!I||!I.test(n)))try{var i=j.call(e,n);if(i||x.disconnectedMatch||e.document&&11!==e.document.nodeType)return i}catch(e){}return t(n,L,null,[e]).length>0},t.contains=function(e,t){return(e.ownerDocument||e)!==L&&A(e),F(e,t)},t.attr=function(e,t){(e.ownerDocument||e)!==L&&A(e);var n=w.attrHandle[t.toLowerCase()],i=n&&X.call(w.attrHandle,t.toLowerCase())?n(e,t,!N):void 0;return void 0!==i?i:x.attributes||!N?e.getAttribute(t):(i=e.getAttributeNode(t))&&i.specified?i.value:null},t.escape=function(e){return(e+"").replace(ye,xe)},t.error=function(e){throw new Error("Syntax error, unrecognized expression: "+e)},t.uniqueSort=function(e){var t,n=[],i=0,o=0;if(P=!x.detectDuplicates,M=!x.sortStable&&e.slice(0),e.sort(z),P){for(;t=e[o++];)t===e[o]&&(i=n.push(o));for(;i--;)e.splice(n[i],1)}return M=null,e},C=t.getText=function(e){var t,n="",i=0,o=e.nodeType;if(o){if(1===o||9===o||11===o){if("string"==typeof e.textContent)return e.textContent;for(e=e.firstChild;e;e=e.nextSibling)n+=C(e)}else if(3===o||4===o)return e.nodeValue}else for(;t=e[i++];)n+=C(t);return n},w=t.selectors={cacheLength:50,createPseudo:i,match:de,attrHandle:{},find:{},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(e){return e[1]=e[1].replace(ve,be),e[3]=(e[3]||e[4]||e[5]||"").replace(ve,be),"~="===e[2]&&(e[3]=" "+e[3]+" "),e.slice(0,4)},CHILD:function(e){return e[1]=e[1].toLowerCase(),"nth"===e[1].slice(0,3)?(e[3]||t.error(e[0]),e[4]=+(e[4]?e[5]+(e[6]||1):2*("even"===e[3]||"odd"===e[3])),e[5]=+(e[7]+e[8]||"odd"===e[3])):e[3]&&t.error(e[0]),e},PSEUDO:function(e){var t,n=!e[6]&&e[2];return de.CHILD.test(e[0])?null:(e[3]?e[2]=e[4]||e[5]||"":n&&ce.test(n)&&(t=T(n,!0))&&(t=n.indexOf(")",n.length-t)-n.length)&&(e[0]=e[0].slice(0,t),e[2]=n.slice(0,t)),e.slice(0,3))}},filter:{TAG:function(e){var t=e.replace(ve,be).toLowerCase();return"*"===e?function(){return!0}:function(e){return e.nodeName&&e.nodeName.toLowerCase()===t}},CLASS:function(e){var t=_[e+" "];return t||(t=new RegExp("(^|"+ee+")"+e+"("+ee+"|$)"))&&_(e,function(e){return t.test("string"==typeof e.className&&e.className||void 0!==e.getAttribute&&e.getAttribute("class")||"")})},ATTR:function(e,n,i){return function(o){var r=t.attr(o,e);return null==r?"!="===n:!n||(r+="","="===n?r===i:"!="===n?r!==i:"^="===n?i&&0===r.indexOf(i):"*="===n?i&&r.indexOf(i)>-1:"$="===n?i&&r.slice(-i.length)===i:"~="===n?(" "+r.replace(oe," ")+" ").indexOf(i)>-1:"|="===n&&(r===i||r.slice(0,i.length+1)===i+"-"))}},CHILD:function(e,t,n,i,o){var r="nth"!==e.slice(0,3),a="last"!==e.slice(-4),s="of-type"===t;return 1===i&&0===o?function(e){return!!e.parentNode}:function(t,n,l){var c,u,d,f,p,h,g=r!==a?"nextSibling":"previousSibling",m=t.parentNode,v=s&&t.nodeName.toLowerCase(),b=!l&&!s,y=!1;if(m){if(r){for(;g;){for(f=t;f=f[g];)if(s?f.nodeName.toLowerCase()===v:1===f.nodeType)return!1;h=g="only"===e&&!h&&"nextSibling"}return!0}if(h=[a?m.firstChild:m.lastChild],a&&b){for(f=m,d=f[H]||(f[H]={}),u=d[f.uniqueID]||(d[f.uniqueID]={}),c=u[e]||[],p=c[0]===q&&c[1],y=p&&c[2],f=p&&m.childNodes[p];f=++p&&f&&f[g]||(y=p=0)||h.pop();)if(1===f.nodeType&&++y&&f===t){u[e]=[q,p,y];break}}else if(b&&(f=t,d=f[H]||(f[H]={}),u=d[f.uniqueID]||(d[f.uniqueID]={}),c=u[e]||[],p=c[0]===q&&c[1],y=p),!1===y)for(;(f=++p&&f&&f[g]||(y=p=0)||h.pop())&&((s?f.nodeName.toLowerCase()!==v:1!==f.nodeType)||!++y||(b&&(d=f[H]||(f[H]={}),u=d[f.uniqueID]||(d[f.uniqueID]={}),u[e]=[q,y]),f!==t)););return(y-=o)===i||y%i==0&&y/i>=0}}},PSEUDO:function(e,n){var o,r=w.pseudos[e]||w.setFilters[e.toLowerCase()]||t.error("unsupported pseudo: "+e);return r[H]?r(n):r.length>1?(o=[e,e,"",n],w.setFilters.hasOwnProperty(e.toLowerCase())?i(function(e,t){for(var i,o=r(e,n),a=o.length;a--;)i=Q(e,o[a]),e[i]=!(t[i]=o[a])}):function(e){return r(e,0,o)}):r}},pseudos:{not:i(function(e){var t=[],n=[],o=k(e.replace(re,"$1"));return o[H]?i(function(e,t,n,i){for(var r,a=o(e,null,i,[]),s=e.length;s--;)(r=a[s])&&(e[s]=!(t[s]=r))}):function(e,i,r){return t[0]=e,o(t,null,r,n),t[0]=null,!n.pop()}}),has:i(function(e){return function(n){return t(e,n).length>0}}),contains:i(function(e){return e=e.replace(ve,be),function(t){return(t.textContent||t.innerText||C(t)).indexOf(e)>-1}}),lang:i(function(e){return ue.test(e||"")||t.error("unsupported lang: "+e),e=e.replace(ve,be).toLowerCase(),function(t){var n;do{if(n=N?t.lang:t.getAttribute("xml:lang")||t.getAttribute("lang"))return(n=n.toLowerCase())===e||0===n.indexOf(e+"-")}while((t=t.parentNode)&&1===t.nodeType);return!1}}),target:function(t){var n=e.location&&e.location.hash;return n&&n.slice(1)===t.id},root:function(e){return e===O},focus:function(e){return e===L.activeElement&&(!L.hasFocus||L.hasFocus())&&!!(e.type||e.href||~e.tabIndex)},enabled:s(!1),disabled:s(!0),checked:function(e){var t=e.nodeName.toLowerCase()
;return"input"===t&&!!e.checked||"option"===t&&!!e.selected},selected:function(e){return e.parentNode&&e.parentNode.selectedIndex,!0===e.selected},empty:function(e){for(e=e.firstChild;e;e=e.nextSibling)if(e.nodeType<6)return!1;return!0},parent:function(e){return!w.pseudos.empty(e)},header:function(e){return pe.test(e.nodeName)},input:function(e){return fe.test(e.nodeName)},button:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&"button"===e.type||"button"===t},text:function(e){var t;return"input"===e.nodeName.toLowerCase()&&"text"===e.type&&(null==(t=e.getAttribute("type"))||"text"===t.toLowerCase())},first:l(function(){return[0]}),last:l(function(e,t){return[t-1]}),eq:l(function(e,t,n){return[n<0?n+t:n]}),even:l(function(e,t){for(var n=0;n<t;n+=2)e.push(n);return e}),odd:l(function(e,t){for(var n=1;n<t;n+=2)e.push(n);return e}),lt:l(function(e,t,n){for(var i=n<0?n+t:n;--i>=0;)e.push(i);return e}),gt:l(function(e,t,n){for(var i=n<0?n+t:n;++i<t;)e.push(i);return e})}},w.pseudos.nth=w.pseudos.eq;for(y in{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})w.pseudos[y]=function(e){return function(t){return"input"===t.nodeName.toLowerCase()&&t.type===e}}(y);for(y in{submit:!0,reset:!0})w.pseudos[y]=function(e){return function(t){var n=t.nodeName.toLowerCase();return("input"===n||"button"===n)&&t.type===e}}(y);return u.prototype=w.filters=w.pseudos,w.setFilters=new u,T=t.tokenize=function(e,n){var i,o,r,a,s,l,c,u=W[e+" "];if(u)return n?0:u.slice(0);for(s=e,l=[],c=w.preFilter;s;){i&&!(o=ae.exec(s))||(o&&(s=s.slice(o[0].length)||s),l.push(r=[])),i=!1,(o=se.exec(s))&&(i=o.shift(),r.push({value:i,type:o[0].replace(re," ")}),s=s.slice(i.length));for(a in w.filter)!(o=de[a].exec(s))||c[a]&&!(o=c[a](o))||(i=o.shift(),r.push({value:i,type:a,matches:o}),s=s.slice(i.length));if(!i)break}return n?s.length:s?t.error(e):W(e,l).slice(0)},k=t.compile=function(e,t){var n,i=[],o=[],r=B[e+" "];if(!r){for(t||(t=T(e)),n=t.length;n--;)r=v(t[n]),r[H]?i.push(r):o.push(r);r=B(e,b(o,i)),r.selector=e}return r},E=t.select=function(e,t,n,i){var o,r,a,s,l,u="function"==typeof e&&e,f=!i&&T(e=u.selector||e);if(n=n||[],1===f.length){if(r=f[0]=f[0].slice(0),r.length>2&&"ID"===(a=r[0]).type&&9===t.nodeType&&N&&w.relative[r[1].type]){if(!(t=(w.find.ID(a.matches[0].replace(ve,be),t)||[])[0]))return n;u&&(t=t.parentNode),e=e.slice(r.shift().value.length)}for(o=de.needsContext.test(e)?0:r.length;o--&&(a=r[o],!w.relative[s=a.type]);)if((l=w.find[s])&&(i=l(a.matches[0].replace(ve,be),me.test(r[0].type)&&c(t.parentNode)||t))){if(r.splice(o,1),!(e=i.length&&d(r)))return K.apply(n,i),n;break}}return(u||k(e,f))(i,t,!N,n,!t||me.test(e)&&c(t.parentNode)||t),n},x.sortStable=H.split("").sort(z).join("")===H,x.detectDuplicates=!!P,A(),x.sortDetached=o(function(e){return 1&e.compareDocumentPosition(L.createElement("fieldset"))}),o(function(e){return e.innerHTML="<a href='#'></a>","#"===e.firstChild.getAttribute("href")})||r("type|href|height|width",function(e,t,n){if(!n)return e.getAttribute(t,"type"===t.toLowerCase()?1:2)}),x.attributes&&o(function(e){return e.innerHTML="<input/>",e.firstChild.setAttribute("value",""),""===e.firstChild.getAttribute("value")})||r("value",function(e,t,n){if(!n&&"input"===e.nodeName.toLowerCase())return e.defaultValue}),o(function(e){return null==e.getAttribute("disabled")})||r(J,function(e,t,n){var i;if(!n)return!0===e[t]?t.toLowerCase():(i=e.getAttributeNode(t))&&i.specified?i.value:null}),t}(e);he.find=ye,he.expr=ye.selectors,he.expr[":"]=he.expr.pseudos,he.uniqueSort=he.unique=ye.uniqueSort,he.text=ye.getText,he.isXMLDoc=ye.isXML,he.contains=ye.contains,he.escapeSelector=ye.escape;var xe=function(e,t,n){for(var i=[],o=void 0!==n;(e=e[t])&&9!==e.nodeType;)if(1===e.nodeType){if(o&&he(e).is(n))break;i.push(e)}return i},we=function(e,t){for(var n=[];e;e=e.nextSibling)1===e.nodeType&&e!==t&&n.push(e);return n},Ce=he.expr.match.needsContext,Se=/^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i,Te=/^.[^:#\[\.,]*$/;he.filter=function(e,t,n){var i=t[0];return n&&(e=":not("+e+")"),1===t.length&&1===i.nodeType?he.find.matchesSelector(i,e)?[i]:[]:he.find.matches(e,he.grep(t,function(e){return 1===e.nodeType}))},he.fn.extend({find:function(e){var t,n,i=this.length,o=this;if("string"!=typeof e)return this.pushStack(he(e).filter(function(){for(t=0;t<i;t++)if(he.contains(o[t],this))return!0}));for(n=this.pushStack([]),t=0;t<i;t++)he.find(e,o[t],n);return i>1?he.uniqueSort(n):n},filter:function(e){return this.pushStack(r(this,e||[],!1))},not:function(e){return this.pushStack(r(this,e||[],!0))},is:function(e){return!!r(this,"string"==typeof e&&Ce.test(e)?he(e):e||[],!1).length}});var ke,Ee=/^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/;(he.fn.init=function(e,t,n){var i,o;if(!e)return this;if(n=n||ke,"string"==typeof e){if(!(i="<"===e[0]&&">"===e[e.length-1]&&e.length>=3?[null,e,null]:Ee.exec(e))||!i[1]&&t)return!t||t.jquery?(t||n).find(e):this.constructor(t).find(e);if(i[1]){if(t=t instanceof he?t[0]:t,he.merge(this,he.parseHTML(i[1],t&&t.nodeType?t.ownerDocument||t:ne,!0)),Se.test(i[1])&&he.isPlainObject(t))for(i in t)he.isFunction(this[i])?this[i](t[i]):this.attr(i,t[i]);return this}return o=ne.getElementById(i[2]),o&&(this[0]=o,this.length=1),this}return e.nodeType?(this[0]=e,this.length=1,this):he.isFunction(e)?void 0!==n.ready?n.ready(e):e(he):he.makeArray(e,this)}).prototype=he.fn,ke=he(ne);var De=/^(?:parents|prev(?:Until|All))/,Me={children:!0,contents:!0,next:!0,prev:!0};he.fn.extend({has:function(e){var t=he(e,this),n=t.length;return this.filter(function(){for(var e=0;e<n;e++)if(he.contains(this,t[e]))return!0})},closest:function(e,t){var n,i=0,o=this.length,r=[],a="string"!=typeof e&&he(e);if(!Ce.test(e))for(;i<o;i++)for(n=this[i];n&&n!==t;n=n.parentNode)if(n.nodeType<11&&(a?a.index(n)>-1:1===n.nodeType&&he.find.matchesSelector(n,e))){r.push(n);break}return this.pushStack(r.length>1?he.uniqueSort(r):r)},index:function(e){return e?"string"==typeof e?se.call(he(e),this[0]):se.call(this,e.jquery?e[0]:e):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(e,t){return this.pushStack(he.uniqueSort(he.merge(this.get(),he(e,t))))},addBack:function(e){return this.add(null==e?this.prevObject:this.prevObject.filter(e))}}),he.each({parent:function(e){var t=e.parentNode;return t&&11!==t.nodeType?t:null},parents:function(e){return xe(e,"parentNode")},parentsUntil:function(e,t,n){return xe(e,"parentNode",n)},next:function(e){return a(e,"nextSibling")},prev:function(e){return a(e,"previousSibling")},nextAll:function(e){return xe(e,"nextSibling")},prevAll:function(e){return xe(e,"previousSibling")},nextUntil:function(e,t,n){return xe(e,"nextSibling",n)},prevUntil:function(e,t,n){return xe(e,"previousSibling",n)},siblings:function(e){return we((e.parentNode||{}).firstChild,e)},children:function(e){return we(e.firstChild)},contents:function(e){return o(e,"iframe")?e.contentDocument:(o(e,"template")&&(e=e.content||e),he.merge([],e.childNodes))}},function(e,t){he.fn[e]=function(n,i){var o=he.map(this,t,n);return"Until"!==e.slice(-5)&&(i=n),i&&"string"==typeof i&&(o=he.filter(i,o)),this.length>1&&(Me[e]||he.uniqueSort(o),De.test(e)&&o.reverse()),this.pushStack(o)}});var Pe=/[^\x20\t\r\n\f]+/g;he.Callbacks=function(e){e="string"==typeof e?s(e):he.extend({},e);var t,n,i,o,r=[],a=[],l=-1,c=function(){for(o=o||e.once,i=t=!0;a.length;l=-1)for(n=a.shift();++l<r.length;)!1===r[l].apply(n[0],n[1])&&e.stopOnFalse&&(l=r.length,n=!1);e.memory||(n=!1),t=!1,o&&(r=n?[]:"")},u={add:function(){return r&&(n&&!t&&(l=r.length-1,a.push(n)),function t(n){he.each(n,function(n,i){he.isFunction(i)?e.unique&&u.has(i)||r.push(i):i&&i.length&&"string"!==he.type(i)&&t(i)})}(arguments),n&&!t&&c()),this},remove:function(){return he.each(arguments,function(e,t){for(var n;(n=he.inArray(t,r,n))>-1;)r.splice(n,1),n<=l&&l--}),this},has:function(e){return e?he.inArray(e,r)>-1:r.length>0},empty:function(){return r&&(r=[]),this},disable:function(){return o=a=[],r=n="",this},disabled:function(){return!r},lock:function(){return o=a=[],n||t||(r=n=""),this},locked:function(){return!!o},fireWith:function(e,n){return o||(n=n||[],n=[e,n.slice?n.slice():n],a.push(n),t||c()),this},fire:function(){return u.fireWith(this,arguments),this},fired:function(){return!!i}};return u},he.extend({Deferred:function(t){var n=[["notify","progress",he.Callbacks("memory"),he.Callbacks("memory"),2],["resolve","done",he.Callbacks("once memory"),he.Callbacks("once memory"),0,"resolved"],["reject","fail",he.Callbacks("once memory"),he.Callbacks("once memory"),1,"rejected"]],i="pending",o={state:function(){return i},always:function(){return r.done(arguments).fail(arguments),this},catch:function(e){return o.then(null,e)},pipe:function(){var e=arguments;return he.Deferred(function(t){he.each(n,function(n,i){var o=he.isFunction(e[i[4]])&&e[i[4]];r[i[1]](function(){var e=o&&o.apply(this,arguments);e&&he.isFunction(e.promise)?e.promise().progress(t.notify).done(t.resolve).fail(t.reject):t[i[0]+"With"](this,o?[e]:arguments)})}),e=null}).promise()},then:function(t,i,o){function r(t,n,i,o){return function(){var s=this,u=arguments,d=function(){var e,d;if(!(t<a)){if((e=i.apply(s,u))===n.promise())throw new TypeError("Thenable self-resolution");d=e&&("object"==typeof e||"function"==typeof e)&&e.then,he.isFunction(d)?o?d.call(e,r(a,n,l,o),r(a,n,c,o)):(a++,d.call(e,r(a,n,l,o),r(a,n,c,o),r(a,n,l,n.notifyWith))):(i!==l&&(s=void 0,u=[e]),(o||n.resolveWith)(s,u))}},f=o?d:function(){try{d()}catch(e){he.Deferred.exceptionHook&&he.Deferred.exceptionHook(e,f.stackTrace),t+1>=a&&(i!==c&&(s=void 0,u=[e]),n.rejectWith(s,u))}};t?f():(he.Deferred.getStackHook&&(f.stackTrace=he.Deferred.getStackHook()),e.setTimeout(f))}}var a=0;return he.Deferred(function(e){n[0][3].add(r(0,e,he.isFunction(o)?o:l,e.notifyWith)),n[1][3].add(r(0,e,he.isFunction(t)?t:l)),n[2][3].add(r(0,e,he.isFunction(i)?i:c))}).promise()},promise:function(e){return null!=e?he.extend(e,o):o}},r={};return he.each(n,function(e,t){var a=t[2],s=t[5];o[t[1]]=a.add,s&&a.add(function(){i=s},n[3-e][2].disable,n[0][2].lock),a.add(t[3].fire),r[t[0]]=function(){return r[t[0]+"With"](this===r?void 0:this,arguments),this},r[t[0]+"With"]=a.fireWith}),o.promise(r),t&&t.call(r,r),r},when:function(e){var t=arguments.length,n=t,i=Array(n),o=oe.call(arguments),r=he.Deferred(),a=function(e){return function(n){i[e]=this,o[e]=arguments.length>1?oe.call(arguments):n,--t||r.resolveWith(i,o)}};if(t<=1&&(u(e,r.done(a(n)).resolve,r.reject,!t),"pending"===r.state()||he.isFunction(o[n]&&o[n].then)))return r.then();for(;n--;)u(o[n],a(n),r.reject);return r.promise()}});var Ae=/^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;he.Deferred.exceptionHook=function(t,n){e.console&&e.console.warn&&t&&Ae.test(t.name)&&e.console.warn("jQuery.Deferred exception: "+t.message,t.stack,n)},he.readyException=function(t){e.setTimeout(function(){throw t})};var Le=he.Deferred();he.fn.ready=function(e){return Le.then(e).catch(function(e){he.readyException(e)}),this},he.extend({isReady:!1,readyWait:1,ready:function(e){(!0===e?--he.readyWait:he.isReady)||(he.isReady=!0,!0!==e&&--he.readyWait>0||Le.resolveWith(ne,[he]))}}),he.ready.then=Le.then,"complete"===ne.readyState||"loading"!==ne.readyState&&!ne.documentElement.doScroll?e.setTimeout(he.ready):(ne.addEventListener("DOMContentLoaded",d),e.addEventListener("load",d));var Oe=function(e,t,n,i,o,r,a){var s=0,l=e.length,c=null==n;if("object"===he.type(n)){o=!0;for(s in n)Oe(e,t,s,n[s],!0,r,a)}else if(void 0!==i&&(o=!0,he.isFunction(i)||(a=!0),c&&(a?(t.call(e,i),t=null):(c=t,t=function(e,t,n){return c.call(he(e),n)})),t))for(;s<l;s++)t(e[s],n,a?i:i.call(e[s],s,t(e[s],n)));return o?e:c?t.call(e):l?t(e[0],n):r},Ne=function(e){return 1===e.nodeType||9===e.nodeType||!+e.nodeType};f.uid=1,f.prototype={cache:function(e){var t=e[this.expando];return t||(t={},Ne(e)&&(e.nodeType?e[this.expando]=t:Object.defineProperty(e,this.expando,{value:t,configurable:!0}))),t},set:function(e,t,n){var i,o=this.cache(e);if("string"==typeof t)o[he.camelCase(t)]=n;else for(i in t)o[he.camelCase(i)]=t[i];return o},get:function(e,t){return void 0===t?this.cache(e):e[this.expando]&&e[this.expando][he.camelCase(t)]},access:function(e,t,n){return void 0===t||t&&"string"==typeof t&&void 0===n?this.get(e,t):(this.set(e,t,n),void 0!==n?n:t)},remove:function(e,t){var n,i=e[this.expando];if(void 0!==i){if(void 0!==t){Array.isArray(t)?t=t.map(he.camelCase):(t=he.camelCase(t),t=t in i?[t]:t.match(Pe)||[]),n=t.length;for(;n--;)delete i[t[n]]}(void 0===t||he.isEmptyObject(i))&&(e.nodeType?e[this.expando]=void 0:delete e[this.expando])}},hasData:function(e){var t=e[this.expando];return void 0!==t&&!he.isEmptyObject(t)}};var Ie=new f,$e=new f,je=/^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,Fe=/[A-Z]/g;he.extend({hasData:function(e){return $e.hasData(e)||Ie.hasData(e)},data:function(e,t,n){return $e.access(e,t,n)},removeData:function(e,t){$e.remove(e,t)},_data:function(e,t,n){return Ie.access(e,t,n)},_removeData:function(e,t){Ie.remove(e,t)}}),he.fn.extend({data:function(e,t){var n,i,o,r=this[0],a=r&&r.attributes;if(void 0===e){if(this.length&&(o=$e.get(r),1===r.nodeType&&!Ie.get(r,"hasDataAttrs"))){for(n=a.length;n--;)a[n]&&(i=a[n].name,0===i.indexOf("data-")&&(i=he.camelCase(i.slice(5)),h(r,i,o[i])));Ie.set(r,"hasDataAttrs",!0)}return o}return"object"==typeof e?this.each(function(){$e.set(this,e)}):Oe(this,function(t){var n;if(r&&void 0===t){if(void 0!==(n=$e.get(r,e)))return n;if(void 0!==(n=h(r,e)))return n}else this.each(function(){$e.set(this,e,t)})},null,t,arguments.length>1,null,!0)},removeData:function(e){return this.each(function(){$e.remove(this,e)})}}),he.extend({queue:function(e,t,n){var i;if(e)return t=(t||"fx")+"queue",i=Ie.get(e,t),n&&(!i||Array.isArray(n)?i=Ie.access(e,t,he.makeArray(n)):i.push(n)),i||[]},dequeue:function(e,t){t=t||"fx";var n=he.queue(e,t),i=n.length,o=n.shift(),r=he._queueHooks(e,t),a=function(){he.dequeue(e,t)};"inprogress"===o&&(o=n.shift(),i--),o&&("fx"===t&&n.unshift("inprogress"),delete r.stop,o.call(e,a,r)),!i&&r&&r.empty.fire()},_queueHooks:function(e,t){var n=t+"queueHooks";return Ie.get(e,n)||Ie.access(e,n,{empty:he.Callbacks("once memory").add(function(){Ie.remove(e,[t+"queue",n])})})}}),he.fn.extend({queue:function(e,t){var n=2;return"string"!=typeof e&&(t=e,e="fx",n--),arguments.length<n?he.queue(this[0],e):void 0===t?this:this.each(function(){var n=he.queue(this,e,t);he._queueHooks(this,e),"fx"===e&&"inprogress"!==n[0]&&he.dequeue(this,e)})},dequeue:function(e){return this.each(function(){he.dequeue(this,e)})},clearQueue:function(e){return this.queue(e||"fx",[])},promise:function(e,t){var n,i=1,o=he.Deferred(),r=this,a=this.length,s=function(){--i||o.resolveWith(r,[r])};for("string"!=typeof e&&(t=e,e=void 0),e=e||"fx";a--;)(n=Ie.get(r[a],e+"queueHooks"))&&n.empty&&(i++,n.empty.add(s));return s(),o.promise(t)}});var He=/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,Re=new RegExp("^(?:([+-])=|)("+He+")([a-z%]*)$","i"),qe=["Top","Right","Bottom","Left"],Ye=function(e,t){return e=t||e,"none"===e.style.display||""===e.style.display&&he.contains(e.ownerDocument,e)&&"none"===he.css(e,"display")},_e=function(e,t,n,i){var o,r,a={};for(r in t)a[r]=e.style[r],e.style[r]=t[r];o=n.apply(e,i||[]);for(r in t)e.style[r]=a[r];return o},We={};he.fn.extend({show:function(){return v(this,!0)},hide:function(){return v(this)},toggle:function(e){return"boolean"==typeof e?e?this.show():this.hide():this.each(function(){Ye(this)?he(this).show():he(this).hide()})}});var Be=/^(?:checkbox|radio)$/i,ze=/<([a-z][^\/\0>\x20\t\r\n\f]+)/i,Xe=/^$|\/(?:java|ecma)script/i,Ue={option:[1,"<select multiple='multiple'>","</select>"],thead:[1,"<table>","</table>"],col:[2,"<table><colgroup>","</colgroup></table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:[0,"",""]};Ue.optgroup=Ue.option,Ue.tbody=Ue.tfoot=Ue.colgroup=Ue.caption=Ue.thead,Ue.th=Ue.td;var Ve=/<|&#?\w+;/;!function(){var e=ne.createDocumentFragment(),t=e.appendChild(ne.createElement("div")),n=ne.createElement("input");n.setAttribute("type","radio"),n.setAttribute("checked","checked"),n.setAttribute("name","t"),t.appendChild(n),pe.checkClone=t.cloneNode(!0).cloneNode(!0).lastChild.checked,t.innerHTML="<textarea>x</textarea>",pe.noCloneChecked=!!t.cloneNode(!0).lastChild.defaultValue}();var Ge=ne.documentElement,Ke=/^key/,Ze=/^(?:mouse|pointer|contextmenu|drag|drop)|click/,Qe=/^([^.]*)(?:\.(.+)|)/;he.event={global:{},add:function(e,t,n,i,o){var r,a,s,l,c,u,d,f,p,h,g,m=Ie.get(e);if(m)for(n.handler&&(r=n,n=r.handler,o=r.selector),o&&he.find.matchesSelector(Ge,o),n.guid||(n.guid=he.guid++),(l=m.events)||(l=m.events={}),(a=m.handle)||(a=m.handle=function(t){return void 0!==he&&he.event.triggered!==t.type?he.event.dispatch.apply(e,arguments):void 0}),t=(t||"").match(Pe)||[""],c=t.length;c--;)s=Qe.exec(t[c])||[],p=g=s[1],h=(s[2]||"").split(".").sort(),p&&(d=he.event.special[p]||{},p=(o?d.delegateType:d.bindType)||p,d=he.event.special[p]||{},u=he.extend({type:p,origType:g,data:i,handler:n,guid:n.guid,selector:o,needsContext:o&&he.expr.match.needsContext.test(o),namespace:h.join(".")},r),(f=l[p])||(f=l[p]=[],f.delegateCount=0,d.setup&&!1!==d.setup.call(e,i,h,a)||e.addEventListener&&e.addEventListener(p,a)),d.add&&(d.add.call(e,u),u.handler.guid||(u.handler.guid=n.guid)),o?f.splice(f.delegateCount++,0,u):f.push(u),he.event.global[p]=!0)},remove:function(e,t,n,i,o){var r,a,s,l,c,u,d,f,p,h,g,m=Ie.hasData(e)&&Ie.get(e);if(m&&(l=m.events)){for(t=(t||"").match(Pe)||[""],c=t.length;c--;)if(s=Qe.exec(t[c])||[],p=g=s[1],h=(s[2]||"").split(".").sort(),p){for(d=he.event.special[p]||{},p=(i?d.delegateType:d.bindType)||p,f=l[p]||[],s=s[2]&&new RegExp("(^|\\.)"+h.join("\\.(?:.*\\.|)")+"(\\.|$)"),a=r=f.length;r--;)u=f[r],!o&&g!==u.origType||n&&n.guid!==u.guid||s&&!s.test(u.namespace)||i&&i!==u.selector&&("**"!==i||!u.selector)||(f.splice(r,1),u.selector&&f.delegateCount--,d.remove&&d.remove.call(e,u));a&&!f.length&&(d.teardown&&!1!==d.teardown.call(e,h,m.handle)||he.removeEvent(e,p,m.handle),delete l[p])}else for(p in l)he.event.remove(e,p+t[c],n,i,!0);he.isEmptyObject(l)&&Ie.remove(e,"handle events")}},dispatch:function(e){var t,n,i,o,r,a,s=he.event.fix(e),l=new Array(arguments.length),c=(Ie.get(this,"events")||{})[s.type]||[],u=he.event.special[s.type]||{};for(l[0]=s,t=1;t<arguments.length;t++)l[t]=arguments[t];if(s.delegateTarget=this,!u.preDispatch||!1!==u.preDispatch.call(this,s)){for(a=he.event.handlers.call(this,s,c),t=0;(o=a[t++])&&!s.isPropagationStopped();)for(s.currentTarget=o.elem,n=0;(r=o.handlers[n++])&&!s.isImmediatePropagationStopped();)s.rnamespace&&!s.rnamespace.test(r.namespace)||(s.handleObj=r,s.data=r.data,void 0!==(i=((he.event.special[r.origType]||{}).handle||r.handler).apply(o.elem,l))&&!1===(s.result=i)&&(s.preventDefault(),s.stopPropagation()));return u.postDispatch&&u.postDispatch.call(this,s),s.result}},handlers:function(e,t){var n,i,o,r,a,s=[],l=t.delegateCount,c=e.target;if(l&&c.nodeType&&!("click"===e.type&&e.button>=1))for(;c!==this;c=c.parentNode||this)if(1===c.nodeType&&("click"!==e.type||!0!==c.disabled)){for(r=[],a={},n=0;n<l;n++)i=t[n],o=i.selector+" ",void 0===a[o]&&(a[o]=i.needsContext?he(o,this).index(c)>-1:he.find(o,this,null,[c]).length),a[o]&&r.push(i);r.length&&s.push({elem:c,handlers:r})}return c=this,l<t.length&&s.push({elem:c,handlers:t.slice(l)}),s},addProp:function(e,t){Object.defineProperty(he.Event.prototype,e,{enumerable:!0,configurable:!0,get:he.isFunction(t)?function(){if(this.originalEvent)return t(this.originalEvent)}:function(){if(this.originalEvent)return this.originalEvent[e]},set:function(t){Object.defineProperty(this,e,{enumerable:!0,configurable:!0,writable:!0,value:t})}})},fix:function(e){return e[he.expando]?e:new he.Event(e)},special:{load:{noBubble:!0},focus:{trigger:function(){if(this!==S()&&this.focus)return this.focus(),!1},delegateType:"focusin"},blur:{trigger:function(){if(this===S()&&this.blur)return this.blur(),!1},delegateType:"focusout"},click:{trigger:function(){if("checkbox"===this.type&&this.click&&o(this,"input"))return this.click(),!1},_default:function(e){return o(e.target,"a")}},beforeunload:{postDispatch:function(e){void 0!==e.result&&e.originalEvent&&(e.originalEvent.returnValue=e.result)}}}},he.removeEvent=function(e,t,n){e.removeEventListener&&e.removeEventListener(t,n)},he.Event=function(e,t){if(!(this instanceof he.Event))return new he.Event(e,t);e&&e.type?(this.originalEvent=e,this.type=e.type,this.isDefaultPrevented=e.defaultPrevented||void 0===e.defaultPrevented&&!1===e.returnValue?w:C,this.target=e.target&&3===e.target.nodeType?e.target.parentNode:e.target,this.currentTarget=e.currentTarget,this.relatedTarget=e.relatedTarget):this.type=e,t&&he.extend(this,t),this.timeStamp=e&&e.timeStamp||he.now(),this[he.expando]=!0},he.Event.prototype={constructor:he.Event,isDefaultPrevented:C,isPropagationStopped:C,isImmediatePropagationStopped:C,isSimulated:!1,preventDefault:function(){var e=this.originalEvent;this.isDefaultPrevented=w,e&&!this.isSimulated&&e.preventDefault()},stopPropagation:function(){var e=this.originalEvent;this.isPropagationStopped=w,e&&!this.isSimulated&&e.stopPropagation()},stopImmediatePropagation:function(){var e=this.originalEvent;this.isImmediatePropagationStopped=w,e&&!this.isSimulated&&e.stopImmediatePropagation(),this.stopPropagation()}},he.each({altKey:!0,bubbles:!0,cancelable:!0,changedTouches:!0,ctrlKey:!0,detail:!0,eventPhase:!0,metaKey:!0,pageX:!0,pageY:!0,shiftKey:!0,view:!0,char:!0,charCode:!0,key:!0,keyCode:!0,button:!0,buttons:!0,clientX:!0,clientY:!0,offsetX:!0,offsetY:!0,pointerId:!0,pointerType:!0,screenX:!0,screenY:!0,targetTouches:!0,toElement:!0,touches:!0,which:function(e){var t=e.button;return null==e.which&&Ke.test(e.type)?null!=e.charCode?e.charCode:e.keyCode:!e.which&&void 0!==t&&Ze.test(e.type)?1&t?1:2&t?3:4&t?2:0:e.which}},he.event.addProp),he.each({mouseenter:"mouseover",mouseleave:"mouseout",pointerenter:"pointerover",pointerleave:"pointerout"},function(e,t){he.event.special[e]={delegateType:t,bindType:t,handle:function(e){var n,i=this,o=e.relatedTarget,r=e.handleObj;return o&&(o===i||he.contains(i,o))||(e.type=r.origType,n=r.handler.apply(this,arguments),e.type=t),n}}}),he.fn.extend({on:function(e,t,n,i){return T(this,e,t,n,i)},one:function(e,t,n,i){return T(this,e,t,n,i,1)},off:function(e,t,n){var i,o;if(e&&e.preventDefault&&e.handleObj)return i=e.handleObj,he(e.delegateTarget).off(i.namespace?i.origType+"."+i.namespace:i.origType,i.selector,i.handler),this;if("object"==typeof e){for(o in e)this.off(o,t,e[o]);return this}return!1!==t&&"function"!=typeof t||(n=t,t=void 0),!1===n&&(n=C),this.each(function(){he.event.remove(this,e,n,t)})}});var Je=/<(?!area|br|col|embed|hr|img|input|link|meta|param)(([a-z][^\/\0>\x20\t\r\n\f]*)[^>]*)\/>/gi,et=/<script|<style|<link/i,tt=/checked\s*(?:[^=]|=\s*.checked.)/i,nt=/^true\/(.*)/,it=/^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;he.extend({htmlPrefilter:function(e){return e.replace(Je,"<$1></$2>")},clone:function(e,t,n){var i,o,r,a,s=e.cloneNode(!0),l=he.contains(e.ownerDocument,e);if(!(pe.noCloneChecked||1!==e.nodeType&&11!==e.nodeType||he.isXMLDoc(e)))for(a=b(s),r=b(e),i=0,o=r.length;i<o;i++)P(r[i],a[i]);if(t)if(n)for(r=r||b(e),a=a||b(s),i=0,o=r.length;i<o;i++)M(r[i],a[i]);else M(e,s);return a=b(s,"script"),a.length>0&&y(a,!l&&b(e,"script")),s},cleanData:function(e){for(var t,n,i,o=he.event.special,r=0;void 0!==(n=e[r]);r++)if(Ne(n)){if(t=n[Ie.expando]){if(t.events)for(i in t.events)o[i]?he.event.remove(n,i):he.removeEvent(n,i,t.handle);n[Ie.expando]=void 0}n[$e.expando]&&(n[$e.expando]=void 0)}}}),he.fn.extend({detach:function(e){return L(this,e,!0)},remove:function(e){return L(this,e)},text:function(e){return Oe(this,function(e){return void 0===e?he.text(this):this.empty().each(function(){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||(this.textContent=e)})},null,e,arguments.length)},append:function(){return A(this,arguments,function(e){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){k(this,e).appendChild(e)}})},prepend:function(){return A(this,arguments,function(e){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var t=k(this,e);t.insertBefore(e,t.firstChild)}})},before:function(){return A(this,arguments,function(e){this.parentNode&&this.parentNode.insertBefore(e,this)})},after:function(){return A(this,arguments,function(e){this.parentNode&&this.parentNode.insertBefore(e,this.nextSibling)})},empty:function(){for(var e,t=0;null!=(e=this[t]);t++)1===e.nodeType&&(he.cleanData(b(e,!1)),e.textContent="");return this},clone:function(e,t){return e=null!=e&&e,t=null==t?e:t,this.map(function(){return he.clone(this,e,t)})},html:function(e){return Oe(this,function(e){var t=this[0]||{},n=0,i=this.length;if(void 0===e&&1===t.nodeType)return t.innerHTML;if("string"==typeof e&&!et.test(e)&&!Ue[(ze.exec(e)||["",""])[1].toLowerCase()]){e=he.htmlPrefilter(e);try{for(;n<i;n++)t=this[n]||{},1===t.nodeType&&(he.cleanData(b(t,!1)),t.innerHTML=e);t=0}catch(e){}}t&&this.empty().append(e)},null,e,arguments.length)},replaceWith:function(){var e=[];return A(this,arguments,function(t){var n=this.parentNode;he.inArray(this,e)<0&&(he.cleanData(b(this)),n&&n.replaceChild(t,this))},e)}}),he.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},function(e,t){he.fn[e]=function(e){for(var n,i=[],o=he(e),r=o.length-1,a=0;a<=r;a++)n=a===r?this:this.clone(!0),he(o[a])[t](n),ae.apply(i,n.get());return this.pushStack(i)}});var ot=/^margin/,rt=new RegExp("^("+He+")(?!px)[a-z%]+$","i"),at=function(t){var n=t.ownerDocument.defaultView;return n&&n.opener||(n=e),n.getComputedStyle(t)};!function(){function t(){if(s){s.style.cssText="box-sizing:border-box;position:relative;display:block;margin:auto;border:1px;padding:1px;top:1%;width:50%",s.innerHTML="",Ge.appendChild(a);var t=e.getComputedStyle(s);n="1%"!==t.top,r="2px"===t.marginLeft,i="4px"===t.width,s.style.marginRight="50%",o="4px"===t.marginRight,Ge.removeChild(a),s=null}}var n,i,o,r,a=ne.createElement("div"),s=ne.createElement("div");s.style&&(s.style.backgroundClip="content-box",s.cloneNode(!0).style.backgroundClip="",pe.clearCloneStyle="content-box"===s.style.backgroundClip,a.style.cssText="border:0;width:8px;height:0;top:0;left:-9999px;padding:0;margin-top:1px;position:absolute",a.appendChild(s),he.extend(pe,{pixelPosition:function(){return t(),n},boxSizingReliable:function(){return t(),i},pixelMarginRight:function(){return t(),o},reliableMarginLeft:function(){return t(),r}}))}();var st=/^(none|table(?!-c[ea]).+)/,lt=/^--/,ct={position:"absolute",visibility:"hidden",display:"block"},ut={letterSpacing:"0",fontWeight:"400"},dt=["Webkit","Moz","ms"],ft=ne.createElement("div").style;he.extend({cssHooks:{opacity:{get:function(e,t){if(t){var n=O(e,"opacity");return""===n?"1":n}}}},cssNumber:{animationIterationCount:!0,columnCount:!0,fillOpacity:!0,flexGrow:!0,flexShrink:!0,fontWeight:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{float:"cssFloat"},style:function(e,t,n,i){if(e&&3!==e.nodeType&&8!==e.nodeType&&e.style){var o,r,a,s=he.camelCase(t),l=lt.test(t),c=e.style;if(l||(t=$(s)),a=he.cssHooks[t]||he.cssHooks[s],void 0===n)return a&&"get"in a&&void 0!==(o=a.get(e,!1,i))?o:c[t];r=typeof n,"string"===r&&(o=Re.exec(n))&&o[1]&&(n=g(e,t,o),r="number"),null!=n&&n===n&&("number"===r&&(n+=o&&o[3]||(he.cssNumber[s]?"":"px")),pe.clearCloneStyle||""!==n||0!==t.indexOf("background")||(c[t]="inherit"),a&&"set"in a&&void 0===(n=a.set(e,n,i))||(l?c.setProperty(t,n):c[t]=n))}},css:function(e,t,n,i){var o,r,a,s=he.camelCase(t);return lt.test(t)||(t=$(s)),a=he.cssHooks[t]||he.cssHooks[s],a&&"get"in a&&(o=a.get(e,!0,n)),void 0===o&&(o=O(e,t,i)),"normal"===o&&t in ut&&(o=ut[t]),""===n||n?(r=parseFloat(o),!0===n||isFinite(r)?r||0:o):o}}),he.each(["height","width"],function(e,t){he.cssHooks[t]={get:function(e,n,i){if(n)return!st.test(he.css(e,"display"))||e.getClientRects().length&&e.getBoundingClientRect().width?H(e,t,i):_e(e,ct,function(){return H(e,t,i)})},set:function(e,n,i){var o,r=i&&at(e),a=i&&F(e,t,i,"border-box"===he.css(e,"boxSizing",!1,r),r);return a&&(o=Re.exec(n))&&"px"!==(o[3]||"px")&&(e.style[t]=n,n=he.css(e,t)),j(e,n,a)}}}),he.cssHooks.marginLeft=N(pe.reliableMarginLeft,function(e,t){if(t)return(parseFloat(O(e,"marginLeft"))||e.getBoundingClientRect().left-_e(e,{marginLeft:0},function(){return e.getBoundingClientRect().left}))+"px"}),he.each({margin:"",padding:"",border:"Width"},function(e,t){he.cssHooks[e+t]={expand:function(n){for(var i=0,o={},r="string"==typeof n?n.split(" "):[n];i<4;i++)o[e+qe[i]+t]=r[i]||r[i-2]||r[0];return o}},ot.test(e)||(he.cssHooks[e+t].set=j)}),he.fn.extend({css:function(e,t){return Oe(this,function(e,t,n){var i,o,r={},a=0;if(Array.isArray(t)){for(i=at(e),o=t.length;a<o;a++)r[t[a]]=he.css(e,t[a],!1,i);return r}return void 0!==n?he.style(e,t,n):he.css(e,t)},e,t,arguments.length>1)}}),he.Tween=R,R.prototype={constructor:R,init:function(e,t,n,i,o,r){this.elem=e,this.prop=n,this.easing=o||he.easing._default,this.options=t,this.start=this.now=this.cur(),this.end=i,this.unit=r||(he.cssNumber[n]?"":"px")},cur:function(){var e=R.propHooks[this.prop];return e&&e.get?e.get(this):R.propHooks._default.get(this)},run:function(e){var t,n=R.propHooks[this.prop];return this.options.duration?this.pos=t=he.easing[this.easing](e,this.options.duration*e,0,1,this.options.duration):this.pos=t=e,this.now=(this.end-this.start)*t+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),n&&n.set?n.set(this):R.propHooks._default.set(this),this}},R.prototype.init.prototype=R.prototype,R.propHooks={_default:{get:function(e){var t;return 1!==e.elem.nodeType||null!=e.elem[e.prop]&&null==e.elem.style[e.prop]?e.elem[e.prop]:(t=he.css(e.elem,e.prop,""),t&&"auto"!==t?t:0)},set:function(e){he.fx.step[e.prop]?he.fx.step[e.prop](e):1!==e.elem.nodeType||null==e.elem.style[he.cssProps[e.prop]]&&!he.cssHooks[e.prop]?e.elem[e.prop]=e.now:he.style(e.elem,e.prop,e.now+e.unit)}}},R.propHooks.scrollTop=R.propHooks.scrollLeft={set:function(e){e.elem.nodeType&&e.elem.parentNode&&(e.elem[e.prop]=e.now)}},he.easing={linear:function(e){return e},swing:function(e){return.5-Math.cos(e*Math.PI)/2},_default:"swing"},he.fx=R.prototype.init,he.fx.step={};var pt,ht,gt=/^(?:toggle|show|hide)$/,mt=/queueHooks$/;he.Animation=he.extend(X,{tweeners:{"*":[function(e,t){var n=this.createTween(e,t);return g(n.elem,e,Re.exec(t),n),n}]},tweener:function(e,t){he.isFunction(e)?(t=e,e=["*"]):e=e.match(Pe);for(var n,i=0,o=e.length;i<o;i++)n=e[i],X.tweeners[n]=X.tweeners[n]||[],X.tweeners[n].unshift(t)},prefilters:[B],prefilter:function(e,t){t?X.prefilters.unshift(e):X.prefilters.push(e)}}),he.speed=function(e,t,n){var i=e&&"object"==typeof e?he.extend({},e):{complete:n||!n&&t||he.isFunction(e)&&e,duration:e,easing:n&&t||t&&!he.isFunction(t)&&t};return he.fx.off?i.duration=0:"number"!=typeof i.duration&&(i.duration in he.fx.speeds?i.duration=he.fx.speeds[i.duration]:i.duration=he.fx.speeds._default),null!=i.queue&&!0!==i.queue||(i.queue="fx"),i.old=i.complete,i.complete=function(){he.isFunction(i.old)&&i.old.call(this),i.queue&&he.dequeue(this,i.queue)},i},he.fn.extend({fadeTo:function(e,t,n,i){return this.filter(Ye).css("opacity",0).show().end().animate({opacity:t},e,n,i)},animate:function(e,t,n,i){var o=he.isEmptyObject(e),r=he.speed(t,n,i),a=function(){var t=X(this,he.extend({},e),r);(o||Ie.get(this,"finish"))&&t.stop(!0)};return a.finish=a,o||!1===r.queue?this.each(a):this.queue(r.queue,a)},stop:function(e,t,n){var i=function(e){var t=e.stop;delete e.stop,t(n)};return"string"!=typeof e&&(n=t,t=e,e=void 0),t&&!1!==e&&this.queue(e||"fx",[]),this.each(function(){var t=!0,o=null!=e&&e+"queueHooks",r=he.timers,a=Ie.get(this);if(o)a[o]&&a[o].stop&&i(a[o]);else for(o in a)a[o]&&a[o].stop&&mt.test(o)&&i(a[o])
;for(o=r.length;o--;)r[o].elem!==this||null!=e&&r[o].queue!==e||(r[o].anim.stop(n),t=!1,r.splice(o,1));!t&&n||he.dequeue(this,e)})},finish:function(e){return!1!==e&&(e=e||"fx"),this.each(function(){var t,n=Ie.get(this),i=n[e+"queue"],o=n[e+"queueHooks"],r=he.timers,a=i?i.length:0;for(n.finish=!0,he.queue(this,e,[]),o&&o.stop&&o.stop.call(this,!0),t=r.length;t--;)r[t].elem===this&&r[t].queue===e&&(r[t].anim.stop(!0),r.splice(t,1));for(t=0;t<a;t++)i[t]&&i[t].finish&&i[t].finish.call(this);delete n.finish})}}),he.each(["toggle","show","hide"],function(e,t){var n=he.fn[t];he.fn[t]=function(e,i,o){return null==e||"boolean"==typeof e?n.apply(this,arguments):this.animate(_(t,!0),e,i,o)}}),he.each({slideDown:_("show"),slideUp:_("hide"),slideToggle:_("toggle"),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},function(e,t){he.fn[e]=function(e,n,i){return this.animate(t,e,n,i)}}),he.timers=[],he.fx.tick=function(){var e,t=0,n=he.timers;for(pt=he.now();t<n.length;t++)(e=n[t])()||n[t]!==e||n.splice(t--,1);n.length||he.fx.stop(),pt=void 0},he.fx.timer=function(e){he.timers.push(e),he.fx.start()},he.fx.interval=13,he.fx.start=function(){ht||(ht=!0,q())},he.fx.stop=function(){ht=null},he.fx.speeds={slow:600,fast:200,_default:400},he.fn.delay=function(t,n){return t=he.fx?he.fx.speeds[t]||t:t,n=n||"fx",this.queue(n,function(n,i){var o=e.setTimeout(n,t);i.stop=function(){e.clearTimeout(o)}})},function(){var e=ne.createElement("input"),t=ne.createElement("select"),n=t.appendChild(ne.createElement("option"));e.type="checkbox",pe.checkOn=""!==e.value,pe.optSelected=n.selected,e=ne.createElement("input"),e.value="t",e.type="radio",pe.radioValue="t"===e.value}();var vt,bt=he.expr.attrHandle;he.fn.extend({attr:function(e,t){return Oe(this,he.attr,e,t,arguments.length>1)},removeAttr:function(e){return this.each(function(){he.removeAttr(this,e)})}}),he.extend({attr:function(e,t,n){var i,o,r=e.nodeType;if(3!==r&&8!==r&&2!==r)return void 0===e.getAttribute?he.prop(e,t,n):(1===r&&he.isXMLDoc(e)||(o=he.attrHooks[t.toLowerCase()]||(he.expr.match.bool.test(t)?vt:void 0)),void 0!==n?null===n?void he.removeAttr(e,t):o&&"set"in o&&void 0!==(i=o.set(e,n,t))?i:(e.setAttribute(t,n+""),n):o&&"get"in o&&null!==(i=o.get(e,t))?i:(i=he.find.attr(e,t),null==i?void 0:i))},attrHooks:{type:{set:function(e,t){if(!pe.radioValue&&"radio"===t&&o(e,"input")){var n=e.value;return e.setAttribute("type",t),n&&(e.value=n),t}}}},removeAttr:function(e,t){var n,i=0,o=t&&t.match(Pe);if(o&&1===e.nodeType)for(;n=o[i++];)e.removeAttribute(n)}}),vt={set:function(e,t,n){return!1===t?he.removeAttr(e,n):e.setAttribute(n,n),n}},he.each(he.expr.match.bool.source.match(/\w+/g),function(e,t){var n=bt[t]||he.find.attr;bt[t]=function(e,t,i){var o,r,a=t.toLowerCase();return i||(r=bt[a],bt[a]=o,o=null!=n(e,t,i)?a:null,bt[a]=r),o}});var yt=/^(?:input|select|textarea|button)$/i,xt=/^(?:a|area)$/i;he.fn.extend({prop:function(e,t){return Oe(this,he.prop,e,t,arguments.length>1)},removeProp:function(e){return this.each(function(){delete this[he.propFix[e]||e]})}}),he.extend({prop:function(e,t,n){var i,o,r=e.nodeType;if(3!==r&&8!==r&&2!==r)return 1===r&&he.isXMLDoc(e)||(t=he.propFix[t]||t,o=he.propHooks[t]),void 0!==n?o&&"set"in o&&void 0!==(i=o.set(e,n,t))?i:e[t]=n:o&&"get"in o&&null!==(i=o.get(e,t))?i:e[t]},propHooks:{tabIndex:{get:function(e){var t=he.find.attr(e,"tabindex");return t?parseInt(t,10):yt.test(e.nodeName)||xt.test(e.nodeName)&&e.href?0:-1}}},propFix:{for:"htmlFor",class:"className"}}),pe.optSelected||(he.propHooks.selected={get:function(e){var t=e.parentNode;return t&&t.parentNode&&t.parentNode.selectedIndex,null},set:function(e){var t=e.parentNode;t&&(t.selectedIndex,t.parentNode&&t.parentNode.selectedIndex)}}),he.each(["tabIndex","readOnly","maxLength","cellSpacing","cellPadding","rowSpan","colSpan","useMap","frameBorder","contentEditable"],function(){he.propFix[this.toLowerCase()]=this}),he.fn.extend({addClass:function(e){var t,n,i,o,r,a,s,l=0;if(he.isFunction(e))return this.each(function(t){he(this).addClass(e.call(this,t,V(this)))});if("string"==typeof e&&e)for(t=e.match(Pe)||[];n=this[l++];)if(o=V(n),i=1===n.nodeType&&" "+U(o)+" "){for(a=0;r=t[a++];)i.indexOf(" "+r+" ")<0&&(i+=r+" ");s=U(i),o!==s&&n.setAttribute("class",s)}return this},removeClass:function(e){var t,n,i,o,r,a,s,l=0;if(he.isFunction(e))return this.each(function(t){he(this).removeClass(e.call(this,t,V(this)))});if(!arguments.length)return this.attr("class","");if("string"==typeof e&&e)for(t=e.match(Pe)||[];n=this[l++];)if(o=V(n),i=1===n.nodeType&&" "+U(o)+" "){for(a=0;r=t[a++];)for(;i.indexOf(" "+r+" ")>-1;)i=i.replace(" "+r+" "," ");s=U(i),o!==s&&n.setAttribute("class",s)}return this},toggleClass:function(e,t){var n=typeof e;return"boolean"==typeof t&&"string"===n?t?this.addClass(e):this.removeClass(e):he.isFunction(e)?this.each(function(n){he(this).toggleClass(e.call(this,n,V(this),t),t)}):this.each(function(){var t,i,o,r;if("string"===n)for(i=0,o=he(this),r=e.match(Pe)||[];t=r[i++];)o.hasClass(t)?o.removeClass(t):o.addClass(t);else void 0!==e&&"boolean"!==n||(t=V(this),t&&Ie.set(this,"__className__",t),this.setAttribute&&this.setAttribute("class",t||!1===e?"":Ie.get(this,"__className__")||""))})},hasClass:function(e){var t,n,i=0;for(t=" "+e+" ";n=this[i++];)if(1===n.nodeType&&(" "+U(V(n))+" ").indexOf(t)>-1)return!0;return!1}});var wt=/\r/g;he.fn.extend({val:function(e){var t,n,i,o=this[0];{if(arguments.length)return i=he.isFunction(e),this.each(function(n){var o;1===this.nodeType&&(o=i?e.call(this,n,he(this).val()):e,null==o?o="":"number"==typeof o?o+="":Array.isArray(o)&&(o=he.map(o,function(e){return null==e?"":e+""})),(t=he.valHooks[this.type]||he.valHooks[this.nodeName.toLowerCase()])&&"set"in t&&void 0!==t.set(this,o,"value")||(this.value=o))});if(o)return(t=he.valHooks[o.type]||he.valHooks[o.nodeName.toLowerCase()])&&"get"in t&&void 0!==(n=t.get(o,"value"))?n:(n=o.value,"string"==typeof n?n.replace(wt,""):null==n?"":n)}}}),he.extend({valHooks:{option:{get:function(e){var t=he.find.attr(e,"value");return null!=t?t:U(he.text(e))}},select:{get:function(e){var t,n,i,r=e.options,a=e.selectedIndex,s="select-one"===e.type,l=s?null:[],c=s?a+1:r.length;for(i=a<0?c:s?a:0;i<c;i++)if(n=r[i],(n.selected||i===a)&&!n.disabled&&(!n.parentNode.disabled||!o(n.parentNode,"optgroup"))){if(t=he(n).val(),s)return t;l.push(t)}return l},set:function(e,t){for(var n,i,o=e.options,r=he.makeArray(t),a=o.length;a--;)i=o[a],(i.selected=he.inArray(he.valHooks.option.get(i),r)>-1)&&(n=!0);return n||(e.selectedIndex=-1),r}}}}),he.each(["radio","checkbox"],function(){he.valHooks[this]={set:function(e,t){if(Array.isArray(t))return e.checked=he.inArray(he(e).val(),t)>-1}},pe.checkOn||(he.valHooks[this].get=function(e){return null===e.getAttribute("value")?"on":e.value})});var Ct=/^(?:focusinfocus|focusoutblur)$/;he.extend(he.event,{trigger:function(t,n,i,o){var r,a,s,l,c,u,d,f=[i||ne],p=ue.call(t,"type")?t.type:t,h=ue.call(t,"namespace")?t.namespace.split("."):[];if(a=s=i=i||ne,3!==i.nodeType&&8!==i.nodeType&&!Ct.test(p+he.event.triggered)&&(p.indexOf(".")>-1&&(h=p.split("."),p=h.shift(),h.sort()),c=p.indexOf(":")<0&&"on"+p,t=t[he.expando]?t:new he.Event(p,"object"==typeof t&&t),t.isTrigger=o?2:3,t.namespace=h.join("."),t.rnamespace=t.namespace?new RegExp("(^|\\.)"+h.join("\\.(?:.*\\.|)")+"(\\.|$)"):null,t.result=void 0,t.target||(t.target=i),n=null==n?[t]:he.makeArray(n,[t]),d=he.event.special[p]||{},o||!d.trigger||!1!==d.trigger.apply(i,n))){if(!o&&!d.noBubble&&!he.isWindow(i)){for(l=d.delegateType||p,Ct.test(l+p)||(a=a.parentNode);a;a=a.parentNode)f.push(a),s=a;s===(i.ownerDocument||ne)&&f.push(s.defaultView||s.parentWindow||e)}for(r=0;(a=f[r++])&&!t.isPropagationStopped();)t.type=r>1?l:d.bindType||p,u=(Ie.get(a,"events")||{})[t.type]&&Ie.get(a,"handle"),u&&u.apply(a,n),(u=c&&a[c])&&u.apply&&Ne(a)&&(t.result=u.apply(a,n),!1===t.result&&t.preventDefault());return t.type=p,o||t.isDefaultPrevented()||d._default&&!1!==d._default.apply(f.pop(),n)||!Ne(i)||c&&he.isFunction(i[p])&&!he.isWindow(i)&&(s=i[c],s&&(i[c]=null),he.event.triggered=p,i[p](),he.event.triggered=void 0,s&&(i[c]=s)),t.result}},simulate:function(e,t,n){var i=he.extend(new he.Event,n,{type:e,isSimulated:!0});he.event.trigger(i,null,t)}}),he.fn.extend({trigger:function(e,t){return this.each(function(){he.event.trigger(e,t,this)})},triggerHandler:function(e,t){var n=this[0];if(n)return he.event.trigger(e,t,n,!0)}}),he.each("blur focus focusin focusout resize scroll click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup contextmenu".split(" "),function(e,t){he.fn[t]=function(e,n){return arguments.length>0?this.on(t,null,e,n):this.trigger(t)}}),he.fn.extend({hover:function(e,t){return this.mouseenter(e).mouseleave(t||e)}}),pe.focusin="onfocusin"in e,pe.focusin||he.each({focus:"focusin",blur:"focusout"},function(e,t){var n=function(e){he.event.simulate(t,e.target,he.event.fix(e))};he.event.special[t]={setup:function(){var i=this.ownerDocument||this,o=Ie.access(i,t);o||i.addEventListener(e,n,!0),Ie.access(i,t,(o||0)+1)},teardown:function(){var i=this.ownerDocument||this,o=Ie.access(i,t)-1;o?Ie.access(i,t,o):(i.removeEventListener(e,n,!0),Ie.remove(i,t))}}});var St=e.location,Tt=he.now(),kt=/\?/;he.parseXML=function(t){var n;if(!t||"string"!=typeof t)return null;try{n=(new e.DOMParser).parseFromString(t,"text/xml")}catch(e){n=void 0}return n&&!n.getElementsByTagName("parsererror").length||he.error("Invalid XML: "+t),n};var Et=/\[\]$/,Dt=/\r?\n/g,Mt=/^(?:submit|button|image|reset|file)$/i,Pt=/^(?:input|select|textarea|keygen)/i;he.param=function(e,t){var n,i=[],o=function(e,t){var n=he.isFunction(t)?t():t;i[i.length]=encodeURIComponent(e)+"="+encodeURIComponent(null==n?"":n)};if(Array.isArray(e)||e.jquery&&!he.isPlainObject(e))he.each(e,function(){o(this.name,this.value)});else for(n in e)G(n,e[n],t,o);return i.join("&")},he.fn.extend({serialize:function(){return he.param(this.serializeArray())},serializeArray:function(){return this.map(function(){var e=he.prop(this,"elements");return e?he.makeArray(e):this}).filter(function(){var e=this.type;return this.name&&!he(this).is(":disabled")&&Pt.test(this.nodeName)&&!Mt.test(e)&&(this.checked||!Be.test(e))}).map(function(e,t){var n=he(this).val();return null==n?null:Array.isArray(n)?he.map(n,function(e){return{name:t.name,value:e.replace(Dt,"\r\n")}}):{name:t.name,value:n.replace(Dt,"\r\n")}}).get()}});var At=/%20/g,Lt=/#.*$/,Ot=/([?&])_=[^&]*/,Nt=/^(.*?):[ \t]*([^\r\n]*)$/gm,It=/^(?:about|app|app-storage|.+-extension|file|res|widget):$/,$t=/^(?:GET|HEAD)$/,jt=/^\/\//,Ft={},Ht={},Rt="*/".concat("*"),qt=ne.createElement("a");qt.href=St.href,he.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:St.href,type:"GET",isLocal:It.test(St.protocol),global:!0,processData:!0,async:!0,contentType:"application/x-www-form-urlencoded; charset=UTF-8",accepts:{"*":Rt,text:"text/plain",html:"text/html",xml:"application/xml, text/xml",json:"application/json, text/javascript"},contents:{xml:/\bxml\b/,html:/\bhtml/,json:/\bjson\b/},responseFields:{xml:"responseXML",text:"responseText",json:"responseJSON"},converters:{"* text":String,"text html":!0,"text json":JSON.parse,"text xml":he.parseXML},flatOptions:{url:!0,context:!0}},ajaxSetup:function(e,t){return t?Q(Q(e,he.ajaxSettings),t):Q(he.ajaxSettings,e)},ajaxPrefilter:K(Ft),ajaxTransport:K(Ht),ajax:function(t,n){function i(t,n,i,s){var c,f,p,x,w,C=n;u||(u=!0,l&&e.clearTimeout(l),o=void 0,a=s||"",S.readyState=t>0?4:0,c=t>=200&&t<300||304===t,i&&(x=J(h,S,i)),x=ee(h,x,S,c),c?(h.ifModified&&(w=S.getResponseHeader("Last-Modified"),w&&(he.lastModified[r]=w),(w=S.getResponseHeader("etag"))&&(he.etag[r]=w)),204===t||"HEAD"===h.type?C="nocontent":304===t?C="notmodified":(C=x.state,f=x.data,p=x.error,c=!p)):(p=C,!t&&C||(C="error",t<0&&(t=0))),S.status=t,S.statusText=(n||C)+"",c?v.resolveWith(g,[f,C,S]):v.rejectWith(g,[S,C,p]),S.statusCode(y),y=void 0,d&&m.trigger(c?"ajaxSuccess":"ajaxError",[S,h,c?f:p]),b.fireWith(g,[S,C]),d&&(m.trigger("ajaxComplete",[S,h]),--he.active||he.event.trigger("ajaxStop")))}"object"==typeof t&&(n=t,t=void 0),n=n||{};var o,r,a,s,l,c,u,d,f,p,h=he.ajaxSetup({},n),g=h.context||h,m=h.context&&(g.nodeType||g.jquery)?he(g):he.event,v=he.Deferred(),b=he.Callbacks("once memory"),y=h.statusCode||{},x={},w={},C="canceled",S={readyState:0,getResponseHeader:function(e){var t;if(u){if(!s)for(s={};t=Nt.exec(a);)s[t[1].toLowerCase()]=t[2];t=s[e.toLowerCase()]}return null==t?null:t},getAllResponseHeaders:function(){return u?a:null},setRequestHeader:function(e,t){return null==u&&(e=w[e.toLowerCase()]=w[e.toLowerCase()]||e,x[e]=t),this},overrideMimeType:function(e){return null==u&&(h.mimeType=e),this},statusCode:function(e){var t;if(e)if(u)S.always(e[S.status]);else for(t in e)y[t]=[y[t],e[t]];return this},abort:function(e){var t=e||C;return o&&o.abort(t),i(0,t),this}};if(v.promise(S),h.url=((t||h.url||St.href)+"").replace(jt,St.protocol+"//"),h.type=n.method||n.type||h.method||h.type,h.dataTypes=(h.dataType||"*").toLowerCase().match(Pe)||[""],null==h.crossDomain){c=ne.createElement("a");try{c.href=h.url,c.href=c.href,h.crossDomain=qt.protocol+"//"+qt.host!=c.protocol+"//"+c.host}catch(e){h.crossDomain=!0}}if(h.data&&h.processData&&"string"!=typeof h.data&&(h.data=he.param(h.data,h.traditional)),Z(Ft,h,n,S),u)return S;d=he.event&&h.global,d&&0==he.active++&&he.event.trigger("ajaxStart"),h.type=h.type.toUpperCase(),h.hasContent=!$t.test(h.type),r=h.url.replace(Lt,""),h.hasContent?h.data&&h.processData&&0===(h.contentType||"").indexOf("application/x-www-form-urlencoded")&&(h.data=h.data.replace(At,"+")):(p=h.url.slice(r.length),h.data&&(r+=(kt.test(r)?"&":"?")+h.data,delete h.data),!1===h.cache&&(r=r.replace(Ot,"$1"),p=(kt.test(r)?"&":"?")+"_="+Tt+++p),h.url=r+p),h.ifModified&&(he.lastModified[r]&&S.setRequestHeader("If-Modified-Since",he.lastModified[r]),he.etag[r]&&S.setRequestHeader("If-None-Match",he.etag[r])),(h.data&&h.hasContent&&!1!==h.contentType||n.contentType)&&S.setRequestHeader("Content-Type",h.contentType),S.setRequestHeader("Accept",h.dataTypes[0]&&h.accepts[h.dataTypes[0]]?h.accepts[h.dataTypes[0]]+("*"!==h.dataTypes[0]?", "+Rt+"; q=0.01":""):h.accepts["*"]);for(f in h.headers)S.setRequestHeader(f,h.headers[f]);if(h.beforeSend&&(!1===h.beforeSend.call(g,S,h)||u))return S.abort();if(C="abort",b.add(h.complete),S.done(h.success),S.fail(h.error),o=Z(Ht,h,n,S)){if(S.readyState=1,d&&m.trigger("ajaxSend",[S,h]),u)return S;h.async&&h.timeout>0&&(l=e.setTimeout(function(){S.abort("timeout")},h.timeout));try{u=!1,o.send(x,i)}catch(e){if(u)throw e;i(-1,e)}}else i(-1,"No Transport");return S},getJSON:function(e,t,n){return he.get(e,t,n,"json")},getScript:function(e,t){return he.get(e,void 0,t,"script")}}),he.each(["get","post"],function(e,t){he[t]=function(e,n,i,o){return he.isFunction(n)&&(o=o||i,i=n,n=void 0),he.ajax(he.extend({url:e,type:t,dataType:o,data:n,success:i},he.isPlainObject(e)&&e))}}),he._evalUrl=function(e){return he.ajax({url:e,type:"GET",dataType:"script",cache:!0,async:!1,global:!1,throws:!0})},he.fn.extend({wrapAll:function(e){var t;return this[0]&&(he.isFunction(e)&&(e=e.call(this[0])),t=he(e,this[0].ownerDocument).eq(0).clone(!0),this[0].parentNode&&t.insertBefore(this[0]),t.map(function(){for(var e=this;e.firstElementChild;)e=e.firstElementChild;return e}).append(this)),this},wrapInner:function(e){return he.isFunction(e)?this.each(function(t){he(this).wrapInner(e.call(this,t))}):this.each(function(){var t=he(this),n=t.contents();n.length?n.wrapAll(e):t.append(e)})},wrap:function(e){var t=he.isFunction(e);return this.each(function(n){he(this).wrapAll(t?e.call(this,n):e)})},unwrap:function(e){return this.parent(e).not("body").each(function(){he(this).replaceWith(this.childNodes)}),this}}),he.expr.pseudos.hidden=function(e){return!he.expr.pseudos.visible(e)},he.expr.pseudos.visible=function(e){return!!(e.offsetWidth||e.offsetHeight||e.getClientRects().length)},he.ajaxSettings.xhr=function(){try{return new e.XMLHttpRequest}catch(e){}};var Yt={0:200,1223:204},_t=he.ajaxSettings.xhr();pe.cors=!!_t&&"withCredentials"in _t,pe.ajax=_t=!!_t,he.ajaxTransport(function(t){var n,i;if(pe.cors||_t&&!t.crossDomain)return{send:function(o,r){var a,s=t.xhr();if(s.open(t.type,t.url,t.async,t.username,t.password),t.xhrFields)for(a in t.xhrFields)s[a]=t.xhrFields[a];t.mimeType&&s.overrideMimeType&&s.overrideMimeType(t.mimeType),t.crossDomain||o["X-Requested-With"]||(o["X-Requested-With"]="XMLHttpRequest");for(a in o)s.setRequestHeader(a,o[a]);n=function(e){return function(){n&&(n=i=s.onload=s.onerror=s.onabort=s.onreadystatechange=null,"abort"===e?s.abort():"error"===e?"number"!=typeof s.status?r(0,"error"):r(s.status,s.statusText):r(Yt[s.status]||s.status,s.statusText,"text"!==(s.responseType||"text")||"string"!=typeof s.responseText?{binary:s.response}:{text:s.responseText},s.getAllResponseHeaders()))}},s.onload=n(),i=s.onerror=n("error"),void 0!==s.onabort?s.onabort=i:s.onreadystatechange=function(){4===s.readyState&&e.setTimeout(function(){n&&i()})},n=n("abort");try{s.send(t.hasContent&&t.data||null)}catch(e){if(n)throw e}},abort:function(){n&&n()}}}),he.ajaxPrefilter(function(e){e.crossDomain&&(e.contents.script=!1)}),he.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/\b(?:java|ecma)script\b/},converters:{"text script":function(e){return he.globalEval(e),e}}}),he.ajaxPrefilter("script",function(e){void 0===e.cache&&(e.cache=!1),e.crossDomain&&(e.type="GET")}),he.ajaxTransport("script",function(e){if(e.crossDomain){var t,n;return{send:function(i,o){t=he("<script>").prop({charset:e.scriptCharset,src:e.url}).on("load error",n=function(e){t.remove(),n=null,e&&o("error"===e.type?404:200,e.type)}),ne.head.appendChild(t[0])},abort:function(){n&&n()}}}});var Wt=[],Bt=/(=)\?(?=&|$)|\?\?/;he.ajaxSetup({jsonp:"callback",jsonpCallback:function(){var e=Wt.pop()||he.expando+"_"+Tt++;return this[e]=!0,e}}),he.ajaxPrefilter("json jsonp",function(t,n,i){var o,r,a,s=!1!==t.jsonp&&(Bt.test(t.url)?"url":"string"==typeof t.data&&0===(t.contentType||"").indexOf("application/x-www-form-urlencoded")&&Bt.test(t.data)&&"data");if(s||"jsonp"===t.dataTypes[0])return o=t.jsonpCallback=he.isFunction(t.jsonpCallback)?t.jsonpCallback():t.jsonpCallback,s?t[s]=t[s].replace(Bt,"$1"+o):!1!==t.jsonp&&(t.url+=(kt.test(t.url)?"&":"?")+t.jsonp+"="+o),t.converters["script json"]=function(){return a||he.error(o+" was not called"),a[0]},t.dataTypes[0]="json",r=e[o],e[o]=function(){a=arguments},i.always(function(){void 0===r?he(e).removeProp(o):e[o]=r,t[o]&&(t.jsonpCallback=n.jsonpCallback,Wt.push(o)),a&&he.isFunction(r)&&r(a[0]),a=r=void 0}),"script"}),pe.createHTMLDocument=function(){var e=ne.implementation.createHTMLDocument("").body;return e.innerHTML="<form></form><form></form>",2===e.childNodes.length}(),he.parseHTML=function(e,t,n){if("string"!=typeof e)return[];"boolean"==typeof t&&(n=t,t=!1);var i,o,r;return t||(pe.createHTMLDocument?(t=ne.implementation.createHTMLDocument(""),i=t.createElement("base"),i.href=ne.location.href,t.head.appendChild(i)):t=ne),o=Se.exec(e),r=!n&&[],o?[t.createElement(o[1])]:(o=x([e],t,r),r&&r.length&&he(r).remove(),he.merge([],o.childNodes))},he.fn.load=function(e,t,n){var i,o,r,a=this,s=e.indexOf(" ");return s>-1&&(i=U(e.slice(s)),e=e.slice(0,s)),he.isFunction(t)?(n=t,t=void 0):t&&"object"==typeof t&&(o="POST"),a.length>0&&he.ajax({url:e,type:o||"GET",dataType:"html",data:t}).done(function(e){r=arguments,a.html(i?he("<div>").append(he.parseHTML(e)).find(i):e)}).always(n&&function(e,t){a.each(function(){n.apply(this,r||[e.responseText,t,e])})}),this},he.each(["ajaxStart","ajaxStop","ajaxComplete","ajaxError","ajaxSuccess","ajaxSend"],function(e,t){he.fn[t]=function(e){return this.on(t,e)}}),he.expr.pseudos.animated=function(e){return he.grep(he.timers,function(t){return e===t.elem}).length},he.offset={setOffset:function(e,t,n){var i,o,r,a,s,l,c,u=he.css(e,"position"),d=he(e),f={};"static"===u&&(e.style.position="relative"),s=d.offset(),r=he.css(e,"top"),l=he.css(e,"left"),c=("absolute"===u||"fixed"===u)&&(r+l).indexOf("auto")>-1,c?(i=d.position(),a=i.top,o=i.left):(a=parseFloat(r)||0,o=parseFloat(l)||0),he.isFunction(t)&&(t=t.call(e,n,he.extend({},s))),null!=t.top&&(f.top=t.top-s.top+a),null!=t.left&&(f.left=t.left-s.left+o),"using"in t?t.using.call(e,f):d.css(f)}},he.fn.extend({offset:function(e){if(arguments.length)return void 0===e?this:this.each(function(t){he.offset.setOffset(this,e,t)});var t,n,i,o,r=this[0];if(r)return r.getClientRects().length?(i=r.getBoundingClientRect(),t=r.ownerDocument,n=t.documentElement,o=t.defaultView,{top:i.top+o.pageYOffset-n.clientTop,left:i.left+o.pageXOffset-n.clientLeft}):{top:0,left:0}},position:function(){if(this[0]){var e,t,n=this[0],i={top:0,left:0};return"fixed"===he.css(n,"position")?t=n.getBoundingClientRect():(e=this.offsetParent(),t=this.offset(),o(e[0],"html")||(i=e.offset()),i={top:i.top+he.css(e[0],"borderTopWidth",!0),left:i.left+he.css(e[0],"borderLeftWidth",!0)}),{top:t.top-i.top-he.css(n,"marginTop",!0),left:t.left-i.left-he.css(n,"marginLeft",!0)}}},offsetParent:function(){return this.map(function(){for(var e=this.offsetParent;e&&"static"===he.css(e,"position");)e=e.offsetParent;return e||Ge})}}),he.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},function(e,t){var n="pageYOffset"===t;he.fn[e]=function(i){return Oe(this,function(e,i,o){var r;if(he.isWindow(e)?r=e:9===e.nodeType&&(r=e.defaultView),void 0===o)return r?r[t]:e[i];r?r.scrollTo(n?r.pageXOffset:o,n?o:r.pageYOffset):e[i]=o},e,i,arguments.length)}}),he.each(["top","left"],function(e,t){he.cssHooks[t]=N(pe.pixelPosition,function(e,n){if(n)return n=O(e,t),rt.test(n)?he(e).position()[t]+"px":n})}),he.each({Height:"height",Width:"width"},function(e,t){he.each({padding:"inner"+e,content:t,"":"outer"+e},function(n,i){he.fn[i]=function(o,r){var a=arguments.length&&(n||"boolean"!=typeof o),s=n||(!0===o||!0===r?"margin":"border");return Oe(this,function(t,n,o){var r;return he.isWindow(t)?0===i.indexOf("outer")?t["inner"+e]:t.document.documentElement["client"+e]:9===t.nodeType?(r=t.documentElement,Math.max(t.body["scroll"+e],r["scroll"+e],t.body["offset"+e],r["offset"+e],r["client"+e])):void 0===o?he.css(t,n,s):he.style(t,n,o,s)},t,a?o:void 0,a)}})}),he.fn.extend({bind:function(e,t,n){return this.on(e,null,t,n)},unbind:function(e,t){return this.off(e,null,t)},delegate:function(e,t,n,i){return this.on(t,e,n,i)},undelegate:function(e,t,n){return 1===arguments.length?this.off(e,"**"):this.off(t,e||"**",n)}}),he.holdReady=function(e){e?he.readyWait++:he.ready(!0)},he.isArray=Array.isArray,he.parseJSON=JSON.parse,he.nodeName=o,"function"==typeof define&&define.amd&&define("jquery",[],function(){return he});var zt=e.jQuery,Xt=e.$;return he.noConflict=function(t){return e.$===he&&(e.$=Xt),t&&e.jQuery===he&&(e.jQuery=zt),he},t||(e.jQuery=e.$=he),he}),function(e){var t={mode:"horizontal",slideSelector:"",infiniteLoop:!0,hideControlOnEnd:!1,speed:500,easing:null,slideMargin:0,startSlide:0,randomStart:!1,captions:!1,ticker:!1,tickerHover:!1,adaptiveHeight:!1,adaptiveHeightSpeed:500,video:!1,useCSS:!0,preloadImages:"visible",responsive:!0,slideZIndex:50,wrapperClass:"bx-wrapper",touchEnabled:!0,swipeThreshold:50,oneToOneTouch:!0,preventDefaultSwipeX:!0,preventDefaultSwipeY:!1,ariaLive:!0,ariaHidden:!0,keyboardEnabled:!1,pager:!0,pagerType:"full",pagerShortSeparator:" / ",pagerSelector:null,buildPager:null,pagerCustom:null,controls:!0,nextText:"Next",prevText:"Prev",nextSelector:null,prevSelector:null,autoControls:!1,startText:"Start",stopText:"Stop",autoControlsCombine:!1,autoControlsSelector:null,auto:!1,pause:4e3,autoStart:!0,autoDirection:"next",stopAutoOnClick:!1,autoHover:!1,autoDelay:0,autoSlideForOnePage:!1,minSlides:1,maxSlides:1,moveSlides:0,slideWidth:0,shrinkItems:!1,onSliderLoad:function(){return!0},onSlideBefore:function(){return!0},onSlideAfter:function(){return!0},onSlideNext:function(){return!0},onSlidePrev:function(){return!0},onSliderResize:function(){return!0},onAutoChange:function(){return!0}};e.fn.bxSlider=function(n){if(0===this.length)return this;if(this.length>1)return this.each(function(){e(this).bxSlider(n)}),this;var o={},r=this,a=e(window).width(),s=e(window).height();if(!e(r).data("bxSlider")){var l=function(){e(r).data("bxSlider")||(o.settings=e.extend({},t,n),o.settings.slideWidth=parseInt(o.settings.slideWidth),o.children=r.children(o.settings.slideSelector),o.children.length<o.settings.minSlides&&(o.settings.minSlides=o.children.length),o.children.length<o.settings.maxSlides&&(o.settings.maxSlides=o.children.length),o.settings.randomStart&&(o.settings.startSlide=Math.floor(Math.random()*o.children.length)),o.active={index:o.settings.startSlide},o.carousel=o.settings.minSlides>1||o.settings.maxSlides>1,o.carousel&&(o.settings.preloadImages="all"),o.minThreshold=o.settings.minSlides*o.settings.slideWidth+(o.settings.minSlides-1)*o.settings.slideMargin,o.maxThreshold=o.settings.maxSlides*o.settings.slideWidth+(o.settings.maxSlides-1)*o.settings.slideMargin,o.working=!1,o.controls={},o.interval=null,o.animProp="vertical"===o.settings.mode?"top":"left",o.usingCSS=o.settings.useCSS&&"fade"!==o.settings.mode&&function(){for(var e=document.createElement("div"),t=["WebkitPerspective","MozPerspective","OPerspective","msPerspective"],n=0;n<t.length;n++)if(void 0!==e.style[t[n]])return o.cssPrefix=t[n].replace("Perspective","").toLowerCase(),o.animProp="-"+o.cssPrefix+"-transform",!0;return!1}(),"vertical"===o.settings.mode&&(o.settings.maxSlides=o.settings.minSlides),r.data("origStyle",r.attr("style")),r.children(o.settings.slideSelector).each(function(){e(this).data("origStyle",e(this).attr("style"))}),c())},c=function(){var t=o.children.eq(o.settings.startSlide);r.wrap('<div class="'+o.settings.wrapperClass+'"><div class="bx-viewport"></div></div>'),o.viewport=r.parent(),o.settings.ariaLive&&!o.settings.ticker&&o.viewport.attr("aria-live","polite"),o.loader=e('<div class="bx-loading" />'),o.viewport.prepend(o.loader),r.css({width:"horizontal"===o.settings.mode?1e3*o.children.length+215+"%":"auto",position:"relative"}),o.usingCSS&&o.settings.easing?r.css("-"+o.cssPrefix+"-transition-timing-function",o.settings.easing):o.settings.easing||(o.settings.easing="swing"),o.viewport.css({width:"100%",overflow:"hidden",position:"relative"}),o.viewport.parent().css({maxWidth:p()}),o.children.css({float:"horizontal"===o.settings.mode?"left":"none",listStyle:"none",position:"relative"}),o.children.css("width",h()),"horizontal"===o.settings.mode&&o.settings.slideMargin>0&&o.children.css("marginRight",o.settings.slideMargin),"vertical"===o.settings.mode&&o.settings.slideMargin>0&&o.children.css("marginBottom",o.settings.slideMargin),"fade"===o.settings.mode&&(o.children.css({position:"absolute",zIndex:0,display:"none"}),o.children.eq(o.settings.startSlide).css({zIndex:o.settings.slideZIndex,display:"block"})),o.controls.el=e('<div class="bx-controls" />'),o.settings.captions&&T(),o.active.last=o.settings.startSlide===m()-1,o.settings.video&&r.fitVids(),("all"===o.settings.preloadImages||o.settings.ticker)&&(t=o.children),o.settings.ticker?o.settings.pager=!1:(o.settings.controls&&C(),o.settings.auto&&o.settings.autoControls&&S(),o.settings.pager&&w(),(o.settings.controls||o.settings.autoControls||o.settings.pager)&&o.viewport.after(o.controls.el)),u(t,d)},u=function(t,n){var i=t.find('img:not([src=""]), iframe').length,o=0;if(0===i)return void n();t.find('img:not([src=""]), iframe').each(function(){e(this).one("load error",function(){++o===i&&n()}).each(function(){(this.complete||""==this.src)&&e(this).trigger("load")})})},d=function(){if(o.settings.infiniteLoop&&"fade"!==o.settings.mode&&!o.settings.ticker){var t="vertical"===o.settings.mode?o.settings.minSlides:o.settings.maxSlides,n=o.children.slice(0,t).clone(!0).addClass("bx-clone"),i=o.children.slice(-t).clone(!0).addClass("bx-clone");o.settings.ariaHidden&&(n.attr("aria-hidden",!0),i.attr("aria-hidden",!0)),r.append(n).prepend(i)}o.loader.remove(),b(),"vertical"===o.settings.mode&&(o.settings.adaptiveHeight=!0),o.viewport.height(f()),r.redrawSlider(),o.settings.onSliderLoad.call(r,o.active.index),o.initialized=!0,o.settings.responsive&&e(window).bind("resize",X),o.settings.auto&&o.settings.autoStart&&(m()>1||o.settings.autoSlideForOnePage)&&j(),o.settings.ticker&&F(),o.settings.pager&&A(o.settings.startSlide),o.settings.controls&&N(),o.settings.touchEnabled&&!o.settings.ticker&&Y(),o.settings.keyboardEnabled&&!o.settings.ticker&&e(document).keydown(q)},f=function(){var t=0,n=e();if("vertical"===o.settings.mode||o.settings.adaptiveHeight)if(o.carousel){var r=1===o.settings.moveSlides?o.active.index:o.active.index*v();for(n=o.children.eq(r),i=1;i<=o.settings.maxSlides-1;i++)n=r+i>=o.children.length?n.add(o.children.eq(i-1)):n.add(o.children.eq(r+i))}else n=o.children.eq(o.active.index);else n=o.children;return"vertical"===o.settings.mode?(n.each(function(n){t+=e(this).outerHeight()}),o.settings.slideMargin>0&&(t+=o.settings.slideMargin*(o.settings.minSlides-1))):t=Math.max.apply(Math,n.map(function(){return e(this).outerHeight(!1)}).get()),"border-box"===o.viewport.css("box-sizing")?t+=parseFloat(o.viewport.css("padding-top"))+parseFloat(o.viewport.css("padding-bottom"))+parseFloat(o.viewport.css("border-top-width"))+parseFloat(o.viewport.css("border-bottom-width")):"padding-box"===o.viewport.css("box-sizing")&&(t+=parseFloat(o.viewport.css("padding-top"))+parseFloat(o.viewport.css("padding-bottom"))),t},p=function(){var e="100%";return o.settings.slideWidth>0&&(e="horizontal"===o.settings.mode?o.settings.maxSlides*o.settings.slideWidth+(o.settings.maxSlides-1)*o.settings.slideMargin:o.settings.slideWidth),e},h=function(){var e=o.settings.slideWidth,t=o.viewport.width();if(0===o.settings.slideWidth||o.settings.slideWidth>t&&!o.carousel||"vertical"===o.settings.mode)e=t;else if(o.settings.maxSlides>1&&"horizontal"===o.settings.mode){if(t>o.maxThreshold)return e;t<o.minThreshold?e=(t-o.settings.slideMargin*(o.settings.minSlides-1))/o.settings.minSlides:o.settings.shrinkItems&&(e=Math.floor((t+o.settings.slideMargin)/Math.ceil((t+o.settings.slideMargin)/(e+o.settings.slideMargin))-o.settings.slideMargin))}return e},g=function(){var e=1,t=null;return"horizontal"===o.settings.mode&&o.settings.slideWidth>0?o.viewport.width()<o.minThreshold?e=o.settings.minSlides:o.viewport.width()>o.maxThreshold?e=o.settings.maxSlides:(t=o.children.first().width()+o.settings.slideMargin,e=Math.floor((o.viewport.width()+o.settings.slideMargin)/t)||1):"vertical"===o.settings.mode&&(e=o.settings.minSlides),e},m=function(){var e=0,t=0,n=0;if(o.settings.moveSlides>0){if(!o.settings.infiniteLoop){for(;t<o.children.length;)++e,t=n+g(),n+=o.settings.moveSlides<=g()?o.settings.moveSlides:g();return n}e=Math.ceil(o.children.length/v())}else e=Math.ceil(o.children.length/g());return e},v=function(){return o.settings.moveSlides>0&&o.settings.moveSlides<=g()?o.settings.moveSlides:g()},b=function(){var e,t,n;o.children.length>o.settings.maxSlides&&o.active.last&&!o.settings.infiniteLoop?"horizontal"===o.settings.mode?(t=o.children.last(),e=t.position(),y(-(e.left-(o.viewport.width()-t.outerWidth())),"reset",0)):"vertical"===o.settings.mode&&(n=o.children.length-o.settings.minSlides,e=o.children.eq(n).position(),y(-e.top,"reset",0)):(e=o.children.eq(o.active.index*v()).position(),o.active.index===m()-1&&(o.active.last=!0),void 0!==e&&("horizontal"===o.settings.mode?y(-e.left,"reset",0):"vertical"===o.settings.mode&&y(-e.top,"reset",0)))},y=function(t,n,i,a){var s,l;o.usingCSS?(l="vertical"===o.settings.mode?"translate3d(0, "+t+"px, 0)":"translate3d("+t+"px, 0, 0)",r.css("-"+o.cssPrefix+"-transition-duration",i/1e3+"s"),"slide"===n?(r.css(o.animProp,l),0!==i?r.bind("transitionend webkitTransitionEnd oTransitionEnd MSTransitionEnd",function(t){
e(t.target).is(r)&&(r.unbind("transitionend webkitTransitionEnd oTransitionEnd MSTransitionEnd"),L())}):L()):"reset"===n?r.css(o.animProp,l):"ticker"===n&&(r.css("-"+o.cssPrefix+"-transition-timing-function","linear"),r.css(o.animProp,l),0!==i?r.bind("transitionend webkitTransitionEnd oTransitionEnd MSTransitionEnd",function(t){e(t.target).is(r)&&(r.unbind("transitionend webkitTransitionEnd oTransitionEnd MSTransitionEnd"),y(a.resetValue,"reset",0),H())}):(y(a.resetValue,"reset",0),H()))):(s={},s[o.animProp]=t,"slide"===n?r.animate(s,i,o.settings.easing,function(){L()}):"reset"===n?r.css(o.animProp,t):"ticker"===n&&r.animate(s,i,"linear",function(){y(a.resetValue,"reset",0),H()}))},x=function(){for(var t="",n="",i=m(),r=0;r<i;r++)n="",o.settings.buildPager&&e.isFunction(o.settings.buildPager)||o.settings.pagerCustom?(n=o.settings.buildPager(r),o.pagerEl.addClass("bx-custom-pager")):(n=r+1,o.pagerEl.addClass("bx-default-pager")),t+='<div class="bx-pager-item"><a href="" data-slide-index="'+r+'" class="bx-pager-link">'+n+"</a></div>";o.pagerEl.html(t)},w=function(){o.settings.pagerCustom?o.pagerEl=e(o.settings.pagerCustom):(o.pagerEl=e('<div class="bx-pager" />'),o.settings.pagerSelector?e(o.settings.pagerSelector).html(o.pagerEl):o.controls.el.addClass("bx-has-pager").append(o.pagerEl),x()),o.pagerEl.on("click touchend","a",P)},C=function(){o.controls.next=e('<a class="bx-next" href="">'+o.settings.nextText+"</a>"),o.controls.prev=e('<a class="bx-prev" href="">'+o.settings.prevText+"</a>"),o.controls.next.bind("click touchend",k),o.controls.prev.bind("click touchend",E),o.settings.nextSelector&&e(o.settings.nextSelector).append(o.controls.next),o.settings.prevSelector&&e(o.settings.prevSelector).append(o.controls.prev),o.settings.nextSelector||o.settings.prevSelector||(o.controls.directionEl=e('<div class="bx-controls-direction" />'),o.controls.directionEl.append(o.controls.prev).append(o.controls.next),o.controls.el.addClass("bx-has-controls-direction").append(o.controls.directionEl))},S=function(){o.controls.start=e('<div class="bx-controls-auto-item"><a class="bx-start" href="">'+o.settings.startText+"</a></div>"),o.controls.stop=e('<div class="bx-controls-auto-item"><a class="bx-stop" href="">'+o.settings.stopText+"</a></div>"),o.controls.autoEl=e('<div class="bx-controls-auto" />'),o.controls.autoEl.on("click",".bx-start",D),o.controls.autoEl.on("click",".bx-stop",M),o.settings.autoControlsCombine?o.controls.autoEl.append(o.controls.start):o.controls.autoEl.append(o.controls.start).append(o.controls.stop),o.settings.autoControlsSelector?e(o.settings.autoControlsSelector).html(o.controls.autoEl):o.controls.el.addClass("bx-has-controls-auto").append(o.controls.autoEl),O(o.settings.autoStart?"stop":"start")},T=function(){o.children.each(function(t){var n=e(this).find("img:first").attr("title");void 0!==n&&(""+n).length&&e(this).append('<div class="bx-caption"><span>'+n+"</span></div>")})},k=function(e){e.preventDefault(),o.controls.el.hasClass("disabled")||(o.settings.auto&&o.settings.stopAutoOnClick&&r.stopAuto(),r.goToNextSlide())},E=function(e){e.preventDefault(),o.controls.el.hasClass("disabled")||(o.settings.auto&&o.settings.stopAutoOnClick&&r.stopAuto(),r.goToPrevSlide())},D=function(e){r.startAuto(),e.preventDefault()},M=function(e){r.stopAuto(),e.preventDefault()},P=function(t){var n,i;t.preventDefault(),o.controls.el.hasClass("disabled")||(o.settings.auto&&o.settings.stopAutoOnClick&&r.stopAuto(),n=e(t.currentTarget),void 0!==n.attr("data-slide-index")&&(i=parseInt(n.attr("data-slide-index")))!==o.active.index&&r.goToSlide(i))},A=function(t){var n=o.children.length;if("short"===o.settings.pagerType)return o.settings.maxSlides>1&&(n=Math.ceil(o.children.length/o.settings.maxSlides)),void o.pagerEl.html(t+1+o.settings.pagerShortSeparator+n);o.pagerEl.find("a").removeClass("active"),o.pagerEl.each(function(n,i){e(i).find("a").eq(t).addClass("active")})},L=function(){if(o.settings.infiniteLoop){var e="";0===o.active.index?e=o.children.eq(0).position():o.active.index===m()-1&&o.carousel?e=o.children.eq((m()-1)*v()).position():o.active.index===o.children.length-1&&(e=o.children.eq(o.children.length-1).position()),e&&("horizontal"===o.settings.mode?y(-e.left,"reset",0):"vertical"===o.settings.mode&&y(-e.top,"reset",0))}o.working=!1,o.settings.onSlideAfter.call(r,o.children.eq(o.active.index),o.oldIndex,o.active.index)},O=function(e){o.settings.autoControlsCombine?o.controls.autoEl.html(o.controls[e]):(o.controls.autoEl.find("a").removeClass("active"),o.controls.autoEl.find("a:not(.bx-"+e+")").addClass("active"))},N=function(){1===m()?(o.controls.prev.addClass("disabled"),o.controls.next.addClass("disabled")):!o.settings.infiniteLoop&&o.settings.hideControlOnEnd&&(0===o.active.index?(o.controls.prev.addClass("disabled"),o.controls.next.removeClass("disabled")):o.active.index===m()-1?(o.controls.next.addClass("disabled"),o.controls.prev.removeClass("disabled")):(o.controls.prev.removeClass("disabled"),o.controls.next.removeClass("disabled")))},I=function(){r.startAuto()},$=function(){r.stopAuto()},j=function(){if(o.settings.autoDelay>0){setTimeout(r.startAuto,o.settings.autoDelay)}else r.startAuto(),e(window).focus(I).blur($);o.settings.autoHover&&r.hover(function(){o.interval&&(r.stopAuto(!0),o.autoPaused=!0)},function(){o.autoPaused&&(r.startAuto(!0),o.autoPaused=null)})},F=function(){var t,n,i,a,s,l,c,u,d=0;"next"===o.settings.autoDirection?r.append(o.children.clone().addClass("bx-clone")):(r.prepend(o.children.clone().addClass("bx-clone")),t=o.children.first().position(),d="horizontal"===o.settings.mode?-t.left:-t.top),y(d,"reset",0),o.settings.pager=!1,o.settings.controls=!1,o.settings.autoControls=!1,o.settings.tickerHover&&(o.usingCSS?(a="horizontal"===o.settings.mode?4:5,o.viewport.hover(function(){n=r.css("-"+o.cssPrefix+"-transform"),i=parseFloat(n.split(",")[a]),y(i,"reset",0)},function(){u=0,o.children.each(function(t){u+="horizontal"===o.settings.mode?e(this).outerWidth(!0):e(this).outerHeight(!0)}),s=o.settings.speed/u,l="horizontal"===o.settings.mode?"left":"top",c=s*(u-Math.abs(parseInt(i))),H(c)})):o.viewport.hover(function(){r.stop()},function(){u=0,o.children.each(function(t){u+="horizontal"===o.settings.mode?e(this).outerWidth(!0):e(this).outerHeight(!0)}),s=o.settings.speed/u,l="horizontal"===o.settings.mode?"left":"top",c=s*(u-Math.abs(parseInt(r.css(l)))),H(c)})),H()},H=function(e){var t,n,i,a=e||o.settings.speed,s={left:0,top:0},l={left:0,top:0};"next"===o.settings.autoDirection?s=r.find(".bx-clone").first().position():l=o.children.first().position(),t="horizontal"===o.settings.mode?-s.left:-s.top,n="horizontal"===o.settings.mode?-l.left:-l.top,i={resetValue:n},y(t,"ticker",a,i)},R=function(t){var n=e(window),i={top:n.scrollTop(),left:n.scrollLeft()},o=t.offset();return i.right=i.left+n.width(),i.bottom=i.top+n.height(),o.right=o.left+t.outerWidth(),o.bottom=o.top+t.outerHeight(),!(i.right<o.left||i.left>o.right||i.bottom<o.top||i.top>o.bottom)},q=function(e){var t=document.activeElement.tagName.toLowerCase();if(null==new RegExp(t,["i"]).exec("input|textarea")&&R(r)){if(39===e.keyCode)return k(e),!1;if(37===e.keyCode)return E(e),!1}},Y=function(){o.touch={start:{x:0,y:0},end:{x:0,y:0}},o.viewport.bind("touchstart MSPointerDown pointerdown",_),o.viewport.on("click",".bxslider a",function(e){o.viewport.hasClass("click-disabled")&&(e.preventDefault(),o.viewport.removeClass("click-disabled"))})},_=function(e){if(o.controls.el.addClass("disabled"),o.working)e.preventDefault(),o.controls.el.removeClass("disabled");else{o.touch.originalPos=r.position();var t=e.originalEvent,n=void 0!==t.changedTouches?t.changedTouches:[t];o.touch.start.x=n[0].pageX,o.touch.start.y=n[0].pageY,o.viewport.get(0).setPointerCapture&&(o.pointerId=t.pointerId,o.viewport.get(0).setPointerCapture(o.pointerId)),o.viewport.bind("touchmove MSPointerMove pointermove",B),o.viewport.bind("touchend MSPointerUp pointerup",z),o.viewport.bind("MSPointerCancel pointercancel",W)}},W=function(e){y(o.touch.originalPos.left,"reset",0),o.controls.el.removeClass("disabled"),o.viewport.unbind("MSPointerCancel pointercancel",W),o.viewport.unbind("touchmove MSPointerMove pointermove",B),o.viewport.unbind("touchend MSPointerUp pointerup",z),o.viewport.get(0).releasePointerCapture&&o.viewport.get(0).releasePointerCapture(o.pointerId)},B=function(e){var t=e.originalEvent,n=void 0!==t.changedTouches?t.changedTouches:[t],i=Math.abs(n[0].pageX-o.touch.start.x),r=Math.abs(n[0].pageY-o.touch.start.y),a=0,s=0;3*i>r&&o.settings.preventDefaultSwipeX?e.preventDefault():3*r>i&&o.settings.preventDefaultSwipeY&&e.preventDefault(),"fade"!==o.settings.mode&&o.settings.oneToOneTouch&&("horizontal"===o.settings.mode?(s=n[0].pageX-o.touch.start.x,a=o.touch.originalPos.left+s):(s=n[0].pageY-o.touch.start.y,a=o.touch.originalPos.top+s),y(a,"reset",0))},z=function(e){o.viewport.unbind("touchmove MSPointerMove pointermove",B),o.controls.el.removeClass("disabled");var t=e.originalEvent,n=void 0!==t.changedTouches?t.changedTouches:[t],i=0,a=0;o.touch.end.x=n[0].pageX,o.touch.end.y=n[0].pageY,"fade"===o.settings.mode?(a=Math.abs(o.touch.start.x-o.touch.end.x))>=o.settings.swipeThreshold&&(o.touch.start.x>o.touch.end.x?r.goToNextSlide():r.goToPrevSlide(),r.stopAuto()):("horizontal"===o.settings.mode?(a=o.touch.end.x-o.touch.start.x,i=o.touch.originalPos.left):(a=o.touch.end.y-o.touch.start.y,i=o.touch.originalPos.top),!o.settings.infiniteLoop&&(0===o.active.index&&a>0||o.active.last&&a<0)?y(i,"reset",200):Math.abs(a)>=o.settings.swipeThreshold?(a<0?r.goToNextSlide():r.goToPrevSlide(),r.stopAuto()):y(i,"reset",200)),o.viewport.unbind("touchend MSPointerUp pointerup",z),o.viewport.get(0).releasePointerCapture&&o.viewport.get(0).releasePointerCapture(o.pointerId)},X=function(t){if(o.initialized)if(o.working)window.setTimeout(X,10);else{var n=e(window).width(),i=e(window).height();a===n&&s===i||(a=n,s=i,r.redrawSlider(),o.settings.onSliderResize.call(r,o.active.index))}},U=function(e){var t=g();o.settings.ariaHidden&&!o.settings.ticker&&(o.children.attr("aria-hidden","true"),o.children.slice(e,e+t).attr("aria-hidden","false"))},V=function(e){return e<0?o.settings.infiniteLoop?m()-1:o.active.index:e>=m()?o.settings.infiniteLoop?0:o.active.index:e};return r.goToSlide=function(t,n){var i,a,s,l,c=!0,u=0,d={left:0,top:0},p=null;if(o.oldIndex=o.active.index,o.active.index=V(t),!o.working&&o.active.index!==o.oldIndex){if(o.working=!0,void 0!==(c=o.settings.onSlideBefore.call(r,o.children.eq(o.active.index),o.oldIndex,o.active.index))&&!c)return o.active.index=o.oldIndex,void(o.working=!1);"next"===n?o.settings.onSlideNext.call(r,o.children.eq(o.active.index),o.oldIndex,o.active.index)||(c=!1):"prev"===n&&(o.settings.onSlidePrev.call(r,o.children.eq(o.active.index),o.oldIndex,o.active.index)||(c=!1)),o.active.last=o.active.index>=m()-1,(o.settings.pager||o.settings.pagerCustom)&&A(o.active.index),o.settings.controls&&N(),"fade"===o.settings.mode?(o.settings.adaptiveHeight&&o.viewport.height()!==f()&&o.viewport.animate({height:f()},o.settings.adaptiveHeightSpeed),o.children.filter(":visible").fadeOut(o.settings.speed).css({zIndex:0}),o.children.eq(o.active.index).css("zIndex",o.settings.slideZIndex+1).fadeIn(o.settings.speed,function(){e(this).css("zIndex",o.settings.slideZIndex),L()})):(o.settings.adaptiveHeight&&o.viewport.height()!==f()&&o.viewport.animate({height:f()},o.settings.adaptiveHeightSpeed),!o.settings.infiniteLoop&&o.carousel&&o.active.last?"horizontal"===o.settings.mode?(p=o.children.eq(o.children.length-1),d=p.position(),u=o.viewport.width()-p.outerWidth()):(i=o.children.length-o.settings.minSlides,d=o.children.eq(i).position()):o.carousel&&o.active.last&&"prev"===n?(a=1===o.settings.moveSlides?o.settings.maxSlides-v():(m()-1)*v()-(o.children.length-o.settings.maxSlides),p=r.children(".bx-clone").eq(a),d=p.position()):"next"===n&&0===o.active.index?(d=r.find("> .bx-clone").eq(o.settings.maxSlides).position(),o.active.last=!1):t>=0&&(l=t*parseInt(v()),d=o.children.eq(l).position()),void 0!==d&&(s="horizontal"===o.settings.mode?-(d.left-u):-d.top,y(s,"slide",o.settings.speed)),o.working=!1),o.settings.ariaHidden&&U(o.active.index*v())}},r.goToNextSlide=function(){if((o.settings.infiniteLoop||!o.active.last)&&1!=o.working){var e=parseInt(o.active.index)+1;r.goToSlide(e,"next")}},r.goToPrevSlide=function(){if((o.settings.infiniteLoop||0!==o.active.index)&&1!=o.working){var e=parseInt(o.active.index)-1;r.goToSlide(e,"prev")}},r.startAuto=function(e){o.interval||(o.interval=setInterval(function(){"next"===o.settings.autoDirection?r.goToNextSlide():r.goToPrevSlide()},o.settings.pause),o.settings.onAutoChange.call(r,!0),o.settings.autoControls&&!0!==e&&O("stop"))},r.stopAuto=function(e){o.interval&&(clearInterval(o.interval),o.interval=null,o.settings.onAutoChange.call(r,!1),o.settings.autoControls&&!0!==e&&O("start"))},r.getCurrentSlide=function(){return o.active.index},r.getCurrentSlideElement=function(){return o.children.eq(o.active.index)},r.getSlideElement=function(e){return o.children.eq(e)},r.getSlideCount=function(){return o.children.length},r.isWorking=function(){return o.working},r.redrawSlider=function(){o.children.add(r.find(".bx-clone")).outerWidth(h()),o.viewport.css("height",f()),o.settings.ticker||b(),o.active.last&&(o.active.index=m()-1),o.active.index>=m()&&(o.active.last=!0),o.settings.pager&&!o.settings.pagerCustom&&(x(),A(o.active.index)),o.settings.ariaHidden&&U(o.active.index*v())},r.destroySlider=function(){o.initialized&&(o.initialized=!1,e(".bx-clone",this).remove(),o.children.each(function(){void 0!==e(this).data("origStyle")?e(this).attr("style",e(this).data("origStyle")):e(this).removeAttr("style")}),void 0!==e(this).data("origStyle")?this.attr("style",e(this).data("origStyle")):e(this).removeAttr("style"),e(this).unwrap().unwrap(),o.controls.el&&o.controls.el.remove(),o.controls.next&&o.controls.next.remove(),o.controls.prev&&o.controls.prev.remove(),o.pagerEl&&o.settings.controls&&!o.settings.pagerCustom&&o.pagerEl.remove(),e(".bx-caption",this).remove(),o.controls.autoEl&&o.controls.autoEl.remove(),clearInterval(o.interval),o.settings.responsive&&e(window).unbind("resize",X),o.settings.keyboardEnabled&&e(document).unbind("keydown",q),e(this).removeData("bxSlider"),e(window).off("blur",$).off("focus",I))},r.reloadSlider=function(t){void 0!==t&&(n=t),r.destroySlider(),l(),e(r).data("bxSlider",this)},l(),e(r).data("bxSlider",this),this}}}(jQuery),function(e,t,n,i){"use strict";function o(e){var t=e.currentTarget,i=e.data?e.data.options:{},o=i.selector?n(i.selector):e.data?e.data.items:[],r=n(t).attr("data-fancybox")||"",a=0,s=n.fancybox.getInstance();e.preventDefault(),e.stopPropagation(),s&&s.current.opts.$orig.is(t)||(r?(o=o.length?o.filter('[data-fancybox="'+r+'"]'):n('[data-fancybox="'+r+'"]'),(a=o.index(t))<0&&(a=0)):o=[t],n.fancybox.open(o,i,a))}if(n){if(n.fn.fancybox)return void n.error("fancyBox already initialized");var r={loop:!1,margin:[44,0],gutter:50,keyboard:!0,arrows:!0,infobar:!1,toolbar:!0,buttons:["slideShow","fullScreen","thumbs","close"],idleTime:4,smallBtn:"auto",protect:!1,modal:!1,image:{preload:"auto"},ajax:{settings:{data:{fancybox:!0}}},iframe:{tpl:'<iframe id="fancybox-frame{rnd}" name="fancybox-frame{rnd}" class="fancybox-iframe" frameborder="0" vspace="0" hspace="0" webkitAllowFullScreen mozallowfullscreen allowFullScreen allowtransparency="true" src=""></iframe>',preload:!0,css:{},attr:{scrolling:"auto"}},animationEffect:"zoom",animationDuration:366,zoomOpacity:"auto",transitionEffect:"fade",transitionDuration:366,slideClass:"",baseClass:"",baseTpl:'<div class="fancybox-container" role="dialog" tabindex="-1"><div class="fancybox-bg"></div><div class="fancybox-inner"><div class="fancybox-infobar"><button data-fancybox-prev title="{{PREV}}" class="fancybox-button fancybox-button--left"></button><div class="fancybox-infobar__body"><span data-fancybox-index></span>&nbsp;/&nbsp;<span data-fancybox-count></span></div><button data-fancybox-next title="{{NEXT}}" class="fancybox-button fancybox-button--right"></button></div><div class="fancybox-toolbar">{{BUTTONS}}</div><div class="fancybox-navigation"><button data-fancybox-prev title="{{PREV}}" class="fancybox-arrow fancybox-arrow--left" /><button data-fancybox-next title="{{NEXT}}" class="fancybox-arrow fancybox-arrow--right" /></div><div class="fancybox-stage"></div><div class="fancybox-caption-wrap"><div class="fancybox-caption"></div></div></div></div>',spinnerTpl:'<div class="fancybox-loading"></div>',errorTpl:'<div class="fancybox-error"><p>{{ERROR}}<p></div>',btnTpl:{slideShow:'<button data-fancybox-play class="fancybox-button fancybox-button--play" title="{{PLAY_START}}"></button>',fullScreen:'<button data-fancybox-fullscreen class="fancybox-button fancybox-button--fullscreen" title="{{FULL_SCREEN}}"></button>',thumbs:'<button data-fancybox-thumbs class="fancybox-button fancybox-button--thumbs" title="{{THUMBS}}"></button>',close:'<button data-fancybox-close class="fancybox-button fancybox-button--close" title="{{CLOSE}}"></button>',smallBtn:'<button data-fancybox-close class="fancybox-close-small" title="{{CLOSE}}"></button>'},parentEl:"body",autoFocus:!0,backFocus:!0,trapFocus:!0,fullScreen:{autoStart:!1},touch:{vertical:!0,momentum:!0},hash:null,media:{},slideShow:{autoStart:!1,speed:4e3},thumbs:{autoStart:!1,hideOnClose:!0},onInit:n.noop,beforeLoad:n.noop,afterLoad:n.noop,beforeShow:n.noop,afterShow:n.noop,beforeClose:n.noop,afterClose:n.noop,onActivate:n.noop,onDeactivate:n.noop,clickContent:function(e,t){return"image"===e.type&&"zoom"},clickSlide:"close",clickOutside:"close",dblclickContent:!1,dblclickSlide:!1,dblclickOutside:!1,mobile:{clickContent:function(e,t){return"image"===e.type&&"toggleControls"},clickSlide:function(e,t){return"image"===e.type?"toggleControls":"close"},dblclickContent:function(e,t){return"image"===e.type&&"zoom"},dblclickSlide:function(e,t){return"image"===e.type&&"zoom"}},lang:"en",i18n:{en:{CLOSE:"Close",NEXT:"Next",PREV:"Previous",ERROR:"The requested content cannot be loaded. <br/> Please try again later.",PLAY_START:"Start slideshow",PLAY_STOP:"Pause slideshow",FULL_SCREEN:"Full screen",THUMBS:"Thumbnails"},de:{CLOSE:"Schliessen",NEXT:"Weiter",PREV:"Zurück",ERROR:"Die angeforderten Daten konnten nicht geladen werden. <br/> Bitte versuchen Sie es später nochmal.",PLAY_START:"Diaschau starten",PLAY_STOP:"Diaschau beenden",FULL_SCREEN:"Vollbild",THUMBS:"Vorschaubilder"}}},a=n(e),s=n(t),l=0,c=function(e){return e&&e.hasOwnProperty&&e instanceof n},u=function(){return e.requestAnimationFrame||e.webkitRequestAnimationFrame||e.mozRequestAnimationFrame||e.oRequestAnimationFrame||function(t){return e.setTimeout(t,1e3/60)}}(),d=function(){var e,n=t.createElement("fakeelement"),i={transition:"transitionend",OTransition:"oTransitionEnd",MozTransition:"transitionend",WebkitTransition:"webkitTransitionEnd"};for(e in i)if(void 0!==n.style[e])return i[e]}(),f=function(e){return e&&e.length&&e[0].offsetHeight},p=function(e,i,o){var a=this;a.opts=n.extend(!0,{index:o},r,i||{}),i&&n.isArray(i.buttons)&&(a.opts.buttons=i.buttons),a.id=a.opts.id||++l,a.group=[],a.currIndex=parseInt(a.opts.index,10)||0,a.prevIndex=null,a.prevPos=null,a.currPos=0,a.firstRun=null,a.createGroup(e),a.group.length&&(a.$lastFocus=n(t.activeElement).blur(),a.slides={},a.init(e))};n.extend(p.prototype,{init:function(){var e,t,i,o=this,r=o.group[o.currIndex].opts;o.scrollTop=s.scrollTop(),o.scrollLeft=s.scrollLeft(),n.fancybox.getInstance()||n.fancybox.isMobile||"hidden"===n("body").css("overflow")||(e=n("body").width(),n("html").addClass("fancybox-enabled"),(e=n("body").width()-e)>1&&n("head").append('<style id="fancybox-style-noscroll" type="text/css">.compensate-for-scrollbar, .fancybox-enabled body { margin-right: '+e+"px; }</style>")),i="",n.each(r.buttons,function(e,t){i+=r.btnTpl[t]||""}),t=n(o.translate(o,r.baseTpl.replace("{{BUTTONS}}",i))).addClass("fancybox-is-hidden").attr("id","fancybox-container-"+o.id).addClass(r.baseClass).data("FancyBox",o).prependTo(r.parentEl),o.$refs={container:t},["bg","inner","infobar","toolbar","stage","caption"].forEach(function(e){o.$refs[e]=t.find(".fancybox-"+e)}),(!r.arrows||o.group.length<2)&&t.find(".fancybox-navigation").remove(),r.infobar||o.$refs.infobar.remove(),r.toolbar||o.$refs.toolbar.remove(),o.trigger("onInit"),o.activate(),o.jumpTo(o.currIndex)},translate:function(e,t){var n=e.opts.i18n[e.opts.lang];return t.replace(/\{\{(\w+)\}\}/g,function(e,t){var i=n[t];return void 0===i?e:i})},createGroup:function(e){var t=this,i=n.makeArray(e);n.each(i,function(e,i){var o,r,a,s,l={},c={},u=[];n.isPlainObject(i)?(l=i,c=i.opts||i):"object"===n.type(i)&&n(i).length?(o=n(i),u=o.data(),c="options"in u?u.options:{},c="object"===n.type(c)?c:{},l.src="src"in u?u.src:c.src||o.attr("href"),["width","height","thumb","type","filter"].forEach(function(e){e in u&&(c[e]=u[e])}),"srcset"in u&&(c.image={srcset:u.srcset}),c.$orig=o,l.type||l.src||(l.type="inline",l.src=i)):l={type:"html",src:i+""},l.opts=n.extend(!0,{},t.opts,c),n.fancybox.isMobile&&(l.opts=n.extend(!0,{},l.opts,l.opts.mobile)),r=l.type||l.opts.type,a=l.src||"",!r&&a&&(a.match(/(^data:image\/[a-z0-9+\/=]*,)|(\.(jp(e|g|eg)|gif|png|bmp|webp|svg|ico)((\?|#).*)?$)/i)?r="image":a.match(/\.(pdf)((\?|#).*)?$/i)?r="pdf":"#"===a.charAt(0)&&(r="inline")),l.type=r,l.index=t.group.length,l.opts.$orig&&!l.opts.$orig.length&&delete l.opts.$orig,!l.opts.$thumb&&l.opts.$orig&&(l.opts.$thumb=l.opts.$orig.find("img:first")),l.opts.$thumb&&!l.opts.$thumb.length&&delete l.opts.$thumb,"function"===n.type(l.opts.caption)?l.opts.caption=l.opts.caption.apply(i,[t,l]):"caption"in u&&(l.opts.caption=u.caption),l.opts.caption=void 0===l.opts.caption?"":l.opts.caption+"","ajax"===r&&(s=a.split(/\s+/,2),s.length>1&&(l.src=s.shift(),l.opts.filter=s.shift())),"auto"==l.opts.smallBtn&&(n.inArray(r,["html","inline","ajax"])>-1?(l.opts.toolbar=!1,l.opts.smallBtn=!0):l.opts.smallBtn=!1),"pdf"===r&&(l.type="iframe",l.opts.iframe.preload=!1),l.opts.modal&&(l.opts=n.extend(!0,l.opts,{infobar:0,toolbar:0,smallBtn:0,keyboard:0,slideShow:0,fullScreen:0,thumbs:0,touch:0,clickContent:!1,clickSlide:!1,clickOutside:!1,dblclickContent:!1,dblclickSlide:!1,dblclickOutside:!1})),t.group.push(l)})},addEvents:function(){var i=this;i.removeEvents(),i.$refs.container.on("click.fb-close","[data-fancybox-close]",function(e){e.stopPropagation(),e.preventDefault(),i.close(e)}).on("click.fb-prev touchend.fb-prev","[data-fancybox-prev]",function(e){e.stopPropagation(),e.preventDefault(),i.previous()}).on("click.fb-next touchend.fb-next","[data-fancybox-next]",function(e){e.stopPropagation(),e.preventDefault(),i.next()}),a.on("orientationchange.fb resize.fb",function(e){e&&e.originalEvent&&"resize"===e.originalEvent.type?u(function(){i.update()}):(i.$refs.stage.hide(),setTimeout(function(){i.$refs.stage.show(),i.update()},500))}),s.on("focusin.fb",function(e){var o=n.fancybox?n.fancybox.getInstance():null;o.isClosing||!o.current||!o.current.opts.trapFocus||n(e.target).hasClass("fancybox-container")||n(e.target).is(t)||o&&"fixed"!==n(e.target).css("position")&&!o.$refs.container.has(e.target).length&&(e.stopPropagation(),o.focus(),a.scrollTop(i.scrollTop).scrollLeft(i.scrollLeft))}),s.on("keydown.fb",function(e){var t=i.current,o=e.keyCode||e.which;if(t&&t.opts.keyboard&&!n(e.target).is("input")&&!n(e.target).is("textarea"))return 8===o||27===o?(e.preventDefault(),void i.close(e)):37===o||38===o?(e.preventDefault(),void i.previous()):39===o||40===o?(e.preventDefault(),void i.next()):void i.trigger("afterKeydown",e,o)}),i.group[i.currIndex].opts.idleTime&&(i.idleSecondsCounter=0,s.on("mousemove.fb-idle mouseenter.fb-idle mouseleave.fb-idle mousedown.fb-idle touchstart.fb-idle touchmove.fb-idle scroll.fb-idle keydown.fb-idle",function(){i.idleSecondsCounter=0,i.isIdle&&i.showControls(),i.isIdle=!1}),i.idleInterval=e.setInterval(function(){++i.idleSecondsCounter>=i.group[i.currIndex].opts.idleTime&&(i.isIdle=!0,i.idleSecondsCounter=0,i.hideControls())},1e3))},removeEvents:function(){var t=this;a.off("orientationchange.fb resize.fb"),s.off("focusin.fb keydown.fb .fb-idle"),this.$refs.container.off(".fb-close .fb-prev .fb-next"),t.idleInterval&&(e.clearInterval(t.idleInterval),t.idleInterval=null)},previous:function(e){return this.jumpTo(this.currPos-1,e)},next:function(e){return this.jumpTo(this.currPos+1,e)},jumpTo:function(e,t,i){var o,r,a,s,l,c,u,d=this,p=d.group.length;if(!(d.isSliding||d.isClosing||d.isAnimating&&d.firstRun)){if(e=parseInt(e,10),!(r=d.current?d.current.opts.loop:d.opts.loop)&&(e<0||e>=p))return!1;if(o=d.firstRun=null===d.firstRun,!(p<2&&!o&&d.isSliding)){if(s=d.current,d.prevIndex=d.currIndex,d.prevPos=d.currPos,a=d.createSlide(e),p>1&&((r||a.index>0)&&d.createSlide(e-1),(r||a.index<p-1)&&d.createSlide(e+1)),d.current=a,d.currIndex=a.index,d.currPos=a.pos,d.trigger("beforeShow",o),d.updateControls(),c=n.fancybox.getTranslate(a.$slide),a.isMoved=(0!==c.left||0!==c.top)&&!a.$slide.hasClass("fancybox-animated"),a.forcedDuration=void 0,n.isNumeric(t)?a.forcedDuration=t:t=a.opts[o?"animationDuration":"transitionDuration"],t=parseInt(t,10),o)return a.opts.animationEffect&&t&&d.$refs.container.css("transition-duration",t+"ms"),d.$refs.container.removeClass("fancybox-is-hidden"),f(d.$refs.container),d.$refs.container.addClass("fancybox-is-open"),a.$slide.addClass("fancybox-slide--current"),d.loadSlide(a),void d.preload();n.each(d.slides,function(e,t){n.fancybox.stop(t.$slide)}),a.$slide.removeClass("fancybox-slide--next fancybox-slide--previous").addClass("fancybox-slide--current"),a.isMoved?(l=Math.round(a.$slide.width()),n.each(d.slides,function(e,i){var o=i.pos-a.pos;n.fancybox.animate(i.$slide,{top:0,left:o*l+o*i.opts.gutter},t,function(){i.$slide.removeAttr("style").removeClass("fancybox-slide--next fancybox-slide--previous"),i.pos===d.currPos&&(a.isMoved=!1,d.complete())})})):d.$refs.stage.children().removeAttr("style"),a.isLoaded?d.revealContent(a):d.loadSlide(a),d.preload(),s.pos!==a.pos&&(u="fancybox-slide--"+(s.pos>a.pos?"next":"previous"),s.$slide.removeClass("fancybox-slide--complete fancybox-slide--current fancybox-slide--next fancybox-slide--previous"),s.isComplete=!1,t&&(a.isMoved||a.opts.transitionEffect)&&(a.isMoved?s.$slide.addClass(u):(u="fancybox-animated "+u+" fancybox-fx-"+a.opts.transitionEffect,n.fancybox.animate(s.$slide,u,t,function(){s.$slide.removeClass(u).removeAttr("style")}))))}}},createSlide:function(e){var t,i,o=this;return i=e%o.group.length,i=i<0?o.group.length+i:i,!o.slides[e]&&o.group[i]&&(t=n('<div class="fancybox-slide"></div>').appendTo(o.$refs.stage),o.slides[e]=n.extend(!0,{},o.group[i],{pos:e,$slide:t,isLoaded:!1}),o.updateSlide(o.slides[e])),o.slides[e]},scaleToActual:function(e,t,i){var o,r,a,s,l,c=this,u=c.current,d=u.$content,f=parseInt(u.$slide.width(),10),p=parseInt(u.$slide.height(),10),h=u.width,g=u.height;"image"!=u.type||u.hasError||!d||c.isAnimating||(n.fancybox.stop(d),c.isAnimating=!0,e=void 0===e?.5*f:e,t=void 0===t?.5*p:t,o=n.fancybox.getTranslate(d),s=h/o.width,l=g/o.height,r=.5*f-.5*h,a=.5*p-.5*g,h>f&&(r=o.left*s-(e*s-e),r>0&&(r=0),r<f-h&&(r=f-h)),g>p&&(a=o.top*l-(t*l-t),a>0&&(a=0),a<p-g&&(a=p-g)),c.updateCursor(h,g),n.fancybox.animate(d,{top:a,left:r,scaleX:s,scaleY:l},i||330,function(){c.isAnimating=!1}),c.SlideShow&&c.SlideShow.isActive&&c.SlideShow.stop())},scaleToFit:function(e){var t,i=this,o=i.current,r=o.$content;"image"!=o.type||o.hasError||!r||i.isAnimating||(n.fancybox.stop(r),i.isAnimating=!0,t=i.getFitPos(o),i.updateCursor(t.width,t.height),n.fancybox.animate(r,{top:t.top,left:t.left,scaleX:t.width/r.width(),scaleY:t.height/r.height()},e||330,function(){i.isAnimating=!1}))},getFitPos:function(e){var t,i,o,r,s,l=this,c=e.$content,u=e.width,d=e.height,f=e.opts.margin;return!(!c||!c.length||!u&&!d)&&("number"===n.type(f)&&(f=[f,f]),2==f.length&&(f=[f[0],f[1],f[0],f[1]]),a.width()<800&&(f=[0,0,0,0]),t=parseInt(l.$refs.stage.width(),10)-(f[1]+f[3]),i=parseInt(l.$refs.stage.height(),10)-(f[0]+f[2]),o=Math.min(1,t/u,i/d),r=Math.floor(o*u),s=Math.floor(o*d),{top:Math.floor(.5*(i-s))+f[0],left:Math.floor(.5*(t-r))+f[3],width:r,height:s})},update:function(){var e=this;n.each(e.slides,function(t,n){e.updateSlide(n)})},updateSlide:function(e){var t=this,i=e.$content;i&&(e.width||e.height)&&(n.fancybox.stop(i),n.fancybox.setTranslate(i,t.getFitPos(e)),e.pos===t.currPos&&t.updateCursor()),e.$slide.trigger("refresh"),t.trigger("onUpdate",e)},updateCursor:function(e,t){var n,i=this,o=i.$refs.container.removeClass("fancybox-is-zoomable fancybox-can-zoomIn fancybox-can-drag fancybox-can-zoomOut");i.current&&!i.isClosing&&(i.isZoomable()?(o.addClass("fancybox-is-zoomable"),n=void 0!==e&&void 0!==t?e<i.current.width&&t<i.current.height:i.isScaledDown(),n?o.addClass("fancybox-can-zoomIn"):i.current.opts.touch?o.addClass("fancybox-can-drag"):o.addClass("fancybox-can-zoomOut")):i.current.opts.touch&&o.addClass("fancybox-can-drag"))},isZoomable:function(){var e,t=this,i=t.current;if(i&&!t.isClosing)return!!("image"===i.type&&i.isLoaded&&!i.hasError&&("zoom"===i.opts.clickContent||n.isFunction(i.opts.clickContent)&&"zoom"===i.opts.clickContent(i))&&(e=t.getFitPos(i),i.width>e.width||i.height>e.height))},isScaledDown:function(){var e=this,t=e.current,i=t.$content,o=!1;return i&&(o=n.fancybox.getTranslate(i),o=o.width<t.width||o.height<t.height),o},canPan:function(){var e=this,t=e.current,n=t.$content,i=!1;return n&&(i=e.getFitPos(t),i=Math.abs(n.width()-i.width)>1||Math.abs(n.height()-i.height)>1),i},loadSlide:function(e){var t,i,o,r=this;if(!e.isLoading&&!e.isLoaded){switch(e.isLoading=!0,r.trigger("beforeLoad",e),t=e.type,i=e.$slide,i.off("refresh").trigger("onReset").addClass("fancybox-slide--"+(t||"unknown")).addClass(e.opts.slideClass),t){case"image":r.setImage(e);break;case"iframe":r.setIframe(e);break;case"html":r.setContent(e,e.src||e.content);break;case"inline":n(e.src).length?r.setContent(e,n(e.src)):r.setError(e);break;case"ajax":r.showLoading(e),o=n.ajax(n.extend({},e.opts.ajax.settings,{url:e.src,success:function(t,n){"success"===n&&r.setContent(e,t)},error:function(t,n){t&&"abort"!==n&&r.setError(e)}})),i.one("onReset",function(){o.abort()});break;default:r.setError(e)}return!0}},setImage:function(t){var i,o,r,a,s=this,l=t.opts.image.srcset;if(l){r=e.devicePixelRatio||1,a=e.innerWidth*r,o=l.split(",").map(function(e){var t={};return e.trim().split(/\s+/).forEach(function(e,n){var i=parseInt(e.substring(0,e.length-1),10);if(0===n)return t.url=e;i&&(t.value=i,t.postfix=e[e.length-1])}),t}),o.sort(function(e,t){return e.value-t.value});for(var c=0;c<o.length;c++){var u=o[c];if("w"===u.postfix&&u.value>=a||"x"===u.postfix&&u.value>=r){i=u;break}}!i&&o.length&&(i=o[o.length-1]),i&&(t.src=i.url,t.width&&t.height&&"w"==i.postfix&&(t.height=t.width/t.height*i.value,t.width=i.value))}t.$content=n('<div class="fancybox-image-wrap"></div>').addClass("fancybox-is-hidden").appendTo(t.$slide),!1!==t.opts.preload&&t.opts.width&&t.opts.height&&(t.opts.thumb||t.opts.$thumb)?(t.width=t.opts.width,t.height=t.opts.height,t.$ghost=n("<img />").one("error",function(){n(this).remove(),t.$ghost=null,s.setBigImage(t)}).one("load",function(){s.afterLoad(t),s.setBigImage(t)}).addClass("fancybox-image").appendTo(t.$content).attr("src",t.opts.thumb||t.opts.$thumb.attr("src"))):s.setBigImage(t)},setBigImage:function(e){var t=this,i=n("<img />");e.$image=i.one("error",function(){t.setError(e)}).one("load",function(){clearTimeout(e.timouts),e.timouts=null,t.isClosing||(e.width=this.naturalWidth,e.height=this.naturalHeight,e.opts.image.srcset&&i.attr("sizes","100vw").attr("srcset",e.opts.image.srcset),t.hideLoading(e),e.$ghost?e.timouts=setTimeout(function(){e.timouts=null,e.$ghost.hide()},Math.min(300,Math.max(1e3,e.height/1600))):t.afterLoad(e))}).addClass("fancybox-image").attr("src",e.src).appendTo(e.$content),
i[0].complete?i.trigger("load"):i[0].error?i.trigger("error"):e.timouts=setTimeout(function(){i[0].complete||e.hasError||t.showLoading(e)},100)},setIframe:function(e){var t,i=this,o=e.opts.iframe,r=e.$slide;e.$content=n('<div class="fancybox-content'+(o.preload?" fancybox-is-hidden":"")+'"></div>').css(o.css).appendTo(r),t=n(o.tpl.replace(/\{rnd\}/g,(new Date).getTime())).attr(o.attr).appendTo(e.$content),o.preload?(i.showLoading(e),t.on("load.fb error.fb",function(t){this.isReady=1,e.$slide.trigger("refresh"),i.afterLoad(e)}),r.on("refresh.fb",function(){var n,i,r,a,s,l=e.$content;if(1===t[0].isReady){try{n=t.contents(),i=n.find("body")}catch(e){}i&&i.length&&(void 0===o.css.width||void 0===o.css.height)&&(r=t[0].contentWindow.document.documentElement.scrollWidth,a=Math.ceil(i.outerWidth(!0)+(l.width()-r)),s=Math.ceil(i.outerHeight(!0)),l.css({width:void 0===o.css.width?a+(l.outerWidth()-l.innerWidth()):o.css.width,height:void 0===o.css.height?s+(l.outerHeight()-l.innerHeight()):o.css.height})),l.removeClass("fancybox-is-hidden")}})):this.afterLoad(e),t.attr("src",e.src),!0===e.opts.smallBtn&&e.$content.prepend(i.translate(e,e.opts.btnTpl.smallBtn)),r.one("onReset",function(){try{n(this).find("iframe").hide().attr("src","//about:blank")}catch(e){}n(this).empty(),e.isLoaded=!1})},setContent:function(e,t){var i=this;i.isClosing||(i.hideLoading(e),e.$slide.empty(),c(t)&&t.parent().length?(t.parent(".fancybox-slide--inline").trigger("onReset"),e.$placeholder=n("<div></div>").hide().insertAfter(t),t.css("display","inline-block")):e.hasError||("string"===n.type(t)&&(t=n("<div>").append(n.trim(t)).contents(),3===t[0].nodeType&&(t=n("<div>").html(t))),e.opts.filter&&(t=n("<div>").html(t).find(e.opts.filter))),e.$slide.one("onReset",function(){e.$placeholder&&(e.$placeholder.after(t.hide()).remove(),e.$placeholder=null),e.$smallBtn&&(e.$smallBtn.remove(),e.$smallBtn=null),e.hasError||(n(this).empty(),e.isLoaded=!1)}),e.$content=n(t).appendTo(e.$slide),e.opts.smallBtn&&!e.$smallBtn&&(e.$smallBtn=n(i.translate(e,e.opts.btnTpl.smallBtn)).appendTo(e.$content.filter("div").first())),this.afterLoad(e))},setError:function(e){e.hasError=!0,e.$slide.removeClass("fancybox-slide--"+e.type),this.setContent(e,this.translate(e,e.opts.errorTpl))},showLoading:function(e){var t=this;(e=e||t.current)&&!e.$spinner&&(e.$spinner=n(t.opts.spinnerTpl).appendTo(e.$slide))},hideLoading:function(e){var t=this;(e=e||t.current)&&e.$spinner&&(e.$spinner.remove(),delete e.$spinner)},afterLoad:function(e){var t=this;t.isClosing||(e.isLoading=!1,e.isLoaded=!0,t.trigger("afterLoad",e),t.hideLoading(e),e.opts.protect&&e.$content&&!e.hasError&&(e.$content.on("contextmenu.fb",function(e){return 2==e.button&&e.preventDefault(),!0}),"image"===e.type&&n('<div class="fancybox-spaceball"></div>').appendTo(e.$content)),t.revealContent(e))},revealContent:function(e){var t,i,o,r,a,s=this,l=e.$slide,c=!1;return t=e.opts[s.firstRun?"animationEffect":"transitionEffect"],o=e.opts[s.firstRun?"animationDuration":"transitionDuration"],o=parseInt(void 0===e.forcedDuration?o:e.forcedDuration,10),!e.isMoved&&e.pos===s.currPos&&o||(t=!1),"zoom"!==t||e.pos===s.currPos&&o&&"image"===e.type&&!e.hasError&&(c=s.getThumbPos(e))||(t="fade"),"zoom"===t?(a=s.getFitPos(e),a.scaleX=a.width/c.width,a.scaleY=a.height/c.height,delete a.width,delete a.height,r=e.opts.zoomOpacity,"auto"==r&&(r=Math.abs(e.width/e.height-c.width/c.height)>.1),r&&(c.opacity=.1,a.opacity=1),n.fancybox.setTranslate(e.$content.removeClass("fancybox-is-hidden"),c),f(e.$content),void n.fancybox.animate(e.$content,a,o,function(){s.complete()})):(s.updateSlide(e),t?(n.fancybox.stop(l),i="fancybox-animated fancybox-slide--"+(e.pos>s.prevPos?"next":"previous")+" fancybox-fx-"+t,l.removeAttr("style").removeClass("fancybox-slide--current fancybox-slide--next fancybox-slide--previous").addClass(i),e.$content.removeClass("fancybox-is-hidden"),f(l),void n.fancybox.animate(l,"fancybox-slide--current",o,function(t){l.removeClass(i).removeAttr("style"),e.pos===s.currPos&&s.complete()},!0)):(f(l),e.$content.removeClass("fancybox-is-hidden"),void(e.pos===s.currPos&&s.complete())))},getThumbPos:function(i){var o,r=this,a=!1,s=i.opts.$thumb,l=s?s.offset():0;return l&&s[0].ownerDocument===t&&function(t){for(var i=t[0],o=i.getBoundingClientRect(),r=[];null!==i.parentElement;)"hidden"!==n(i.parentElement).css("overflow")&&"auto"!==n(i.parentElement).css("overflow")||r.push(i.parentElement.getBoundingClientRect()),i=i.parentElement;return r.every(function(e){var t=Math.min(o.right,e.right)-Math.max(o.left,e.left),n=Math.min(o.bottom,e.bottom)-Math.max(o.top,e.top);return t>0&&n>0})&&o.bottom>0&&o.right>0&&o.left<n(e).width()&&o.top<n(e).height()}(s)&&(o=r.$refs.stage.offset(),a={top:l.top-o.top+parseFloat(s.css("border-top-width")||0),left:l.left-o.left+parseFloat(s.css("border-left-width")||0),width:s.width(),height:s.height(),scaleX:1,scaleY:1}),a},complete:function(){var e=this,i=e.current,o={};i.isMoved||!i.isLoaded||i.isComplete||(i.isComplete=!0,i.$slide.siblings().trigger("onReset"),f(i.$slide),i.$slide.addClass("fancybox-slide--complete"),n.each(e.slides,function(t,i){i.pos>=e.currPos-1&&i.pos<=e.currPos+1?o[i.pos]=i:i&&(n.fancybox.stop(i.$slide),i.$slide.unbind().remove())}),e.slides=o,e.updateCursor(),e.trigger("afterShow"),(n(t.activeElement).is("[disabled]")||i.opts.autoFocus&&"image"!=i.type&&"iframe"!==i.type)&&e.focus())},preload:function(){var e,t,n=this;n.group.length<2||(e=n.slides[n.currPos+1],t=n.slides[n.currPos-1],e&&"image"===e.type&&n.loadSlide(e),t&&"image"===t.type&&n.loadSlide(t))},focus:function(){var e,t=this.current;this.isClosing||(e=t&&t.isComplete?t.$slide.find("button,:input,[tabindex],a").filter(":not([disabled]):visible:first"):null,e=e&&e.length?e:this.$refs.container,e.focus())},activate:function(){var e=this;n(".fancybox-container").each(function(){var t=n(this).data("FancyBox");t&&t.uid!==e.uid&&!t.isClosing&&t.trigger("onDeactivate")}),e.current&&(e.$refs.container.index()>0&&e.$refs.container.prependTo(t.body),e.updateControls()),e.trigger("onActivate"),e.addEvents()},close:function(e,t){var i,o,r,a,s,l,c=this,f=c.current,p=function(){c.cleanUp(e)};return!c.isClosing&&(c.isClosing=!0,!1===c.trigger("beforeClose",e)?(c.isClosing=!1,u(function(){c.update()}),!1):(c.removeEvents(),f.timouts&&clearTimeout(f.timouts),r=f.$content,i=f.opts.animationEffect,o=n.isNumeric(t)?t:i?f.opts.animationDuration:0,f.$slide.off(d).removeClass("fancybox-slide--complete fancybox-slide--next fancybox-slide--previous fancybox-animated"),f.$slide.siblings().trigger("onReset").remove(),o&&c.$refs.container.removeClass("fancybox-is-open").addClass("fancybox-is-closing"),c.hideLoading(f),c.hideControls(),c.updateCursor(),"zoom"!==i||!0!==e&&r&&o&&"image"===f.type&&!f.hasError&&(l=c.getThumbPos(f))||(i="fade"),"zoom"===i?(n.fancybox.stop(r),s=n.fancybox.getTranslate(r),s.width=s.width*s.scaleX,s.height=s.height*s.scaleY,a=f.opts.zoomOpacity,"auto"==a&&(a=Math.abs(f.width/f.height-l.width/l.height)>.1),a&&(l.opacity=0),s.scaleX=s.width/l.width,s.scaleY=s.height/l.height,s.width=l.width,s.height=l.height,n.fancybox.setTranslate(f.$content,s),n.fancybox.animate(f.$content,l,o,p),!0):(i&&o?!0===e?setTimeout(p,o):n.fancybox.animate(f.$slide.removeClass("fancybox-slide--current"),"fancybox-animated fancybox-slide--previous fancybox-fx-"+i,o,p):p(),!0)))},cleanUp:function(e){var t,i=this;i.current.$slide.trigger("onReset"),i.$refs.container.empty().remove(),i.trigger("afterClose",e),i.$lastFocus&&i.current.opts.backFocus&&i.$lastFocus.focus(),i.current=null,t=n.fancybox.getInstance(),t?t.activate():(a.scrollTop(i.scrollTop).scrollLeft(i.scrollLeft),n("html").removeClass("fancybox-enabled"),n("#fancybox-style-noscroll").remove())},trigger:function(e,t){var i,o=Array.prototype.slice.call(arguments,1),r=this,a=t&&t.opts?t:r.current;if(a?o.unshift(a):a=r,o.unshift(r),n.isFunction(a.opts[e])&&(i=a.opts[e].apply(a,o)),!1===i)return i;"afterClose"===e?s.trigger(e+".fb",o):r.$refs.container.trigger(e+".fb",o)},updateControls:function(e){var t=this,i=t.current,o=i.index,r=i.opts,a=r.caption,s=t.$refs.caption;i.$slide.trigger("refresh"),t.$caption=a&&a.length?s.html(a):null,t.isHiddenControls||t.showControls(),n("[data-fancybox-count]").html(t.group.length),n("[data-fancybox-index]").html(o+1),n("[data-fancybox-prev]").prop("disabled",!r.loop&&o<=0),n("[data-fancybox-next]").prop("disabled",!r.loop&&o>=t.group.length-1)},hideControls:function(){this.isHiddenControls=!0,this.$refs.container.removeClass("fancybox-show-infobar fancybox-show-toolbar fancybox-show-caption fancybox-show-nav")},showControls:function(){var e=this,t=e.current?e.current.opts:e.opts,n=e.$refs.container;e.isHiddenControls=!1,e.idleSecondsCounter=0,n.toggleClass("fancybox-show-toolbar",!(!t.toolbar||!t.buttons)).toggleClass("fancybox-show-infobar",!!(t.infobar&&e.group.length>1)).toggleClass("fancybox-show-nav",!!(t.arrows&&e.group.length>1)).toggleClass("fancybox-is-modal",!!t.modal),e.$caption?n.addClass("fancybox-show-caption "):n.removeClass("fancybox-show-caption")},toggleControls:function(){this.isHiddenControls?this.showControls():this.hideControls()}}),n.fancybox={version:"3.1.25",defaults:r,getInstance:function(e){var t=n('.fancybox-container:not(".fancybox-is-closing"):first').data("FancyBox"),i=Array.prototype.slice.call(arguments,1);return t instanceof p&&("string"===n.type(e)?t[e].apply(t,i):"function"===n.type(e)&&e.apply(t,i),t)},open:function(e,t,n){return new p(e,t,n)},close:function(e){var t=this.getInstance();t&&(t.close(),!0===e&&this.close())},destroy:function(){this.close(!0),s.off("click.fb-start")},isMobile:void 0!==t.createTouch&&/Android|webOS|iPhone|iPad|iPod|BlackBerry/i.test(navigator.userAgent),use3d:function(){var n=t.createElement("div");return e.getComputedStyle&&e.getComputedStyle(n).getPropertyValue("transform")&&!(t.documentMode&&t.documentMode<11)}(),getTranslate:function(e){var t;if(!e||!e.length)return!1;if(t=e.eq(0).css("transform"),t&&-1!==t.indexOf("matrix")?(t=t.split("(")[1],t=t.split(")")[0],t=t.split(",")):t=[],t.length)t=t.length>10?[t[13],t[12],t[0],t[5]]:[t[5],t[4],t[0],t[3]],t=t.map(parseFloat);else{t=[0,0,1,1];var n=/\.*translate\((.*)px,(.*)px\)/i,i=n.exec(e.eq(0).attr("style"));i&&(t[0]=parseFloat(i[2]),t[1]=parseFloat(i[1]))}return{top:t[0],left:t[1],scaleX:t[2],scaleY:t[3],opacity:parseFloat(e.css("opacity")),width:e.width(),height:e.height()}},setTranslate:function(e,t){var n="",i={};if(e&&t)return void 0===t.left&&void 0===t.top||(n=(void 0===t.left?e.position().left:t.left)+"px, "+(void 0===t.top?e.position().top:t.top)+"px",n=this.use3d?"translate3d("+n+", 0px)":"translate("+n+")"),void 0!==t.scaleX&&void 0!==t.scaleY&&(n=(n.length?n+" ":"")+"scale("+t.scaleX+", "+t.scaleY+")"),n.length&&(i.transform=n),void 0!==t.opacity&&(i.opacity=t.opacity),void 0!==t.width&&(i.width=t.width),void 0!==t.height&&(i.height=t.height),e.css(i)},animate:function(e,t,i,o,r){var a=d||"transitionend";n.isFunction(i)&&(o=i,i=null),n.isPlainObject(t)||e.removeAttr("style"),e.on(a,function(i){(!i||!i.originalEvent||e.is(i.originalEvent.target)&&"z-index"!=i.originalEvent.propertyName)&&(e.off(a),n.isPlainObject(t)?void 0!==t.scaleX&&void 0!==t.scaleY&&(e.css("transition-duration","0ms"),t.width=Math.round(e.width()*t.scaleX),t.height=Math.round(e.height()*t.scaleY),t.scaleX=1,t.scaleY=1,n.fancybox.setTranslate(e,t)):!0!==r&&e.removeClass(t),n.isFunction(o)&&o(i))}),n.isNumeric(i)&&e.css("transition-duration",i+"ms"),n.isPlainObject(t)?n.fancybox.setTranslate(e,t):e.addClass(t),e.data("timer",setTimeout(function(){e.trigger("transitionend")},i+16))},stop:function(e){clearTimeout(e.data("timer")),e.off(d)}},n.fn.fancybox=function(e){var t;return e=e||{},t=e.selector||!1,t?n("body").off("click.fb-start",t).on("click.fb-start",t,{options:e},o):this.off("click.fb-start").on("click.fb-start",{items:this,options:e},o),this},s.on("click.fb-start","[data-fancybox]",o)}}(window,document,window.jQuery||jQuery),function(e){"use strict";var t=function(t,n,i){if(t)return i=i||"","object"===e.type(i)&&(i=e.param(i,!0)),e.each(n,function(e,n){t=t.replace("$"+e,n||"")}),i.length&&(t+=(t.indexOf("?")>0?"&":"?")+i),t},n={youtube:{matcher:/(youtube\.com|youtu\.be|youtube\-nocookie\.com)\/(watch\?(.*&)?v=|v\/|u\/|embed\/?)?(videoseries\?list=(.*)|[\w-]{11}|\?listType=(.*)&list=(.*))(.*)/i,params:{autoplay:1,autohide:1,fs:1,rel:0,hd:1,wmode:"transparent",enablejsapi:1,html5:1},paramPlace:8,type:"iframe",url:"//www.youtube.com/embed/$4",thumb:"//img.youtube.com/vi/$4/hqdefault.jpg"},vimeo:{matcher:/^.+vimeo.com\/(.*\/)?([\d]+)(.*)?/,params:{autoplay:1,hd:1,show_title:1,show_byline:1,show_portrait:0,fullscreen:1,api:1},paramPlace:3,type:"iframe",url:"//player.vimeo.com/video/$2"},metacafe:{matcher:/metacafe.com\/watch\/(\d+)\/(.*)?/,type:"iframe",url:"//www.metacafe.com/embed/$1/?ap=1"},dailymotion:{matcher:/dailymotion.com\/video\/(.*)\/?(.*)/,params:{additionalInfos:0,autoStart:1},type:"iframe",url:"//www.dailymotion.com/embed/video/$1"},vine:{matcher:/vine.co\/v\/([a-zA-Z0-9\?\=\-]+)/,type:"iframe",url:"//vine.co/v/$1/embed/simple"},instagram:{matcher:/(instagr\.am|instagram\.com)\/p\/([a-zA-Z0-9_\-]+)\/?/i,type:"image",url:"//$1/p/$2/media/?size=l"},gmap_place:{matcher:/(maps\.)?google\.([a-z]{2,3}(\.[a-z]{2})?)\/(((maps\/(place\/(.*)\/)?\@(.*),(\d+.?\d+?)z))|(\?ll=))(.*)?/i,type:"iframe",url:function(e){return"//maps.google."+e[2]+"/?ll="+(e[9]?e[9]+"&z="+Math.floor(e[10])+(e[12]?e[12].replace(/^\//,"&"):""):e[12])+"&output="+(e[12]&&e[12].indexOf("layer=c")>0?"svembed":"embed")}},gmap_search:{matcher:/(maps\.)?google\.([a-z]{2,3}(\.[a-z]{2})?)\/(maps\/search\/)(.*)/i,type:"iframe",url:function(e){return"//maps.google."+e[2]+"/maps?q="+e[5].replace("query=","q=").replace("api=1","")+"&output=embed"}}};e(document).on("onInit.fb",function(i,o){e.each(o.group,function(i,o){var r,a,s,l,c,u,d,f=o.src||"",p=!1;o.type||(r=e.extend(!0,{},n,o.opts.media),e.each(r,function(n,i){if(s=f.match(i.matcher),u={},d=n,s){if(p=i.type,i.paramPlace&&s[i.paramPlace]){c=s[i.paramPlace],"?"==c[0]&&(c=c.substring(1)),c=c.split("&");for(var r=0;r<c.length;++r){var h=c[r].split("=",2);2==h.length&&(u[h[0]]=decodeURIComponent(h[1].replace(/\+/g," ")))}}return l=e.extend(!0,{},i.params,o.opts[n],u),f="function"===e.type(i.url)?i.url.call(this,s,l,o):t(i.url,s,l),a="function"===e.type(i.thumb)?i.thumb.call(this,s,l,o):t(i.thumb,s),"vimeo"===d&&(f=f.replace("&%23","#")),!1}}),p?(o.src=f,o.type=p,o.opts.thumb||o.opts.$thumb&&o.opts.$thumb.length||(o.opts.thumb=a),"iframe"===p&&(e.extend(!0,o.opts,{iframe:{preload:!1,attr:{scrolling:"no"}}}),o.contentProvider=d,o.opts.slideClass+=" fancybox-slide--"+("gmap_place"==d||"gmap_search"==d?"map":"video"))):o.type="image")})})}(window.jQuery),function(e,t,n){"use strict";var i=function(){return e.requestAnimationFrame||e.webkitRequestAnimationFrame||e.mozRequestAnimationFrame||e.oRequestAnimationFrame||function(t){return e.setTimeout(t,1e3/60)}}(),o=function(){return e.cancelAnimationFrame||e.webkitCancelAnimationFrame||e.mozCancelAnimationFrame||e.oCancelAnimationFrame||function(t){e.clearTimeout(t)}}(),r=function(t){var n=[];t=t.originalEvent||t||e.e,t=t.touches&&t.touches.length?t.touches:t.changedTouches&&t.changedTouches.length?t.changedTouches:[t];for(var i in t)t[i].pageX?n.push({x:t[i].pageX,y:t[i].pageY}):t[i].clientX&&n.push({x:t[i].clientX,y:t[i].clientY});return n},a=function(e,t,n){return t&&e?"x"===n?e.x-t.x:"y"===n?e.y-t.y:Math.sqrt(Math.pow(e.x-t.x,2)+Math.pow(e.y-t.y,2)):0},s=function(e){if(e.is("a,button,input,select,textarea")||n.isFunction(e.get(0).onclick)||e.data("selectable"))return!0;for(var t=0,i=e[0].attributes,o=i.length;t<o;t++)if("data-fancybox-"===i[t].nodeName.substr(0,14))return!0;return!1},l=function(t){var n=e.getComputedStyle(t)["overflow-y"],i=e.getComputedStyle(t)["overflow-x"],o=("scroll"===n||"auto"===n)&&t.scrollHeight>t.clientHeight,r=("scroll"===i||"auto"===i)&&t.scrollWidth>t.clientWidth;return o||r},c=function(e){for(var t=!1;;){if(t=l(e.get(0)))break;if(e=e.parent(),!e.length||e.hasClass("fancybox-stage")||e.is("body"))break}return t},u=function(e){var t=this;t.instance=e,t.$bg=e.$refs.bg,t.$stage=e.$refs.stage,t.$container=e.$refs.container,t.destroy(),t.$container.on("touchstart.fb.touch mousedown.fb.touch",n.proxy(t,"ontouchstart"))};u.prototype.destroy=function(){this.$container.off(".fb.touch")},u.prototype.ontouchstart=function(i){var o=this,l=n(i.target),u=o.instance,d=u.current,f=d.$content,p="touchstart"==i.type;if(p&&o.$container.off("mousedown.fb.touch"),!d||o.instance.isAnimating||o.instance.isClosing)return i.stopPropagation(),void i.preventDefault();if((!i.originalEvent||2!=i.originalEvent.button)&&l.length&&!s(l)&&!s(l.parent())&&!(i.originalEvent.clientX>l[0].clientWidth+l.offset().left)&&(o.startPoints=r(i),o.startPoints&&!(o.startPoints.length>1&&u.isSliding))){if(o.$target=l,o.$content=f,o.canTap=!0,n(t).off(".fb.touch"),n(t).on(p?"touchend.fb.touch touchcancel.fb.touch":"mouseup.fb.touch mouseleave.fb.touch",n.proxy(o,"ontouchend")),n(t).on(p?"touchmove.fb.touch":"mousemove.fb.touch",n.proxy(o,"ontouchmove")),!u.current.opts.touch&&!u.canPan()||!l.is(o.$stage)&&!o.$stage.find(l).length)return void(l.is("img")&&i.preventDefault());i.stopPropagation(),n.fancybox.isMobile&&(c(o.$target)||c(o.$target.parent()))||i.preventDefault(),o.canvasWidth=Math.round(d.$slide[0].clientWidth),o.canvasHeight=Math.round(d.$slide[0].clientHeight),o.startTime=(new Date).getTime(),o.distanceX=o.distanceY=o.distance=0,o.isPanning=!1,o.isSwiping=!1,o.isZooming=!1,o.sliderStartPos=o.sliderLastPos||{top:0,left:0},o.contentStartPos=n.fancybox.getTranslate(o.$content),o.contentLastPos=null,1!==o.startPoints.length||o.isZooming||(o.canTap=!u.isSliding,"image"===d.type&&(o.contentStartPos.width>o.canvasWidth+1||o.contentStartPos.height>o.canvasHeight+1)?(n.fancybox.stop(o.$content),o.$content.css("transition-duration","0ms"),o.isPanning=!0):o.isSwiping=!0,o.$container.addClass("fancybox-controls--isGrabbing")),2!==o.startPoints.length||u.isAnimating||d.hasError||"image"!==d.type||!d.isLoaded&&!d.$ghost||(o.isZooming=!0,o.isSwiping=!1,o.isPanning=!1,n.fancybox.stop(o.$content),o.$content.css("transition-duration","0ms"),o.centerPointStartX=.5*(o.startPoints[0].x+o.startPoints[1].x)-n(e).scrollLeft(),o.centerPointStartY=.5*(o.startPoints[0].y+o.startPoints[1].y)-n(e).scrollTop(),o.percentageOfImageAtPinchPointX=(o.centerPointStartX-o.contentStartPos.left)/o.contentStartPos.width,o.percentageOfImageAtPinchPointY=(o.centerPointStartY-o.contentStartPos.top)/o.contentStartPos.height,o.startDistanceBetweenFingers=a(o.startPoints[0],o.startPoints[1]))}},u.prototype.ontouchmove=function(e){var t=this;if(t.newPoints=r(e),n.fancybox.isMobile&&(c(t.$target)||c(t.$target.parent())))return e.stopPropagation(),void(t.canTap=!1);if((t.instance.current.opts.touch||t.instance.canPan())&&t.newPoints&&t.newPoints.length&&(t.distanceX=a(t.newPoints[0],t.startPoints[0],"x"),t.distanceY=a(t.newPoints[0],t.startPoints[0],"y"),t.distance=a(t.newPoints[0],t.startPoints[0]),t.distance>0)){if(!t.$target.is(t.$stage)&&!t.$stage.find(t.$target).length)return;e.stopPropagation(),e.preventDefault(),t.isSwiping?t.onSwipe():t.isPanning?t.onPan():t.isZooming&&t.onZoom()}},u.prototype.onSwipe=function(){var t,r=this,a=r.isSwiping,s=r.sliderStartPos.left||0;!0===a?Math.abs(r.distance)>10&&(r.canTap=!1,r.instance.group.length<2&&r.instance.opts.touch.vertical?r.isSwiping="y":r.instance.isSliding||!1===r.instance.opts.touch.vertical||"auto"===r.instance.opts.touch.vertical&&n(e).width()>800?r.isSwiping="x":(t=Math.abs(180*Math.atan2(r.distanceY,r.distanceX)/Math.PI),r.isSwiping=t>45&&t<135?"y":"x"),r.instance.isSliding=r.isSwiping,r.startPoints=r.newPoints,n.each(r.instance.slides,function(e,t){n.fancybox.stop(t.$slide),t.$slide.css("transition-duration","0ms"),t.inTransition=!1,t.pos===r.instance.current.pos&&(r.sliderStartPos.left=n.fancybox.getTranslate(t.$slide).left)}),r.instance.SlideShow&&r.instance.SlideShow.isActive&&r.instance.SlideShow.stop()):("x"==a&&(r.distanceX>0&&(r.instance.group.length<2||0===r.instance.current.index&&!r.instance.current.opts.loop)?s+=Math.pow(r.distanceX,.8):r.distanceX<0&&(r.instance.group.length<2||r.instance.current.index===r.instance.group.length-1&&!r.instance.current.opts.loop)?s-=Math.pow(-r.distanceX,.8):s+=r.distanceX),r.sliderLastPos={top:"x"==a?0:r.sliderStartPos.top+r.distanceY,left:s},r.requestId&&(o(r.requestId),r.requestId=null),r.requestId=i(function(){r.sliderLastPos&&(n.each(r.instance.slides,function(e,t){var i=t.pos-r.instance.currPos;n.fancybox.setTranslate(t.$slide,{top:r.sliderLastPos.top,left:r.sliderLastPos.left+i*r.canvasWidth+i*t.opts.gutter})}),r.$container.addClass("fancybox-is-sliding"))}))},u.prototype.onPan=function(){var e,t,r,a=this;a.canTap=!1,e=a.contentStartPos.width>a.canvasWidth?a.contentStartPos.left+a.distanceX:a.contentStartPos.left,t=a.contentStartPos.top+a.distanceY,r=a.limitMovement(e,t,a.contentStartPos.width,a.contentStartPos.height),r.scaleX=a.contentStartPos.scaleX,r.scaleY=a.contentStartPos.scaleY,a.contentLastPos=r,a.requestId&&(o(a.requestId),a.requestId=null),a.requestId=i(function(){n.fancybox.setTranslate(a.$content,a.contentLastPos)})},u.prototype.limitMovement=function(e,t,n,i){var o,r,a,s,l=this,c=l.canvasWidth,u=l.canvasHeight,d=l.contentStartPos.left,f=l.contentStartPos.top,p=l.distanceX,h=l.distanceY;return o=Math.max(0,.5*c-.5*n),r=Math.max(0,.5*u-.5*i),a=Math.min(c-n,.5*c-.5*n),s=Math.min(u-i,.5*u-.5*i),n>c&&(p>0&&e>o&&(e=o-1+Math.pow(-o+d+p,.8)||0),p<0&&e<a&&(e=a+1-Math.pow(a-d-p,.8)||0)),i>u&&(h>0&&t>r&&(t=r-1+Math.pow(-r+f+h,.8)||0),h<0&&t<s&&(t=s+1-Math.pow(s-f-h,.8)||0)),{top:t,left:e}},u.prototype.limitPosition=function(e,t,n,i){var o=this,r=o.canvasWidth,a=o.canvasHeight;return n>r?(e=e>0?0:e,e=e<r-n?r-n:e):e=Math.max(0,r/2-n/2),i>a?(t=t>0?0:t,t=t<a-i?a-i:t):t=Math.max(0,a/2-i/2),{top:t,left:e}},u.prototype.onZoom=function(){var t=this,r=t.contentStartPos.width,s=t.contentStartPos.height,l=t.contentStartPos.left,c=t.contentStartPos.top,u=a(t.newPoints[0],t.newPoints[1]),d=u/t.startDistanceBetweenFingers,f=Math.floor(r*d),p=Math.floor(s*d),h=(r-f)*t.percentageOfImageAtPinchPointX,g=(s-p)*t.percentageOfImageAtPinchPointY,m=(t.newPoints[0].x+t.newPoints[1].x)/2-n(e).scrollLeft(),v=(t.newPoints[0].y+t.newPoints[1].y)/2-n(e).scrollTop(),b=m-t.centerPointStartX,y=v-t.centerPointStartY,x=l+(h+b),w=c+(g+y),C={top:w,left:x,scaleX:t.contentStartPos.scaleX*d,scaleY:t.contentStartPos.scaleY*d};t.canTap=!1,t.newWidth=f,t.newHeight=p,t.contentLastPos=C,t.requestId&&(o(t.requestId),t.requestId=null),t.requestId=i(function(){n.fancybox.setTranslate(t.$content,t.contentLastPos)})},u.prototype.ontouchend=function(e){var i=this,a=Math.max((new Date).getTime()-i.startTime,1),s=i.isSwiping,l=i.isPanning,c=i.isZooming;if(i.endPoints=r(e),i.$container.removeClass("fancybox-controls--isGrabbing"),n(t).off(".fb.touch"),i.requestId&&(o(i.requestId),i.requestId=null),i.isSwiping=!1,i.isPanning=!1,i.isZooming=!1,i.canTap)return i.onTap(e);i.speed=366,i.velocityX=i.distanceX/a*.5,i.velocityY=i.distanceY/a*.5,i.speedX=Math.max(.5*i.speed,Math.min(1.5*i.speed,1/Math.abs(i.velocityX)*i.speed)),l?i.endPanning():c?i.endZooming():i.endSwiping(s)},u.prototype.endSwiping=function(e){var t=this,i=!1;t.instance.isSliding=!1,t.sliderLastPos=null,"y"==e&&Math.abs(t.distanceY)>50?(n.fancybox.animate(t.instance.current.$slide,{top:t.sliderStartPos.top+t.distanceY+150*t.velocityY,opacity:0},150),i=t.instance.close(!0,300)):"x"==e&&t.distanceX>50&&t.instance.group.length>1?i=t.instance.previous(t.speedX):"x"==e&&t.distanceX<-50&&t.instance.group.length>1&&(i=t.instance.next(t.speedX)),!1!==i||"x"!=e&&"y"!=e||t.instance.jumpTo(t.instance.current.index,150),t.$container.removeClass("fancybox-is-sliding")},u.prototype.endPanning=function(){var e,t,i,o=this;o.contentLastPos&&(!1===o.instance.current.opts.touch.momentum?(e=o.contentLastPos.left,t=o.contentLastPos.top):(e=o.contentLastPos.left+o.velocityX*o.speed,t=o.contentLastPos.top+o.velocityY*o.speed),i=o.limitPosition(e,t,o.contentStartPos.width,o.contentStartPos.height),i.width=o.contentStartPos.width,i.height=o.contentStartPos.height,n.fancybox.animate(o.$content,i,330))},u.prototype.endZooming=function(){var e,t,i,o,r=this,a=r.instance.current,s=r.newWidth,l=r.newHeight;r.contentLastPos&&(e=r.contentLastPos.left,t=r.contentLastPos.top,o={top:t,left:e,width:s,height:l,scaleX:1,scaleY:1},n.fancybox.setTranslate(r.$content,o),s<r.canvasWidth&&l<r.canvasHeight?r.instance.scaleToFit(150):s>a.width||l>a.height?r.instance.scaleToActual(r.centerPointStartX,r.centerPointStartY,150):(i=r.limitPosition(e,t,s,l),n.fancybox.setTranslate(r.content,n.fancybox.getTranslate(r.$content)),n.fancybox.animate(r.$content,i,150)))},u.prototype.onTap=function(e){var t,i=this,o=n(e.target),a=i.instance,s=a.current,l=e&&r(e)||i.startPoints,c=l[0]?l[0].x-i.$stage.offset().left:0,u=l[0]?l[0].y-i.$stage.offset().top:0,d=function(t){var o=s.opts[t];if(n.isFunction(o)&&(o=o.apply(a,[s,e])),o)switch(o){case"close":a.close(i.startEvent);break;case"toggleControls":a.toggleControls(!0);break;case"next":a.next();break;case"nextOrClose":a.group.length>1?a.next():a.close(i.startEvent);break;case"zoom":"image"==s.type&&(s.isLoaded||s.$ghost)&&(a.canPan()?a.scaleToFit():a.isScaledDown()?a.scaleToActual(c,u):a.group.length<2&&a.close(i.startEvent))}};if(!(e.originalEvent&&2==e.originalEvent.button||a.isSliding||c>o[0].clientWidth+o.offset().left)){if(o.is(".fancybox-bg,.fancybox-inner,.fancybox-outer,.fancybox-container"))t="Outside";else if(o.is(".fancybox-slide"))t="Slide";else{if(!a.current.$content||!a.current.$content.has(e.target).length)return;t="Content"}if(i.tapped){if(clearTimeout(i.tapped),i.tapped=null,Math.abs(c-i.tapX)>50||Math.abs(u-i.tapY)>50||a.isSliding)return this;d("dblclick"+t)}else i.tapX=c,i.tapY=u,s.opts["dblclick"+t]&&s.opts["dblclick"+t]!==s.opts["click"+t]?i.tapped=setTimeout(function(){i.tapped=null,d("click"+t)},300):d("click"+t);return this}},n(t).on("onActivate.fb",function(e,t){t&&!t.Guestures&&(t.Guestures=new u(t))}),n(t).on("beforeClose.fb",function(e,t){t&&t.Guestures&&t.Guestures.destroy()})}(window,document,window.jQuery),function(e,t){"use strict";var n=function(e){this.instance=e,this.init()};t.extend(n.prototype,{timer:null,isActive:!1,$button:null,speed:3e3,init:function(){var e=this;e.$button=e.instance.$refs.toolbar.find("[data-fancybox-play]").on("click",function(){e.toggle()}),(e.instance.group.length<2||!e.instance.group[e.instance.currIndex].opts.slideShow)&&e.$button.hide()},set:function(){var e=this;e.instance&&e.instance.current&&(e.instance.current.opts.loop||e.instance.currIndex<e.instance.group.length-1)?e.timer=setTimeout(function(){e.instance.next()},e.instance.current.opts.slideShow.speed||e.speed):(e.stop(),e.instance.idleSecondsCounter=0,e.instance.showControls())},clear:function(){var e=this;clearTimeout(e.timer),e.timer=null},start:function(){var e=this,t=e.instance.current;e.instance&&t&&(t.opts.loop||t.index<e.instance.group.length-1)&&(e.isActive=!0,e.$button.attr("title",t.opts.i18n[t.opts.lang].PLAY_STOP).addClass("fancybox-button--pause"),t.isComplete&&e.set())},stop:function(){var e=this,t=e.instance.current;e.clear(),e.$button.attr("title",t.opts.i18n[t.opts.lang].PLAY_START).removeClass("fancybox-button--pause"),e.isActive=!1},toggle:function(){var e=this;e.isActive?e.stop():e.start()}}),t(e).on({"onInit.fb":function(e,t){t&&!t.SlideShow&&(t.SlideShow=new n(t))},"beforeShow.fb":function(e,t,n,i){var o=t&&t.SlideShow;i?o&&n.opts.slideShow.autoStart&&o.start():o&&o.isActive&&o.clear()},"afterShow.fb":function(e,t,n){var i=t&&t.SlideShow;i&&i.isActive&&i.set()},"afterKeydown.fb":function(n,i,o,r,a){var s=i&&i.SlideShow;!s||!o.opts.slideShow||80!==a&&32!==a||t(e.activeElement).is("button,a,input")||(r.preventDefault(),s.toggle())},"beforeClose.fb onDeactivate.fb":function(e,t){var n=t&&t.SlideShow;n&&n.stop()}}),t(e).on("visibilitychange",function(){var n=t.fancybox.getInstance(),i=n&&n.SlideShow;i&&i.isActive&&(e.hidden?i.clear():i.set())})}(document,window.jQuery),function(e,t){"use strict";var n=function(){var t,n,i,o=[["requestFullscreen","exitFullscreen","fullscreenElement","fullscreenEnabled","fullscreenchange","fullscreenerror"],["webkitRequestFullscreen","webkitExitFullscreen","webkitFullscreenElement","webkitFullscreenEnabled","webkitfullscreenchange","webkitfullscreenerror"],["webkitRequestFullScreen","webkitCancelFullScreen","webkitCurrentFullScreenElement","webkitCancelFullScreen","webkitfullscreenchange","webkitfullscreenerror"],["mozRequestFullScreen","mozCancelFullScreen","mozFullScreenElement","mozFullScreenEnabled","mozfullscreenchange","mozfullscreenerror"],["msRequestFullscreen","msExitFullscreen","msFullscreenElement","msFullscreenEnabled","MSFullscreenChange","MSFullscreenError"]],r={};for(n=0;n<o.length;n++)if((t=o[n])&&t[1]in e){for(i=0;i<t.length;i++)r[o[0][i]]=t[i];return r}return!1}();if(!n)return void(t&&t.fancybox&&(t.fancybox.defaults.btnTpl.fullScreen=!1));var i={request:function(t){t=t||e.documentElement,t[n.requestFullscreen](t.ALLOW_KEYBOARD_INPUT)},exit:function(){e[n.exitFullscreen]()},toggle:function(t){t=t||e.documentElement,this.isFullscreen()?this.exit():this.request(t)},isFullscreen:function(){return Boolean(e[n.fullscreenElement])},enabled:function(){return Boolean(e[n.fullscreenEnabled])}};t(e).on({"onInit.fb":function(e,t){var n,o=t.$refs.toolbar.find("[data-fancybox-fullscreen]");t&&!t.FullScreen&&t.group[t.currIndex].opts.fullScreen?(n=t.$refs.container,n.on("click.fb-fullscreen","[data-fancybox-fullscreen]",function(e){e.stopPropagation(),e.preventDefault(),i.toggle(n[0])}),t.opts.fullScreen&&!0===t.opts.fullScreen.autoStart&&i.request(n[0]),t.FullScreen=i):o.hide()},"afterKeydown.fb":function(e,t,n,i,o){t&&t.FullScreen&&70===o&&(i.preventDefault(),t.FullScreen.toggle(t.$refs.container[0]))},"beforeClose.fb":function(e){e&&e.FullScreen&&i.exit()}}),t(e).on(n.fullscreenchange,function(){var e=t.fancybox.getInstance();e.current&&"image"===e.current.type&&e.isAnimating&&(e.current.$content.css("transition","none"),e.isAnimating=!1,e.update(!0,!0,0)),e.trigger("onFullscreenChange",i.isFullscreen())})}(document,window.jQuery),function(e,t){"use strict";var n=function(e){this.instance=e,this.init()};t.extend(n.prototype,{$button:null,$grid:null,$list:null,isVisible:!1,init:function(){var e=this,t=e.instance.group[0],n=e.instance.group[1];e.$button=e.instance.$refs.toolbar.find("[data-fancybox-thumbs]"),e.instance.group.length>1&&e.instance.group[e.instance.currIndex].opts.thumbs&&("image"==t.type||t.opts.thumb||t.opts.$thumb)&&("image"==n.type||n.opts.thumb||n.opts.$thumb)?(e.$button.on("click",function(){e.toggle()}),e.isActive=!0):(e.$button.hide(),e.isActive=!1)},create:function(){var e,n,i=this.instance;this.$grid=t('<div class="fancybox-thumbs"></div>').appendTo(i.$refs.container),e="<ul>",t.each(i.group,function(t,i){n=i.opts.thumb||(i.opts.$thumb?i.opts.$thumb.attr("src"):null),n||"image"!==i.type||(n=i.src),n&&n.length&&(e+='<li data-index="'+t+'"  tabindex="0" class="fancybox-thumbs-loading"><img data-src="'+n+'" /></li>')}),e+="</ul>",this.$list=t(e).appendTo(this.$grid).on("click","li",function(){i.jumpTo(t(this).data("index"))}),this.$list.find("img").hide().one("load",function(){var e,n,i,o,r=t(this).parent().removeClass("fancybox-thumbs-loading"),a=r.outerWidth(),s=r.outerHeight();e=this.naturalWidth||this.width,n=this.naturalHeight||this.height,i=e/a,o=n/s,i>=1&&o>=1&&(i>o?(e/=o,n=s):(e=a,n/=i)),t(this).css({width:Math.floor(e),height:Math.floor(n),"margin-top":Math.min(0,Math.floor(.3*s-.3*n)),"margin-left":Math.min(0,Math.floor(.5*a-.5*e))}).show()}).each(function(){this.src=t(this).data("src")})},focus:function(){
this.instance.current&&this.$list.children().removeClass("fancybox-thumbs-active").filter('[data-index="'+this.instance.current.index+'"]').addClass("fancybox-thumbs-active").focus()},close:function(){this.$grid.hide()},update:function(){this.instance.$refs.container.toggleClass("fancybox-show-thumbs",this.isVisible),this.isVisible?(this.$grid||this.create(),this.instance.trigger("onThumbsShow"),this.focus()):this.$grid&&this.instance.trigger("onThumbsHide"),this.instance.update()},hide:function(){this.isVisible=!1,this.update()},show:function(){this.isVisible=!0,this.update()},toggle:function(){this.isVisible=!this.isVisible,this.update()}}),t(e).on({"onInit.fb":function(e,t){t&&!t.Thumbs&&(t.Thumbs=new n(t))},"beforeShow.fb":function(e,t,n,i){var o=t&&t.Thumbs;if(o&&o.isActive){if(n.modal)return o.$button.hide(),void o.hide();i&&!0===t.opts.thumbs.autoStart&&o.show(),o.isVisible&&o.focus()}},"afterKeydown.fb":function(e,t,n,i,o){var r=t&&t.Thumbs;r&&r.isActive&&71===o&&(i.preventDefault(),r.toggle())},"beforeClose.fb":function(e,t){var n=t&&t.Thumbs;n&&n.isVisible&&!1!==t.opts.thumbs.hideOnClose&&n.close()}})}(document,window.jQuery),function(e,t,n){"use strict";function i(){var e=t.location.hash.substr(1),n=e.split("-"),i=n.length>1&&/^\+?\d+$/.test(n[n.length-1])?parseInt(n.pop(-1),10)||1:1,o=n.join("-");return i<1&&(i=1),{hash:e,index:i,gallery:o}}function o(e){var t;""!==e.gallery&&(t=n("[data-fancybox='"+n.escapeSelector(e.gallery)+"']").eq(e.index-1),t.length||(t=n("#"+n.escapeSelector(e.gallery))),t.length&&(a=!1,t.trigger("click")))}function r(e){var t;return!!e&&(t=e.current?e.current.opts:e.opts,t.hash||(t.$orig?t.$orig.data("fancybox"):""))}n.escapeSelector||(n.escapeSelector=function(e){return(e+"").replace(/([\0-\x1f\x7f]|^-?\d)|^-$|[^\x80-\uFFFF\w-]/g,function(e,t){return t?"\0"===e?"�":e.slice(0,-1)+"\\"+e.charCodeAt(e.length-1).toString(16)+" ":"\\"+e})});var a=!0,s=null,l=null;n(function(){setTimeout(function(){!1!==n.fancybox.defaults.hash&&(n(e).on({"onInit.fb":function(e,t){var n,o;!1!==t.group[t.currIndex].opts.hash&&(n=i(),(o=r(t))&&n.gallery&&o==n.gallery&&(t.currIndex=n.index-1))},"beforeShow.fb":function(n,i,o){var c;o&&!1!==o.opts.hash&&(c=r(i))&&""!==c&&(t.location.hash.indexOf(c)<0&&(i.opts.origHash=t.location.hash),s=c+(i.group.length>1?"-"+(o.index+1):""),"replaceState"in t.history?(l&&clearTimeout(l),l=setTimeout(function(){t.history[a?"pushState":"replaceState"]({},e.title,t.location.pathname+t.location.search+"#"+s),l=null,a=!1},300)):t.location.hash=s)},"beforeClose.fb":function(i,o,a){var c,u;l&&clearTimeout(l),!1!==a.opts.hash&&(c=r(o),u=o&&o.opts.origHash?o.opts.origHash:"",c&&""!==c&&("replaceState"in history?t.history.replaceState({},e.title,t.location.pathname+t.location.search+u):(t.location.hash=u,n(t).scrollTop(o.scrollTop).scrollLeft(o.scrollLeft))),s=null)}}),n(t).on("hashchange.fb",function(){var e=i();n.fancybox.getInstance()?!s||s===e.gallery+"-"+e.index||1===e.index&&s==e.gallery||(s=null,n.fancybox.close()):""!==e.gallery&&o(e)}),o(i()))},50)})}(document,window,window.jQuery),function(e,t,n){"function"==typeof define&&define.amd?define(["jquery"],e):"object"==typeof exports?module.exports=e(require("jquery")):e(t||n)}(function(e){"use strict";var t=function(t,n,i){var o={invalid:[],getCaret:function(){try{var e,n=0,i=t.get(0),r=document.selection,a=i.selectionStart;return r&&-1===navigator.appVersion.indexOf("MSIE 10")?(e=r.createRange(),e.moveStart("character",-o.val().length),n=e.text.length):(a||"0"===a)&&(n=a),n}catch(e){}},setCaret:function(e){try{if(t.is(":focus")){var n,i=t.get(0);i.setSelectionRange?i.setSelectionRange(e,e):(n=i.createTextRange(),n.collapse(!0),n.moveEnd("character",e),n.moveStart("character",e),n.select())}}catch(e){}},events:function(){t.on("keydown.mask",function(e){t.data("mask-keycode",e.keyCode||e.which),t.data("mask-previus-value",t.val()),t.data("mask-previus-caret-pos",o.getCaret()),o.maskDigitPosMapOld=o.maskDigitPosMap}).on(e.jMaskGlobals.useInput?"input.mask":"keyup.mask",o.behaviour).on("paste.mask drop.mask",function(){setTimeout(function(){t.keydown().keyup()},100)}).on("change.mask",function(){t.data("changed",!0)}).on("blur.mask",function(){s===o.val()||t.data("changed")||t.trigger("change"),t.data("changed",!1)}).on("blur.mask",function(){s=o.val()}).on("focus.mask",function(t){!0===i.selectOnFocus&&e(t.target).select()}).on("focusout.mask",function(){i.clearIfNotMatch&&!r.test(o.val())&&o.val("")})},getRegexMask:function(){for(var e,t,i,o,r,s,l=[],c=0;c<n.length;c++)e=a.translation[n.charAt(c)],e?(t=e.pattern.toString().replace(/.{1}$|^.{1}/g,""),i=e.optional,o=e.recursive,o?(l.push(n.charAt(c)),r={digit:n.charAt(c),pattern:t}):l.push(i||o?t+"?":t)):l.push(n.charAt(c).replace(/[-\/\\^$*+?.()|[\]{}]/g,"\\$&"));return s=l.join(""),r&&(s=s.replace(new RegExp("("+r.digit+"(.*"+r.digit+")?)"),"($1)?").replace(new RegExp(r.digit,"g"),r.pattern)),new RegExp(s)},destroyEvents:function(){t.off(["input","keydown","keyup","paste","drop","blur","focusout",""].join(".mask "))},val:function(e){var n,i=t.is("input"),o=i?"val":"text";return arguments.length>0?(t[o]()!==e&&t[o](e),n=t):n=t[o](),n},calculateCaretPosition:function(){var e=t.data("mask-previus-value")||"",n=o.getMasked(),i=o.getCaret();if(e!==n){var r=t.data("mask-previus-caret-pos")||0,a=n.length,s=e.length,l=0,c=0,u=0,d=0,f=0;for(f=i;f<a&&o.maskDigitPosMap[f];f++)c++;for(f=i-1;f>=0&&o.maskDigitPosMap[f];f--)l++;for(f=i-1;f>=0;f--)o.maskDigitPosMap[f]&&u++;for(f=r-1;f>=0;f--)o.maskDigitPosMapOld[f]&&d++;if(i>s)i=10*a;else if(r>=i&&r!==s){if(!o.maskDigitPosMapOld[i]){var p=i;i-=d-u,i-=l,o.maskDigitPosMap[i]&&(i=p)}}else i>r&&(i+=u-d,i+=c)}return i},behaviour:function(n){n=n||window.event,o.invalid=[];var i=t.data("mask-keycode");if(-1===e.inArray(i,a.byPassKeys)){var r=o.getMasked(),s=o.getCaret();return setTimeout(function(){o.setCaret(o.calculateCaretPosition())},10),o.val(r),o.setCaret(s),o.callbacks(n)}},getMasked:function(e,t){var r,s,l=[],c=void 0===t?o.val():t+"",u=0,d=n.length,f=0,p=c.length,h=1,g="push",m=-1,v=0,b=[];i.reverse?(g="unshift",h=-1,r=0,u=d-1,f=p-1,s=function(){return u>-1&&f>-1}):(r=d-1,s=function(){return u<d&&f<p});for(var y;s();){var x=n.charAt(u),w=c.charAt(f),C=a.translation[x];C?(w.match(C.pattern)?(l[g](w),C.recursive&&(-1===m?m=u:u===r&&u!==m&&(u=m-h),r===m&&(u-=h)),u+=h):w===y?(v--,y=void 0):C.optional?(u+=h,f-=h):C.fallback?(l[g](C.fallback),u+=h,f-=h):o.invalid.push({p:f,v:w,e:C.pattern}),f+=h):(e||l[g](x),w===x?(b.push(f),f+=h):(y=x,b.push(f+v),v++),u+=h)}var S=n.charAt(r);d!==p+1||a.translation[S]||l.push(S);var T=l.join("");return o.mapMaskdigitPositions(T,b,p),T},mapMaskdigitPositions:function(e,t,n){var r=i.reverse?e.length-n:0;o.maskDigitPosMap={};for(var a=0;a<t.length;a++)o.maskDigitPosMap[t[a]+r]=1},callbacks:function(e){var r=o.val(),a=r!==s,l=[r,e,t,i],c=function(e,t,n){"function"==typeof i[e]&&t&&i[e].apply(this,n)};c("onChange",!0===a,l),c("onKeyPress",!0===a,l),c("onComplete",r.length===n.length,l),c("onInvalid",o.invalid.length>0,[r,e,t,o.invalid,i])}};t=e(t);var r,a=this,s=o.val();n="function"==typeof n?n(o.val(),void 0,t,i):n,a.mask=n,a.options=i,a.remove=function(){var e=o.getCaret();return o.destroyEvents(),o.val(a.getCleanVal()),o.setCaret(e),t},a.getCleanVal=function(){return o.getMasked(!0)},a.getMaskedVal=function(e){return o.getMasked(!1,e)},a.init=function(s){if(s=s||!1,i=i||{},a.clearIfNotMatch=e.jMaskGlobals.clearIfNotMatch,a.byPassKeys=e.jMaskGlobals.byPassKeys,a.translation=e.extend({},e.jMaskGlobals.translation,i.translation),a=e.extend(!0,{},a,i),r=o.getRegexMask(),s)o.events(),o.val(o.getMasked());else{i.placeholder&&t.attr("placeholder",i.placeholder),t.data("mask")&&t.attr("autocomplete","off");for(var l=0,c=!0;l<n.length;l++){var u=a.translation[n.charAt(l)];if(u&&u.recursive){c=!1;break}}c&&t.attr("maxlength",n.length),o.destroyEvents(),o.events();var d=o.getCaret();o.val(o.getMasked()),o.setCaret(d)}},a.init(!t.is("input"))};e.maskWatchers={};var n=function(){var n=e(this),o={},r=n.attr("data-mask");if(n.attr("data-mask-reverse")&&(o.reverse=!0),n.attr("data-mask-clearifnotmatch")&&(o.clearIfNotMatch=!0),"true"===n.attr("data-mask-selectonfocus")&&(o.selectOnFocus=!0),i(n,r,o))return n.data("mask",new t(this,r,o))},i=function(t,n,i){i=i||{};var o=e(t).data("mask"),r=JSON.stringify,a=e(t).val()||e(t).text();try{return"function"==typeof n&&(n=n(a)),"object"!=typeof o||r(o.options)!==r(i)||o.mask!==n}catch(e){}};e.fn.mask=function(n,o){o=o||{};var r=this.selector,a=e.jMaskGlobals,s=a.watchInterval,l=o.watchInputs||a.watchInputs,c=function(){if(i(this,n,o))return e(this).data("mask",new t(this,n,o))};return e(this).each(c),r&&""!==r&&l&&(clearInterval(e.maskWatchers[r]),e.maskWatchers[r]=setInterval(function(){e(document).find(r).each(c)},s)),this},e.fn.masked=function(e){return this.data("mask").getMaskedVal(e)},e.fn.unmask=function(){return clearInterval(e.maskWatchers[this.selector]),delete e.maskWatchers[this.selector],this.each(function(){var t=e(this).data("mask");t&&t.remove().removeData("mask")})},e.fn.cleanVal=function(){return this.data("mask").getCleanVal()},e.applyDataMask=function(t){t=t||e.jMaskGlobals.maskElements,(t instanceof e?t:e(t)).filter(e.jMaskGlobals.dataMaskAttr).each(n)};var o={maskElements:"input,td,span,div",dataMaskAttr:"*[data-mask]",dataMask:!0,watchInterval:300,watchInputs:!0,useInput:!/Chrome\/[2-4][0-9]|SamsungBrowser/.test(window.navigator.userAgent)&&function(e){var t,n=document.createElement("div");return e="on"+e,t=e in n,t||(n.setAttribute(e,"return;"),t="function"==typeof n[e]),n=null,t}("input"),watchDataMask:!1,byPassKeys:[9,16,17,18,36,37,38,39,40,91],translation:{0:{pattern:/\d/},9:{pattern:/\d/,optional:!0},"#":{pattern:/\d/,recursive:!0},A:{pattern:/[a-zA-Z0-9]/},S:{pattern:/[a-zA-Z]/}}};e.jMaskGlobals=e.jMaskGlobals||{},o=e.jMaskGlobals=e.extend(!0,{},o,e.jMaskGlobals),o.dataMask&&e.applyDataMask(),setInterval(function(){e.jMaskGlobals.watchDataMask&&e.applyDataMask()},o.watchInterval)},window.jQuery,window.Zepto),function(e,t){"object"==typeof exports&&"undefined"!=typeof module?module.exports=t():"function"==typeof define&&define.amd?define(t):e.flatpickr=t()}(this,function(){"use strict";function e(e,t,n){return!1!==n?new Date(e.getTime()).setHours(0,0,0,0)-new Date(t.getTime()).setHours(0,0,0,0):e.getTime()-t.getTime()}function t(e,t,n){void 0===n&&(n=!1);var i;return function(){var o=this,r=arguments;null!==i&&clearTimeout(i),i=window.setTimeout(function(){i=null,n||e.apply(o,r)},t),n&&!i&&e.apply(o,r)}}function n(e){return(e.wheelDelta||-e.deltaY)>=0?1:-1}function i(e,t,n){if(!0===n)return e.classList.add(t);e.classList.remove(t)}function o(e,t,n){var i=window.document.createElement(e);return t=t||"",n=n||"",i.className=t,void 0!==n&&(i.textContent=n),i}function r(e){for(;e.firstChild;)e.removeChild(e.firstChild)}function a(e,t){return t(e)?e:e.parentNode?a(e.parentNode,t):void 0}function s(e){var t=o("div","numInputWrapper"),n=o("input","numInput "+e),i=o("span","arrowUp"),r=o("span","arrowDown");return n.type="text",n.pattern="\\d*",t.appendChild(n),t.appendChild(i),t.appendChild(r),t}function l(l,c){function f(){Le.utils={getDaysInMonth:function(e,t){return void 0===e&&(e=Le.currentMonth),void 0===t&&(t=Le.currentYear),1===e&&(t%4==0&&t%100!=0||t%400==0)?29:Le.l10n.daysInMonth[e]}}}function h(e){return e.bind(Le)}function g(e){Le.config.noCalendar&&!Le.selectedDates.length&&(Le.setDate((new Date).setHours(Le.config.defaultHour,Le.config.defaultMinute,Le.config.defaultSeconds),!1),k(),De()),Ae(e),0!==Le.selectedDates.length&&(!Le.minDateHasTime||"input"!==e.type||e.target.value.length>=2?(k(),De()):setTimeout(function(){k(),De()},1e3))}function y(e,t){return e%12+12*v("PM"===t)}function T(e){switch(e%24){case 0:case 12:return 12;default:return e%12}}function k(){if(void 0!==Le.hourElement&&void 0!==Le.minuteElement){var t=(parseInt(Le.hourElement.value.slice(-2),10)||0)%24,n=(parseInt(Le.minuteElement.value,10)||0)%60,i=void 0!==Le.secondElement?(parseInt(Le.secondElement.value,10)||0)%60:0;void 0!==Le.amPM&&(t=y(t,Le.amPM.textContent)),Le.config.minDate&&Le.minDateHasTime&&Le.latestSelectedDateObj&&0===e(Le.latestSelectedDateObj,Le.config.minDate)&&(t=Math.max(t,Le.config.minDate.getHours()))===Le.config.minDate.getHours()&&(n=Math.max(n,Le.config.minDate.getMinutes())),Le.config.maxDate&&Le.maxDateHasTime&&Le.latestSelectedDateObj&&0===e(Le.latestSelectedDateObj,Le.config.maxDate)&&(t=Math.min(t,Le.config.maxDate.getHours()))===Le.config.maxDate.getHours()&&(n=Math.min(n,Le.config.maxDate.getMinutes())),D(t,n,i)}}function E(e){var t=e||Le.latestSelectedDateObj;t&&D(t.getHours(),t.getMinutes(),t.getSeconds())}function D(e,t,n){void 0!==Le.latestSelectedDateObj&&Le.latestSelectedDateObj.setHours(e%24,t,n||0,0),Le.hourElement&&Le.minuteElement&&!Le.isMobile&&(Le.hourElement.value=m(Le.config.time_24hr?e:(12+e)%12+12*v(e%12==0)),Le.minuteElement.value=m(t),void 0!==Le.amPM&&(Le.amPM.textContent=e>=12?"PM":"AM"),void 0!==Le.secondElement&&(Le.secondElement.value=m(n)))}function M(e){var t=parseInt(e.target.value)+(e.delta||0);4!==t.toString().length&&"Enter"!==e.key||(Le.currentYearElement.blur(),/[^\d]/.test(t.toString())||ee(t))}function P(e,t,n){return t instanceof Array?t.forEach(function(t){return P(e,t,n)}):e instanceof Array?e.forEach(function(e){return P(e,t,n)}):(e.addEventListener(t,n),void Le._handlers.push({element:e,event:t,handler:n}))}function A(e){return function(t){return 1===t.which&&e(t)}}function L(){Ce("onChange")}function O(){if(Le.config.wrap&&["open","close","toggle","clear"].forEach(function(e){Array.prototype.forEach.call(Le.element.querySelectorAll("[data-"+e+"]"),function(t){return P(t,"click",Le[e])})}),Le.isMobile)return void xe();var e=t(oe,50);if(Le._debouncedChange=t(L,300),"range"===Le.config.mode&&Le.daysContainer&&P(Le.daysContainer,"mouseover",function(e){return ie(e.target)}),P(window.document.body,"keydown",ne),Le.config.static||P(Le._input,"keydown",ne),Le.config.inline||Le.config.static||P(window,"resize",e),void 0!==window.ontouchstart&&P(window.document.body,"touchstart",J),P(window.document.body,"mousedown",A(J)),P(Le._input,"blur",J),!0===Le.config.clickOpens&&(P(Le._input,"focus",Le.open),P(Le._input,"mousedown",A(Le.open))),void 0!==Le.daysContainer&&(Le.monthNav.addEventListener("wheel",function(e){return e.preventDefault()}),P(Le.monthNav,"wheel",t(Me,10)),P(Le.monthNav,"mousedown",A(Pe)),P(Le.monthNav,["keyup","increment"],M),P(Le.daysContainer,"mousedown",A(de)),Le.config.animate&&(P(Le.daysContainer,["webkitAnimationEnd","animationend"],I),P(Le.monthNav,["webkitAnimationEnd","animationend"],$))),void 0!==Le.timeContainer&&void 0!==Le.minuteElement&&void 0!==Le.hourElement){var n=function(e){return e.target.select()};P(Le.timeContainer,["wheel","input","increment"],g),P(Le.timeContainer,"mousedown",A(F)),P(Le.timeContainer,["wheel","increment"],Le._debouncedChange),P(Le.timeContainer,"input",L),P([Le.hourElement,Le.minuteElement],["focus","click"],n),void 0!==Le.secondElement&&P(Le.secondElement,"focus",function(){return Le.secondElement&&Le.secondElement.select()}),void 0!==Le.amPM&&P(Le.amPM,"mousedown",A(function(e){g(e),L()}))}}function N(){Le._animationLoop.forEach(function(e){return e()}),Le._animationLoop=[]}function I(e){if(Le.daysContainer&&Le.daysContainer.childNodes.length>1)switch(e.animationName){case"fpSlideLeft":Le.daysContainer.lastChild&&Le.daysContainer.lastChild.classList.remove("slideLeftNew"),Le.daysContainer.removeChild(Le.daysContainer.firstChild),Le.days=Le.daysContainer.firstChild,N();break;case"fpSlideRight":Le.daysContainer.firstChild&&Le.daysContainer.firstChild.classList.remove("slideRightNew"),Le.daysContainer.removeChild(Le.daysContainer.lastChild),Le.days=Le.daysContainer.firstChild,N()}}function $(e){switch(e.animationName){case"fpSlideLeftNew":case"fpSlideRightNew":Le.navigationCurrentMonth.classList.remove("slideLeftNew"),Le.navigationCurrentMonth.classList.remove("slideRightNew");for(var t=Le.navigationCurrentMonth;t.nextSibling&&/curr/.test(t.nextSibling.className);)Le.monthNav.removeChild(t.nextSibling);for(;t.previousSibling&&/curr/.test(t.previousSibling.className);)Le.monthNav.removeChild(t.previousSibling);Le.oldCurMonth=void 0}}function j(e){var t=void 0!==e?be(e):Le.latestSelectedDateObj||(Le.config.minDate&&Le.config.minDate>Le.now?Le.config.minDate:Le.config.maxDate&&Le.config.maxDate<Le.now?Le.config.maxDate:Le.now);try{void 0!==t&&(Le.currentYear=t.getFullYear(),Le.currentMonth=t.getMonth())}catch(e){console.error(e.stack),console.warn("Invalid date supplied: "+t)}Le.redraw()}function F(e){~e.target.className.indexOf("arrow")&&H(e,e.target.classList.contains("arrowUp")?1:-1)}function H(e,t,n){var i=e&&e.target,o=n||i&&i.parentNode&&i.parentNode.firstChild,r=Se("increment");r.delta=t,o&&o.dispatchEvent(r)}function R(){var e=window.document.createDocumentFragment();if(Le.calendarContainer=o("div","flatpickr-calendar"),Le.calendarContainer.tabIndex=-1,!Le.config.noCalendar){if(e.appendChild(B()),Le.innerContainer=o("div","flatpickr-innerContainer"),Le.config.weekNumbers){var t=U(),n=t.weekWrapper,r=t.weekNumbers;Le.innerContainer.appendChild(n),Le.weekNumbers=r,Le.weekWrapper=n}Le.rContainer=o("div","flatpickr-rContainer"),Le.rContainer.appendChild(X()),Le.daysContainer||(Le.daysContainer=o("div","flatpickr-days"),Le.daysContainer.tabIndex=-1),W(),Le.rContainer.appendChild(Le.daysContainer),Le.innerContainer.appendChild(Le.rContainer),e.appendChild(Le.innerContainer)}Le.config.enableTime&&e.appendChild(z()),i(Le.calendarContainer,"rangeMode","range"===Le.config.mode),i(Le.calendarContainer,"animate",Le.config.animate),Le.calendarContainer.appendChild(e);var a=void 0!==Le.config.appendTo&&Le.config.appendTo.nodeType;if((Le.config.inline||Le.config.static)&&(Le.calendarContainer.classList.add(Le.config.inline?"inline":"static"),Le.config.inline&&(!a&&Le.element.parentNode?Le.element.parentNode.insertBefore(Le.calendarContainer,Le._input.nextSibling):void 0!==Le.config.appendTo&&Le.config.appendTo.appendChild(Le.calendarContainer)),Le.config.static)){var s=o("div","flatpickr-wrapper");Le.element.parentNode&&Le.element.parentNode.insertBefore(s,Le.element),s.appendChild(Le.element),Le.altInput&&s.appendChild(Le.altInput),s.appendChild(Le.calendarContainer)}Le.config.static||Le.config.inline||(void 0!==Le.config.appendTo?Le.config.appendTo:window.document.body).appendChild(Le.calendarContainer)}function q(t,n,r,a){var s=te(n,!0),l=o("span","flatpickr-day "+t,n.getDate().toString());return l.dateObj=n,l.$i=a,l.setAttribute("aria-label",Le.formatDate(n,Le.config.ariaDateFormat)),0===e(n,Le.now)&&(Le.todayDateElem=l,l.classList.add("today")),s?(l.tabIndex=-1,Te(n)&&(l.classList.add("selected"),Le.selectedDateElem=l,"range"===Le.config.mode&&(i(l,"startRange",Le.selectedDates[0]&&0===e(n,Le.selectedDates[0])),i(l,"endRange",Le.selectedDates[1]&&0===e(n,Le.selectedDates[1]))))):(l.classList.add("disabled"),Le.selectedDates[0]&&Le.minRangeDate&&n>Le.minRangeDate&&n<Le.selectedDates[0]?Le.minRangeDate=n:Le.selectedDates[0]&&Le.maxRangeDate&&n<Le.maxRangeDate&&n>Le.selectedDates[0]&&(Le.maxRangeDate=n)),"range"===Le.config.mode&&(ke(n)&&!Te(n)&&l.classList.add("inRange"),1===Le.selectedDates.length&&void 0!==Le.minRangeDate&&void 0!==Le.maxRangeDate&&(n<Le.minRangeDate||n>Le.maxRangeDate)&&l.classList.add("notAllowed")),Le.weekNumbers&&"prevMonthDay"!==t&&r%7==1&&Le.weekNumbers.insertAdjacentHTML("beforeend","<span class='disabled flatpickr-day'>"+Le.config.getWeek(n)+"</span>"),Ce("onDayCreate",l),l}function Y(e,t){var n=e+t||0,i=void 0!==e?Le.days.childNodes[n]:Le.selectedDateElem||Le.todayDateElem||Le.days.childNodes[0],o=function(){i=i||Le.days.childNodes[n],i.focus(),"range"===Le.config.mode&&ie(i)};if(void 0===i&&0!==t)return t>0?(Le.changeMonth(1,!0,void 0,!0),n%=42):t<0&&(Le.changeMonth(-1,!0,void 0,!0),n+=42),_(o);o()}function _(e){!0===Le.config.animate?Le._animationLoop.push(e):e()}function W(e){if(void 0!==Le.daysContainer){var t=(new Date(Le.currentYear,Le.currentMonth,1).getDay()-Le.l10n.firstDayOfWeek+7)%7,n="range"===Le.config.mode,i=Le.utils.getDaysInMonth((Le.currentMonth-1+12)%12),a=Le.utils.getDaysInMonth(),s=window.document.createDocumentFragment(),l=i+1-t,c=0;for(Le.weekNumbers&&Le.weekNumbers.firstChild&&(Le.weekNumbers.textContent=""),n&&(Le.minRangeDate=new Date(Le.currentYear,Le.currentMonth-1,l),Le.maxRangeDate=new Date(Le.currentYear,Le.currentMonth+1,(42-t)%a));l<=i;l++,c++)s.appendChild(q("prevMonthDay",new Date(Le.currentYear,Le.currentMonth-1,l),l,c));for(l=1;l<=a;l++,c++)s.appendChild(q("",new Date(Le.currentYear,Le.currentMonth,l),l,c));for(var u=a+1;u<=42-t;u++,c++)s.appendChild(q("nextMonthDay",new Date(Le.currentYear,Le.currentMonth+1,u%a),u,c));n&&1===Le.selectedDates.length&&s.childNodes[0]?(Le._hidePrevMonthArrow=Le._hidePrevMonthArrow||!!Le.minRangeDate&&Le.minRangeDate>s.childNodes[0].dateObj,Le._hideNextMonthArrow=Le._hideNextMonthArrow||!!Le.maxRangeDate&&Le.maxRangeDate<new Date(Le.currentYear,Le.currentMonth+1,1)):Ee();var d=o("div","dayContainer");if(d.appendChild(s),Le.config.animate&&void 0!==e)for(;Le.daysContainer.childNodes.length>1;)Le.daysContainer.removeChild(Le.daysContainer.firstChild);else r(Le.daysContainer);e&&e>=0?Le.daysContainer.appendChild(d):Le.daysContainer.insertBefore(d,Le.daysContainer.firstChild),Le.days=Le.daysContainer.childNodes[0]}}function B(){var e=window.document.createDocumentFragment();Le.monthNav=o("div","flatpickr-month"),Le.prevMonthNav=o("span","flatpickr-prev-month"),Le.prevMonthNav.innerHTML=Le.config.prevArrow,Le.currentMonthElement=o("span","cur-month"),Le.currentMonthElement.title=Le.l10n.scrollTitle;var t=s("cur-year");return Le.currentYearElement=t.childNodes[0],Le.currentYearElement.title=Le.l10n.scrollTitle,Le.config.minDate&&(Le.currentYearElement.min=Le.config.minDate.getFullYear().toString()),Le.config.maxDate&&(Le.currentYearElement.max=Le.config.maxDate.getFullYear().toString(),Le.currentYearElement.disabled=!!Le.config.minDate&&Le.config.minDate.getFullYear()===Le.config.maxDate.getFullYear()),Le.nextMonthNav=o("span","flatpickr-next-month"),Le.nextMonthNav.innerHTML=Le.config.nextArrow,Le.navigationCurrentMonth=o("span","flatpickr-current-month"),Le.navigationCurrentMonth.appendChild(Le.currentMonthElement),Le.navigationCurrentMonth.appendChild(t),e.appendChild(Le.prevMonthNav),e.appendChild(Le.navigationCurrentMonth),e.appendChild(Le.nextMonthNav),Le.monthNav.appendChild(e),Object.defineProperty(Le,"_hidePrevMonthArrow",{get:function(){return Le.__hidePrevMonthArrow},set:function(e){Le.__hidePrevMonthArrow!==e&&(Le.prevMonthNav.style.display=e?"none":"block"),Le.__hidePrevMonthArrow=e}}),Object.defineProperty(Le,"_hideNextMonthArrow",{get:function(){return Le.__hideNextMonthArrow},set:function(e){Le.__hideNextMonthArrow!==e&&(Le.nextMonthNav.style.display=e?"none":"block"),Le.__hideNextMonthArrow=e}}),Ee(),Le.monthNav}function z(){Le.calendarContainer.classList.add("hasTime"),Le.config.noCalendar&&Le.calendarContainer.classList.add("noCalendar"),Le.timeContainer=o("div","flatpickr-time"),Le.timeContainer.tabIndex=-1;var e=o("span","flatpickr-time-separator",":"),t=s("flatpickr-hour");Le.hourElement=t.childNodes[0];var n=s("flatpickr-minute");if(Le.minuteElement=n.childNodes[0],Le.hourElement.tabIndex=Le.minuteElement.tabIndex=-1,Le.hourElement.value=m(Le.latestSelectedDateObj?Le.latestSelectedDateObj.getHours():Le.config.time_24hr?Le.config.defaultHour:T(Le.config.defaultHour)),Le.minuteElement.value=m(Le.latestSelectedDateObj?Le.latestSelectedDateObj.getMinutes():Le.config.defaultMinute),Le.hourElement.step=Le.config.hourIncrement.toString(),Le.minuteElement.step=Le.config.minuteIncrement.toString(),Le.hourElement.min=Le.config.time_24hr?"0":"1",Le.hourElement.max=Le.config.time_24hr?"23":"12",Le.minuteElement.min="0",Le.minuteElement.max="59",Le.hourElement.title=Le.minuteElement.title=Le.l10n.scrollTitle,Le.timeContainer.appendChild(t),Le.timeContainer.appendChild(e),Le.timeContainer.appendChild(n),Le.config.time_24hr&&Le.timeContainer.classList.add("time24hr"),Le.config.enableSeconds){Le.timeContainer.classList.add("hasSeconds");var i=s("flatpickr-second");Le.secondElement=i.childNodes[0],Le.secondElement.value=m(Le.latestSelectedDateObj?Le.latestSelectedDateObj.getSeconds():Le.config.defaultSeconds),Le.secondElement.step=Le.minuteElement.step,Le.secondElement.min=Le.minuteElement.min,Le.secondElement.max=Le.minuteElement.max,Le.timeContainer.appendChild(o("span","flatpickr-time-separator",":")),Le.timeContainer.appendChild(i)}return Le.config.time_24hr||(Le.amPM=o("span","flatpickr-am-pm",Le.l10n.amPM[v((Le.latestSelectedDateObj?Le.hourElement.value:Le.config.defaultHour)>11)]),Le.amPM.title=Le.l10n.toggleTitle,Le.amPM.tabIndex=-1,Le.timeContainer.appendChild(Le.amPM)),Le.timeContainer}function X(){Le.weekdayContainer||(Le.weekdayContainer=o("div","flatpickr-weekdays"));var e=Le.l10n.firstDayOfWeek,t=Le.l10n.weekdays.shorthand.slice();return e>0&&e<t.length&&(t=t.splice(e,t.length).concat(t.splice(0,e))),Le.weekdayContainer.innerHTML="\n    <span class=flatpickr-weekday>\n      "+t.join("</span><span class=flatpickr-weekday>")+"\n    </span>\n    ",Le.weekdayContainer}function U(){Le.calendarContainer.classList.add("hasWeeks");var e=o("div","flatpickr-weekwrapper");e.appendChild(o("span","flatpickr-weekday",Le.l10n.weekAbbreviation));var t=o("div","flatpickr-weeks");return e.appendChild(t),{weekWrapper:e,weekNumbers:t}}function V(e,t,n,i){void 0===t&&(t=!0),void 0===n&&(n=Le.config.animate),void 0===i&&(i=!1);var o=t?e:e-Le.currentMonth;if(!(o<0&&Le._hidePrevMonthArrow||o>0&&Le._hideNextMonthArrow)){if(Le.currentMonth+=o,(Le.currentMonth<0||Le.currentMonth>11)&&(Le.currentYear+=Le.currentMonth>11?1:-1,Le.currentMonth=(Le.currentMonth+12)%12,Ce("onYearChange")),W(n?o:void 0),!n)return Ce("onMonthChange"),Ee();var r=Le.navigationCurrentMonth;if(o<0)for(;r.nextSibling&&/curr/.test(r.nextSibling.className);)Le.monthNav.removeChild(r.nextSibling);else if(o>0)for(;r.previousSibling&&/curr/.test(r.previousSibling.className);)Le.monthNav.removeChild(r.previousSibling);Le.oldCurMonth=Le.navigationCurrentMonth,Le.navigationCurrentMonth=Le.monthNav.insertBefore(Le.oldCurMonth.cloneNode(!0),o>0?Le.oldCurMonth.nextSibling:Le.oldCurMonth);var a=Le.daysContainer;if(a.firstChild&&a.lastChild&&(o>0?(a.firstChild.classList.add("slideLeft"),a.lastChild.classList.add("slideLeftNew"),Le.oldCurMonth.classList.add("slideLeft"),Le.navigationCurrentMonth.classList.add("slideLeftNew")):o<0&&(a.firstChild.classList.add("slideRightNew"),a.lastChild.classList.add("slideRight"),Le.oldCurMonth.classList.add("slideRight"),Le.navigationCurrentMonth.classList.add("slideRightNew"))),Le.currentMonthElement=Le.navigationCurrentMonth.firstChild,Le.currentYearElement=Le.navigationCurrentMonth.lastChild.childNodes[0],Ee(),Le.oldCurMonth.firstChild&&(Le.oldCurMonth.firstChild.textContent=d(Le.currentMonth-o,Le.config.shorthandCurrentMonth,Le.l10n)),Ce("onMonthChange"),i&&document.activeElement&&document.activeElement.$i){var s=document.activeElement.$i;_(function(){Y(s,0)})}}}function G(e){void 0===e&&(e=!0),Le.input.value="",Le.altInput&&(Le.altInput.value=""),Le.mobileInput&&(Le.mobileInput.value=""),Le.selectedDates=[],Le.latestSelectedDateObj=void 0,Le.showTimeInput=!1,Le.redraw(),e&&Ce("onChange")}function K(){Le.isOpen=!1,Le.isMobile||(Le.calendarContainer.classList.remove("open"),Le._input.classList.remove("active")),Ce("onClose")}function Z(){void 0!==Le.config&&Ce("onDestroy");for(var e=Le._handlers.length;e--;){var t=Le._handlers[e];t.element.removeEventListener(t.event,t.handler)}Le._handlers=[],Le.mobileInput?(Le.mobileInput.parentNode&&Le.mobileInput.parentNode.removeChild(Le.mobileInput),Le.mobileInput=void 0):Le.calendarContainer&&Le.calendarContainer.parentNode&&Le.calendarContainer.parentNode.removeChild(Le.calendarContainer),Le.altInput&&(Le.input.type="text",Le.altInput.parentNode&&Le.altInput.parentNode.removeChild(Le.altInput),delete Le.altInput),Le.input&&(Le.input.type=Le.input._type,Le.input.classList.remove("flatpickr-input"),Le.input.removeAttribute("readonly"),Le.input.value=""),["_showTimeInput","latestSelectedDateObj","_hideNextMonthArrow","_hidePrevMonthArrow","__hideNextMonthArrow","__hidePrevMonthArrow","isMobile","isOpen","selectedDateElem","minDateHasTime","maxDateHasTime","days","daysContainer","_input","_positionElement","innerContainer","rContainer","monthNav","todayDateElem","calendarContainer","weekdayContainer","prevMonthNav","nextMonthNav","currentMonthElement","currentYearElement","navigationCurrentMonth","selectedDateElem","config"].forEach(function(e){try{delete Le[e]}catch(e){}})}function Q(e){return!(!Le.config.appendTo||!Le.config.appendTo.contains(e))||Le.calendarContainer.contains(e)}function J(e){if(Le.isOpen&&!Le.config.inline){var t=Q(e.target),n=e.target===Le.input||e.target===Le.altInput||Le.element.contains(e.target)||e.path&&e.path.indexOf&&(~e.path.indexOf(Le.input)||~e.path.indexOf(Le.altInput));("blur"===e.type?n&&e.relatedTarget&&!Q(e.relatedTarget):!n&&!t)&&-1===Le.config.ignoredFocusElements.indexOf(e.target)&&(Le.close(),"range"===Le.config.mode&&1===Le.selectedDates.length&&(Le.clear(!1),Le.redraw()))}}function ee(e){if(!(!e||Le.currentYearElement.min&&e<parseInt(Le.currentYearElement.min)||Le.currentYearElement.max&&e>parseInt(Le.currentYearElement.max))){var t=e,n=Le.currentYear!==t;Le.currentYear=t||Le.currentYear,Le.config.maxDate&&Le.currentYear===Le.config.maxDate.getFullYear()?Le.currentMonth=Math.min(Le.config.maxDate.getMonth(),Le.currentMonth):Le.config.minDate&&Le.currentYear===Le.config.minDate.getFullYear()&&(Le.currentMonth=Math.max(Le.config.minDate.getMonth(),Le.currentMonth)),n&&(Le.redraw(),Ce("onYearChange"))}}function te(t,n){void 0===n&&(n=!0);var i=Le.parseDate(t,void 0,n);if(Le.config.minDate&&i&&e(i,Le.config.minDate,void 0!==n?n:!Le.minDateHasTime)<0||Le.config.maxDate&&i&&e(i,Le.config.maxDate,void 0!==n?n:!Le.maxDateHasTime)>0)return!1;if(!Le.config.enable.length&&!Le.config.disable.length)return!0;if(void 0===i)return!1;for(var o=Le.config.enable.length>0,r=o?Le.config.enable:Le.config.disable,a=0,s=void 0;a<r.length;a++){if("function"==typeof(s=r[a])&&s(i))return o;if(s instanceof Date&&void 0!==i&&s.getTime()===i.getTime())return o;if("string"==typeof s&&void 0!==i){var l=Le.parseDate(s,void 0,!0);return l&&l.getTime()===i.getTime()?o:!o}if("object"==typeof s&&void 0!==i&&s.from&&s.to&&i.getTime()>=s.from.getTime()&&i.getTime()<=s.to.getTime())return o}return!o}function ne(e){var t=e.target===Le._input,n=Q(e.target),i=Le.config.allowInput,o=Le.isOpen&&(!i||!t),r=Le.config.inline&&t&&!i;if("Enter"===e.key&&t){if(i)return Le.setDate(Le._input.value,!0,e.target===Le.altInput?Le.config.altFormat:Le.config.dateFormat),e.target.blur();Le.open()}else if(n||o||r){var a=!!Le.timeContainer&&Le.timeContainer.contains(e.target);switch(e.key){case"Enter":a?De():de(e);break;case"Escape":e.preventDefault(),Le.close();break;case"Backspace":case"Delete":t&&!Le.config.allowInput&&Le.clear();break;case"ArrowLeft":case"ArrowRight":if(a)Le.hourElement&&Le.hourElement.focus();else if(e.preventDefault(),Le.daysContainer){var s="ArrowRight"===e.key?1:-1;e.ctrlKey?V(s,!0,void 0,!0):Y(e.target.$i,s)}break;case"ArrowUp":case"ArrowDown":e.preventDefault();var l="ArrowDown"===e.key?1:-1;Le.daysContainer&&void 0!==e.target.$i?e.ctrlKey?(ee(Le.currentYear-l),Y(e.target.$i,0)):a||Y(e.target.$i,7*l):Le.config.enableTime&&(!a&&Le.hourElement&&Le.hourElement.focus(),g(e),Le._debouncedChange());break;case"Tab":e.target===Le.hourElement?(e.preventDefault(),Le.minuteElement.select()):e.target===Le.minuteElement&&(Le.secondElement||Le.amPM)?(e.preventDefault(),void 0!==Le.secondElement?Le.secondElement.focus():void 0!==Le.amPM&&Le.amPM.focus()):e.target===Le.secondElement&&Le.amPM&&(e.preventDefault(),Le.amPM.focus())
;break;case"a":void 0!==Le.amPM&&e.target===Le.amPM&&(Le.amPM.textContent="AM",k(),De());break;case"p":void 0!==Le.amPM&&e.target===Le.amPM&&(Le.amPM.textContent="PM",k(),De())}Ce("onKeyDown",e)}}function ie(e){if(1===Le.selectedDates.length&&e.classList.contains("flatpickr-day")&&void 0!==Le.minRangeDate&&void 0!==Le.maxRangeDate){for(var t=e.dateObj,n=Le.parseDate(Le.selectedDates[0],void 0,!0),i=Math.min(t.getTime(),Le.selectedDates[0].getTime()),o=Math.max(t.getTime(),Le.selectedDates[0].getTime()),r=!1,a=i;a<o;a+=p.DAY)if(!te(new Date(a))){r=!0;break}for(var s=Le.days.childNodes[0].dateObj.getTime(),l=0;l<42;l++,s+=p.DAY)!function(a,s){var l=a<Le.minRangeDate.getTime()||a>Le.maxRangeDate.getTime(),c=Le.days.childNodes[s];if(l)return c.classList.add("notAllowed"),["inRange","startRange","endRange"].forEach(function(e){c.classList.remove(e)}),"continue";if(r&&!l)return"continue";["startRange","inRange","endRange","notAllowed"].forEach(function(e){c.classList.remove(e)});var u=Math.max(Le.minRangeDate.getTime(),i),d=Math.min(Le.maxRangeDate.getTime(),o);e.classList.add(t<Le.selectedDates[0]?"startRange":"endRange"),n<t&&a===n.getTime()?c.classList.add("startRange"):n>t&&a===n.getTime()&&c.classList.add("endRange"),a>=u&&a<=d&&c.classList.add("inRange")}(s,l)}}function oe(){!Le.isOpen||Le.config.static||Le.config.inline||ce()}function re(e,t){if(void 0===t&&(t=Le._input),Le.isMobile)return e&&(e.preventDefault(),e.target&&e.target.blur()),setTimeout(function(){void 0!==Le.mobileInput&&Le.mobileInput.click()},0),void Ce("onOpen");Le._input.disabled||Le.config.inline||(Le.isOpen=!0,Le.calendarContainer.classList.add("open"),ce(t),Le._input.classList.add("active"),Ce("onOpen"))}function ae(e){return function(t){var n=Le.config["_"+e+"Date"]=Le.parseDate(t),i=Le.config["_"+("min"===e?"max":"min")+"Date"];void 0!==n&&(Le["min"===e?"minDateHasTime":"maxDateHasTime"]=n.getHours()>0||n.getMinutes()>0||n.getSeconds()>0),Le.selectedDates&&(Le.selectedDates=Le.selectedDates.filter(function(e){return te(e)}),Le.selectedDates.length||"min"!==e||E(n),De()),Le.daysContainer&&(ue(),void 0!==n?Le.currentYearElement[e]=n.getFullYear().toString():Le.currentYearElement.removeAttribute(e),Le.currentYearElement.disabled=!!i&&void 0!==n&&i.getFullYear()===n.getFullYear())}}function se(){var e=["wrap","weekNumbers","allowInput","clickOpens","time_24hr","enableTime","noCalendar","altInput","shorthandCurrentMonth","inline","static","enableSeconds","disableMobile"],t=["onChange","onClose","onDayCreate","onDestroy","onKeyDown","onMonthChange","onOpen","onParseConfig","onReady","onValueUpdate","onYearChange"];Le.config=u({},S.defaultConfig);var n=u({},c,JSON.parse(JSON.stringify(l.dataset||{}))),i={};Object.defineProperty(Le.config,"enable",{get:function(){return Le.config._enable||[]},set:function(e){Le.config._enable=ge(e)}}),Object.defineProperty(Le.config,"disable",{get:function(){return Le.config._disable||[]},set:function(e){Le.config._disable=ge(e)}}),!n.dateFormat&&n.enableTime&&(i.dateFormat=n.noCalendar?"H:i"+(n.enableSeconds?":S":""):S.defaultConfig.dateFormat+" H:i"+(n.enableSeconds?":S":"")),n.altInput&&n.enableTime&&!n.altFormat&&(i.altFormat=n.noCalendar?"h:i"+(n.enableSeconds?":S K":" K"):S.defaultConfig.altFormat+" h:i"+(n.enableSeconds?":S":"")+" K"),Object.defineProperty(Le.config,"minDate",{get:function(){return Le.config._minDate},set:ae("min")}),Object.defineProperty(Le.config,"maxDate",{get:function(){return Le.config._maxDate},set:ae("max")}),Object.assign(Le.config,i,n);for(var o=0;o<e.length;o++)Le.config[e[o]]=!0===Le.config[e[o]]||"true"===Le.config[e[o]];for(var o=t.length;o--;)void 0!==Le.config[t[o]]&&(Le.config[t[o]]=b(Le.config[t[o]]||[]).map(h));for(var o=0;o<Le.config.plugins.length;o++){var r=Le.config.plugins[o](Le)||{};for(var a in r)~t.indexOf(a)?Le.config[a]=b(r[a]).map(h).concat(Le.config[a]):void 0===n[a]&&(Le.config[a]=r[a])}Le.isMobile=!Le.config.disableMobile&&!Le.config.inline&&"single"===Le.config.mode&&!Le.config.disable.length&&!Le.config.enable.length&&!Le.config.weekNumbers&&/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent),Ce("onParseConfig")}function le(){"object"!=typeof Le.config.locale&&void 0===S.l10ns[Le.config.locale]&&console.warn("flatpickr: invalid locale "+Le.config.locale),Le.l10n=u({},S.l10ns.default,"object"==typeof Le.config.locale?Le.config.locale:"default"!==Le.config.locale?S.l10ns[Le.config.locale]:void 0)}function ce(e){if(void 0===e&&(e=Le._positionElement),void 0!==Le.calendarContainer){var t=Le.calendarContainer.offsetHeight,n=Le.calendarContainer.offsetWidth,o=Le.config.position,r=e.getBoundingClientRect(),a=window.innerHeight-r.bottom,s="above"===o||"below"!==o&&a<t&&r.top>t,l=window.pageYOffset+r.top+(s?-t-2:e.offsetHeight+2);if(i(Le.calendarContainer,"arrowTop",!s),i(Le.calendarContainer,"arrowBottom",s),!Le.config.inline){var c=window.pageXOffset+r.left,u=window.document.body.offsetWidth-r.right,d=c+n>window.document.body.offsetWidth;i(Le.calendarContainer,"rightMost",d),Le.config.static||(Le.calendarContainer.style.top=l+"px",d?(Le.calendarContainer.style.left="auto",Le.calendarContainer.style.right=u+"px"):(Le.calendarContainer.style.left=c+"px",Le.calendarContainer.style.right="auto"))}}}function ue(){Le.config.noCalendar||Le.isMobile||(X(),Ee(),W())}function de(t){t.preventDefault(),t.stopPropagation();var n=function(e){return e.classList&&e.classList.contains("flatpickr-day")&&!e.classList.contains("disabled")&&!e.classList.contains("notAllowed")},i=a(t.target,n);if(void 0!==i){var o=i,r=Le.latestSelectedDateObj=new Date(o.dateObj.getTime()),s=r.getMonth()!==Le.currentMonth&&"range"!==Le.config.mode;if(Le.selectedDateElem=o,"single"===Le.config.mode)Le.selectedDates=[r];else if("multiple"===Le.config.mode){var l=Te(r);l?Le.selectedDates.splice(parseInt(l),1):Le.selectedDates.push(r)}else"range"===Le.config.mode&&(2===Le.selectedDates.length&&Le.clear(),Le.selectedDates.push(r),0!==e(r,Le.selectedDates[0],!0)&&Le.selectedDates.sort(function(e,t){return e.getTime()-t.getTime()}));if(k(),s){var c=Le.currentYear!==r.getFullYear();Le.currentYear=r.getFullYear(),Le.currentMonth=r.getMonth(),c&&Ce("onYearChange"),Ce("onMonthChange")}if(W(),Le.config.minDate&&Le.minDateHasTime&&Le.config.enableTime&&0===e(r,Le.config.minDate)&&E(Le.config.minDate),De(),Le.config.enableTime&&setTimeout(function(){return Le.showTimeInput=!0},50),"range"===Le.config.mode&&(1===Le.selectedDates.length?(ie(o),Le._hidePrevMonthArrow=Le._hidePrevMonthArrow||void 0!==Le.minRangeDate&&Le.minRangeDate>Le.days.childNodes[0].dateObj,Le._hideNextMonthArrow=Le._hideNextMonthArrow||void 0!==Le.maxRangeDate&&Le.maxRangeDate<new Date(Le.currentYear,Le.currentMonth+1,1)):Ee()),Ce("onChange"),s?_(function(){return Le.selectedDateElem&&Le.selectedDateElem.focus()}):Y(o.$i,0),void 0!==Le.hourElement&&setTimeout(function(){return void 0!==Le.hourElement&&Le.hourElement.select()},451),Le.config.closeOnSelect){var u="single"===Le.config.mode&&!Le.config.enableTime,d="range"===Le.config.mode&&2===Le.selectedDates.length&&!Le.config.enableTime;(u||d)&&Le.close()}}}function fe(e,t){null!==e&&"object"==typeof e?Object.assign(Le.config,e):Le.config[e]=t,Le.redraw(),j()}function pe(e,t){var n=[];if(e instanceof Array)n=e.map(function(e){return Le.parseDate(e,t)});else if(e instanceof Date||"number"==typeof e)n=[Le.parseDate(e,t)];else if("string"==typeof e)switch(Le.config.mode){case"single":n=[Le.parseDate(e,t)];break;case"multiple":n=e.split("; ").map(function(e){return Le.parseDate(e,t)});break;case"range":n=e.split(Le.l10n.rangeSeparator).map(function(e){return Le.parseDate(e,t)})}Le.selectedDates=n.filter(function(e){return e instanceof Date&&te(e,!1)}),Le.selectedDates.sort(function(e,t){return e.getTime()-t.getTime()})}function he(e,t,n){if(void 0===t&&(t=!1),void 0===n&&(n=void 0),0!==e&&!e)return Le.clear(t);pe(e,n),Le.showTimeInput=Le.selectedDates.length>0,Le.latestSelectedDateObj=Le.selectedDates[0],Le.redraw(),j(),E(),De(t),t&&Ce("onChange")}function ge(e){return e.map(function(e){return"string"==typeof e||"number"==typeof e||e instanceof Date?Le.parseDate(e,void 0,!0):e&&"object"==typeof e&&e.from&&e.to?{from:Le.parseDate(e.from,void 0),to:Le.parseDate(e.to,void 0)}:e}).filter(function(e){return e})}function me(){Le.selectedDates=[],Le.now=new Date;var e=Le.config.defaultDate||Le.input.value;e&&pe(e,Le.config.dateFormat);var t=Le.selectedDates.length?Le.selectedDates[0]:Le.config.minDate&&Le.config.minDate.getTime()>Le.now.getTime()?Le.config.minDate:Le.config.maxDate&&Le.config.maxDate.getTime()<Le.now.getTime()?Le.config.maxDate:Le.now;Le.currentYear=t.getFullYear(),Le.currentMonth=t.getMonth(),Le.selectedDates.length&&(Le.latestSelectedDateObj=Le.selectedDates[0]),Le.minDateHasTime=!!Le.config.minDate&&(Le.config.minDate.getHours()>0||Le.config.minDate.getMinutes()>0||Le.config.minDate.getSeconds()>0),Le.maxDateHasTime=!!Le.config.maxDate&&(Le.config.maxDate.getHours()>0||Le.config.maxDate.getMinutes()>0||Le.config.maxDate.getSeconds()>0),Object.defineProperty(Le,"showTimeInput",{get:function(){return Le._showTimeInput},set:function(e){Le._showTimeInput=e,Le.calendarContainer&&i(Le.calendarContainer,"showTimeInput",e),ce()}})}function ve(e,t){return void 0!==Le.config&&void 0!==Le.config.formatDate?Le.config.formatDate(e,t):t.split("").map(function(t,n,i){return C[t]&&"\\"!==i[n-1]?C[t](e,Le.l10n,Le.config):"\\"!==t?t:""}).join("")}function be(e,t,n){if(0===e||e){var i,o=e;if(e instanceof Date)i=new Date(e.getTime());else if("string"!=typeof e&&void 0!==e.toFixed)i=new Date(e);else if("string"==typeof e){var r=t||(Le.config||S.defaultConfig).dateFormat,a=String(e).trim();if("today"===a)i=new Date,n=!0;else if(/Z$/.test(a)||/GMT$/.test(a))i=new Date(e);else if(Le.config&&Le.config.parseDate)i=Le.config.parseDate(e,r);else{i=Le.config&&Le.config.noCalendar?new Date((new Date).setHours(0,0,0,0)):new Date((new Date).getFullYear(),0,1,0,0,0,0);for(var s=void 0,l=[],c=0,u=0,d="";c<r.length;c++){var f=r[c],p="\\"===f,h="\\"===r[c-1]||p;if(w[f]&&!h){d+=w[f];var g=new RegExp(d).exec(e);g&&(s=!0)&&l["Y"!==f?"push":"unshift"]({fn:x[f],val:g[++u]})}else p||(d+=".");l.forEach(function(e){var t=e.fn,n=e.val;return i=t(i,n,Le.l10n)||i})}i=s?i:void 0}}return i instanceof Date?(!0===n&&i.setHours(0,0,0,0),i):(console.warn("flatpickr: invalid date "+o),void console.info(Le.element))}}function ye(){if(Le.input=Le.config.wrap?l.querySelector("[data-input]"):l,!Le.input)return void console.warn("Error: invalid input element specified",Le.input);Le.input._type=Le.input.type,Le.input.type="text",Le.input.classList.add("flatpickr-input"),Le._input=Le.input,Le.config.altInput&&(Le.altInput=o(Le.input.nodeName,Le.input.className+" "+Le.config.altInputClass),Le._input=Le.altInput,Le.altInput.placeholder=Le.input.placeholder,Le.altInput.disabled=Le.input.disabled,Le.altInput.required=Le.input.required,Le.altInput.type="text",Le.input.type="hidden",!Le.config.static&&Le.input.parentNode&&Le.input.parentNode.insertBefore(Le.altInput,Le.input.nextSibling)),Le.config.allowInput||Le._input.setAttribute("readonly","readonly"),Le._positionElement=Le.config.positionElement||Le._input}function xe(){var e=Le.config.enableTime?Le.config.noCalendar?"time":"datetime-local":"date";Le.mobileInput=o("input",Le.input.className+" flatpickr-mobile"),Le.mobileInput.step=Le.input.getAttribute("step")||"any",Le.mobileInput.tabIndex=1,Le.mobileInput.type=e,Le.mobileInput.disabled=Le.input.disabled,Le.mobileInput.placeholder=Le.input.placeholder,Le.mobileFormatStr="datetime-local"===e?"Y-m-d\\TH:i:S":"date"===e?"Y-m-d":"H:i:S",Le.selectedDates.length&&(Le.mobileInput.defaultValue=Le.mobileInput.value=Le.formatDate(Le.selectedDates[0],Le.mobileFormatStr)),Le.config.minDate&&(Le.mobileInput.min=Le.formatDate(Le.config.minDate,"Y-m-d")),Le.config.maxDate&&(Le.mobileInput.max=Le.formatDate(Le.config.maxDate,"Y-m-d")),Le.input.type="hidden",void 0!==Le.altInput&&(Le.altInput.type="hidden");try{Le.input.parentNode&&Le.input.parentNode.insertBefore(Le.mobileInput,Le.input.nextSibling)}catch(e){}Le.mobileInput.addEventListener("change",function(e){Le.setDate(e.target.value,!1,Le.mobileFormatStr),Ce("onChange"),Ce("onClose")})}function we(){if(Le.isOpen)return Le.close();Le.open()}function Ce(e,t){var n=Le.config[e];if(void 0!==n&&n.length>0)for(var i=0;n[i]&&i<n.length;i++)n[i](Le.selectedDates,Le.input.value,Le,t);"onChange"===e&&(Le.input.dispatchEvent(Se("change")),Le.input.dispatchEvent(Se("input")))}function Se(e){var t=document.createEvent("Event");return t.initEvent(e,!0,!0),t}function Te(t){for(var n=0;n<Le.selectedDates.length;n++)if(0===e(Le.selectedDates[n],t))return""+n;return!1}function ke(t){return!("range"!==Le.config.mode||Le.selectedDates.length<2)&&(e(t,Le.selectedDates[0])>=0&&e(t,Le.selectedDates[1])<=0)}function Ee(){Le.config.noCalendar||Le.isMobile||!Le.monthNav||(Le.currentMonthElement.textContent=d(Le.currentMonth,Le.config.shorthandCurrentMonth,Le.l10n)+" ",Le.currentYearElement.value=Le.currentYear.toString(),Le._hidePrevMonthArrow=void 0!==Le.config.minDate&&(Le.currentYear===Le.config.minDate.getFullYear()?Le.currentMonth<=Le.config.minDate.getMonth():Le.currentYear<Le.config.minDate.getFullYear()),Le._hideNextMonthArrow=void 0!==Le.config.maxDate&&(Le.currentYear===Le.config.maxDate.getFullYear()?Le.currentMonth+1>Le.config.maxDate.getMonth():Le.currentYear>Le.config.maxDate.getFullYear()))}function De(e){if(void 0===e&&(e=!0),!Le.selectedDates.length)return Le.clear(e);void 0!==Le.mobileInput&&Le.mobileFormatStr&&(Le.mobileInput.value=void 0!==Le.latestSelectedDateObj?Le.formatDate(Le.latestSelectedDateObj,Le.mobileFormatStr):"");var t="range"!==Le.config.mode?Le.config.conjunction:Le.l10n.rangeSeparator;Le.input.value=Le.selectedDates.map(function(e){return Le.formatDate(e,Le.config.dateFormat)}).join(t),void 0!==Le.altInput&&(Le.altInput.value=Le.selectedDates.map(function(e){return Le.formatDate(e,Le.config.altFormat)}).join(t)),!1!==e&&Ce("onValueUpdate")}function Me(e){e.preventDefault();var t=Le.currentYearElement.parentNode&&Le.currentYearElement.parentNode.contains(e.target);if(e.target===Le.currentMonthElement||t){var i=n(e);t?(ee(Le.currentYear+i),e.target.value=Le.currentYear.toString()):Le.changeMonth(i,!0,!1)}}function Pe(e){var t=Le.prevMonthNav.contains(e.target),n=Le.nextMonthNav.contains(e.target);t||n?V(t?-1:1):e.target===Le.currentYearElement?(e.preventDefault(),Le.currentYearElement.select()):"arrowUp"===e.target.className?Le.changeYear(Le.currentYear+1):"arrowDown"===e.target.className&&Le.changeYear(Le.currentYear-1)}function Ae(e){e.preventDefault();var t="keydown"===e.type,n=e.target;void 0!==Le.amPM&&e.target===Le.amPM&&(Le.amPM.textContent=Le.l10n.amPM["AM"===Le.amPM.textContent?1:0]);var i=Number(n.min),o=Number(n.max),r=Number(n.step),a=parseInt(n.value,10),s=e.delta||(t?38===e.which?1:-1:Math.max(-1,Math.min(1,e.wheelDelta||-e.deltaY))||0),l=a+r*s;if(void 0!==n.value&&2===n.value.length){var c=n===Le.hourElement,u=n===Le.minuteElement;l<i?(l=o+l+v(!c)+(v(c)&&v(!Le.amPM)),u&&H(void 0,-1,Le.hourElement)):l>o&&(l=n===Le.hourElement?l-o-v(!Le.amPM):i,u&&H(void 0,1,Le.hourElement)),Le.amPM&&c&&(1===r?l+a===23:Math.abs(l-a)>r)&&(Le.amPM.textContent="PM"===Le.amPM.textContent?"AM":"PM"),n.value=m(l)}}var Le={};return Le.parseDate=be,Le.formatDate=ve,Le._animationLoop=[],Le._handlers=[],Le._bind=P,Le._setHoursFromDate=E,Le.changeMonth=V,Le.changeYear=ee,Le.clear=G,Le.close=K,Le._createElement=o,Le.destroy=Z,Le.isEnabled=te,Le.jumpToDate=j,Le.open=re,Le.redraw=ue,Le.set=fe,Le.setDate=he,Le.toggle=we,function(){Le.element=Le.input=l,Le.isOpen=!1,se(),le(),ye(),me(),f(),Le.isMobile||R(),O(),(Le.selectedDates.length||Le.config.noCalendar)&&(Le.config.enableTime&&E(Le.config.noCalendar?Le.latestSelectedDateObj||Le.config.minDate:void 0),De(!1)),Le.showTimeInput=Le.selectedDates.length>0||Le.config.noCalendar,void 0!==Le.weekWrapper&&void 0!==Le.daysContainer&&(Le.calendarContainer.style.width=Le.daysContainer.offsetWidth+Le.weekWrapper.offsetWidth+"px"),Le.isMobile||ce(),Ce("onReady")}(),Le}function c(e,t){for(var n=Array.prototype.slice.call(e),i=[],o=0;o<n.length;o++){var r=n[o];try{if(null!==r.getAttribute("data-fp-omit"))continue;void 0!==r._flatpickr&&(r._flatpickr.destroy(),r._flatpickr=void 0),r._flatpickr=l(r,t||{}),i.push(r._flatpickr)}catch(e){console.warn(e,e.stack)}}return 1===i.length?i[0]:i}var u=Object.assign||function(e){for(var t,n=1,i=arguments.length;n<i;n++){t=arguments[n];for(var o in t)Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o])}return e},d=function(e,t,n){return n.months[t?"shorthand":"longhand"][e]},f=function(e){var t=new Date(e.getFullYear(),0,1);return Math.ceil(((e.getTime()-t.getTime())/864e5+t.getDay()+1)/7)},p={DAY:864e5},h={_disable:[],_enable:[],allowInput:!1,altFormat:"F j, Y",altInput:!1,altInputClass:"form-control input",animate:"object"==typeof window&&-1===window.navigator.userAgent.indexOf("MSIE"),ariaDateFormat:"F j, Y",clickOpens:!0,closeOnSelect:!0,conjunction:", ",dateFormat:"Y-m-d",defaultHour:12,defaultMinute:0,defaultSeconds:0,disable:[],disableMobile:!1,enable:[],enableSeconds:!1,enableTime:!1,getWeek:f,hourIncrement:1,ignoredFocusElements:[],inline:!1,locale:"default",minuteIncrement:5,mode:"single",nextArrow:"<svg version='1.1' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink' viewBox='0 0 17 17'><g></g><path d='M13.207 8.472l-7.854 7.854-0.707-0.707 7.146-7.146-7.146-7.148 0.707-0.707 7.854 7.854z' /></svg>",noCalendar:!1,onChange:[],onClose:[],onDayCreate:[],onDestroy:[],onKeyDown:[],onMonthChange:[],onOpen:[],onParseConfig:[],onReady:[],onValueUpdate:[],onYearChange:[],plugins:[],position:"auto",positionElement:void 0,prevArrow:"<svg version='1.1' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink' viewBox='0 0 17 17'><g></g><path d='M5.207 8.471l7.146 7.147-0.707 0.707-7.853-7.854 7.854-7.853 0.707 0.707-7.147 7.146z' /></svg>",shorthandCurrentMonth:!1,static:!1,time_24hr:!1,weekNumbers:!1,wrap:!1},g={weekdays:{shorthand:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],longhand:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]},months:{shorthand:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],longhand:["January","February","March","April","May","June","July","August","September","October","November","December"]},daysInMonth:[31,28,31,30,31,30,31,31,30,31,30,31],firstDayOfWeek:0,ordinal:function(e){var t=e%100;if(t>3&&t<21)return"th";switch(t%10){case 1:return"st";case 2:return"nd";case 3:return"rd";default:return"th"}},rangeSeparator:" to ",weekAbbreviation:"Wk",scrollTitle:"Scroll to increment",toggleTitle:"Click to toggle",amPM:["AM","PM"]},m=function(e){return("0"+e).slice(-2)},v=function(e){return!0===e?1:0},b=function(e){return e instanceof Array?e:[e]},y=function(){},x={D:y,F:function(e,t,n){e.setMonth(n.months.longhand.indexOf(t))},G:function(e,t){e.setHours(parseFloat(t))},H:function(e,t){e.setHours(parseFloat(t))},J:function(e,t){e.setDate(parseFloat(t))},K:function(e,t){e.setHours(e.getHours()%12+12*v(/pm/i.test(t)))},M:function(e,t,n){e.setMonth(n.months.shorthand.indexOf(t))},S:function(e,t){e.setSeconds(parseFloat(t))},U:function(e,t){return new Date(1e3*parseFloat(t))},W:function(e,t){var n=parseInt(t);return new Date(e.getFullYear(),0,2+7*(n-1),0,0,0,0)},Y:function(e,t){e.setFullYear(parseFloat(t))},Z:function(e,t){return new Date(t)},d:function(e,t){e.setDate(parseFloat(t))},h:function(e,t){e.setHours(parseFloat(t))},i:function(e,t){e.setMinutes(parseFloat(t))},j:function(e,t){e.setDate(parseFloat(t))},l:y,m:function(e,t){e.setMonth(parseFloat(t)-1)},n:function(e,t){e.setMonth(parseFloat(t)-1)},s:function(e,t){e.setSeconds(parseFloat(t))},w:y,y:function(e,t){e.setFullYear(2e3+parseFloat(t))}},w={D:"(\\w+)",F:"(\\w+)",G:"(\\d\\d|\\d)",H:"(\\d\\d|\\d)",J:"(\\d\\d|\\d)\\w+",K:"(am|AM|Am|aM|pm|PM|Pm|pM)",M:"(\\w+)",S:"(\\d\\d|\\d)",U:"(.+)",W:"(\\d\\d|\\d)",Y:"(\\d{4})",Z:"(.+)",d:"(\\d\\d|\\d)",h:"(\\d\\d|\\d)",i:"(\\d\\d|\\d)",j:"(\\d\\d|\\d)",l:"(\\w+)",m:"(\\d\\d|\\d)",n:"(\\d\\d|\\d)",s:"(\\d\\d|\\d)",w:"(\\d\\d|\\d)",y:"(\\d{2})"},C={Z:function(e){return e.toISOString()},D:function(e,t,n){return t.weekdays.shorthand[C.w(e,t,n)]},F:function(e,t,n){return d(C.n(e,t,n)-1,!1,t)},G:function(e,t,n){return m(C.h(e,t,n))},H:function(e){return m(e.getHours())},J:function(e,t){return void 0!==t.ordinal?e.getDate()+t.ordinal(e.getDate()):e.getDate()},K:function(e){return e.getHours()>11?"PM":"AM"},M:function(e,t){return d(e.getMonth(),!0,t)},S:function(e){return m(e.getSeconds())},U:function(e){return e.getTime()/1e3},W:function(e,t,n){return n.getWeek(e)},Y:function(e){return e.getFullYear()},d:function(e){return m(e.getDate())},h:function(e){return e.getHours()%12?e.getHours()%12:12},i:function(e){return m(e.getMinutes())},j:function(e){return e.getDate()},l:function(e,t){return t.weekdays.longhand[e.getDay()]},m:function(e){return m(e.getMonth()+1)},n:function(e){return e.getMonth()+1},s:function(e){return e.getSeconds()},w:function(e){return e.getDay()},y:function(e){return String(e.getFullYear()).substring(2)}};"function"!=typeof Object.assign&&(Object.assign=function(e){for(var t=[],n=1;n<arguments.length;n++)t[n-1]=arguments[n];if(!e)throw TypeError("Cannot convert undefined or null to object");for(var i=0,o=t;i<o.length;i++){var r=o[i];!function(t){t&&Object.keys(t).forEach(function(n){return e[n]=t[n]})}(r)}return e}),"undefined"!=typeof HTMLElement&&(HTMLCollection.prototype.flatpickr=NodeList.prototype.flatpickr=function(e){return c(this,e)},HTMLElement.prototype.flatpickr=function(e){return c([this],e)});var S;return S=function(e,t){return e instanceof NodeList?c(e,t):"string"==typeof e?c(window.document.querySelectorAll(e),t):c([e],t)},"object"==typeof window&&(window.flatpickr=S),S.defaultConfig=h,S.l10ns={en:u({},g),default:u({},g)},S.localize=function(e){S.l10ns.default=u({},S.l10ns.default,e)},S.setDefaults=function(e){S.defaultConfig=u({},S.defaultConfig,e)},"undefined"!=typeof jQuery&&(jQuery.fn.flatpickr=function(e){return c(this,e)}),Date.prototype.fp_incr=function(e){return new Date(this.getFullYear(),this.getMonth(),this.getDate()+("string"==typeof e?parseInt(e,10):e))},S}),function(e,t){"object"==typeof exports&&"undefined"!=typeof module?t(exports):"function"==typeof define&&define.amd?define(["exports"],t):t(e.ru={})}(this,function(e){"use strict";var t="undefined"!=typeof window&&void 0!==window.flatpickr?window.flatpickr:{l10ns:{}},n={firstDayOfWeek:1,weekdays:{shorthand:["Вс","Пн","Вт","Ср","Чт","Пт","Сб"],longhand:["Воскресенье","Понедельник","Вторник","Среда","Четверг","Пятница","Суббота"]},months:{shorthand:["Янв","Фев","Март","Апр","Май","Июнь","Июль","Авг","Сен","Окт","Ноя","Дек"],longhand:["Январь","Февраль","Март","Апрель","Май","Июнь","Июль","Август","Сентябрь","Октябрь","Ноябрь","Декабрь"]}};t.l10ns.ru=n;var i=t.l10ns;e.Russian=n,e.default=i,Object.defineProperty(e,"__esModule",{value:!0})}),function(e,t){"object"==typeof exports&&"undefined"!=typeof module?module.exports=t():"function"==typeof define&&define.amd?define(t):e.tippy=t()}(this,function(){"use strict";function e(e){He.forEach(function(t){var n=t.popper,i=t.tippyInstance,o=t.settings,r=o.appendTo,a=o.hideOnClick,s=o.trigger;if(r.contains(n)){var l=!0===a||-1!==s.indexOf("focus"),c=!e||n!==e.popper;l&&c&&i.hide(n)}})}function t(e,t){return(Element.prototype.closest||function(e){for(var t=this;t;){if(Be.call(t,e))return t;t=t.parentElement}}).call(e,t)}function n(e,t){return Array.prototype.find?e.find(t):e.filter(t)[0]}function i(){var i=function(){Fe.touch=!0,Fe.iOS()&&document.body.classList.add("tippy-touch"),Fe.dynamicInputDetection&&window.performance&&document.addEventListener("mousemove",o)},o=function(){var e=void 0;return function(){var t=performance.now();t-e<20&&(Fe.touch=!1,document.removeEventListener("mousemove",o),Fe.iOS()||document.body.classList.remove("tippy-touch")),e=t}}(),r=function(i){if(!(i.target instanceof Element))return e();var o=t(i.target,Re.TOOLTIPPED_EL),r=t(i.target,Re.POPPER);if(r){if(n(He,function(e){return e.popper===r}).settings.interactive)return}if(o){var a=n(He,function(e){return e.el===o}),s=a.settings,l=s.hideOnClick,c=s.multiple,u=s.trigger;if(!c&&Fe.touch||!c&&-1!==u.indexOf("click"))return e(a);if(!0!==l||-1!==u.indexOf("click"))return}!t(i.target,Re.CONTROLLER)&&document.querySelector(Re.POPPER)&&e()},a=function(e){var t=document,n=t.activeElement;n&&n.blur&&Be.call(n,Re.TOOLTIPPED_EL)&&n.blur()};document.addEventListener("click",r),document.addEventListener("touchstart",i),window.addEventListener("blur",a),!Fe.SUPPORTS_TOUCH&&(navigator.maxTouchPoints>0||navigator.msMaxTouchPoints>0)&&document.addEventListener("pointerdown",i)}function o(){return!o.done&&(o.done=!0,i(),!0)}function r(e){window.requestAnimationFrame(function(){setTimeout(e,0)})}function a(e){for(var t=[!1,"webkit"],n=e.charAt(0).toUpperCase()+e.slice(1),i=0;i<t.length;i++){var o=t[i],r=o?""+o+n:e;if(void 0!==window.document.body.style[r])return r}return null}function s(e,t){return Array.prototype.findIndex?e.findIndex(t):e.indexOf(n(e,t))}function l(e){var t=e.getAttribute("title");t&&e.setAttribute("data-original-title",t),e.removeAttribute("title")}function c(e){var t=e.getBoundingClientRect();return t.top>=0&&t.left>=0&&t.bottom<=(window.innerHeight||document.documentElement.clientHeight)&&t.right<=(window.innerWidth||document.documentElement.clientWidth)}function u(e,t){t?window.getComputedStyle(t)[a("transform")]:window.getComputedStyle(e).opacity}function d(e,t){e.forEach(function(e){e&&t(e.classList)})}function f(e){return{tooltip:e.querySelector(Re.TOOLTIP),circle:e.querySelector(Re.CIRCLE),content:e.querySelector(Re.CONTENT)}}function p(e,t){e.forEach(function(e){if(e){var n=Be.call(e,Re.CONTENT),i=n?Math.round(t/1.3):t;e.style[a("transitionDuration")]=i+"ms"}})}function h(e){return"visible"===e.style.visibility}function g(){}function m(e){return!!e&&"[object Object]"===e.toString()}function v(e){return e.replace(/-.+/,"")}function b(e){var t=this,i=n(He,function(e){return e.el===t}),o=i.popper,r=i.settings.offset,s=v(o.getAttribute("x-placement")),l=Math.round(o.offsetWidth/2),c=Math.round(o.offsetHeight/2),u=document.documentElement.offsetWidth||document.body.offsetWidth,d=e.pageX,f=e.pageY,p=void 0,h=void 0;switch(s){case"top":p=d-l+r,h=f-2*c;break;case"bottom":p=d-l+r,h=f+10;break;case"left":p=d-2*l,h=f-c+r;break;case"right":p=d+5,h=f-c+r}var g=d+5+l+r>u,m=d-5-l+r<0;"top"!==s&&"bottom"!==s||(g&&(p=u-5-2*l),m&&(p=5)),o.style[a("transform")]="translate3d("+p+"px, "+h+"px, 0)"}function y(e){if(e instanceof Element||m(e))return[e];if(e instanceof NodeList)return[].slice.call(e);if(Array.isArray(e))return e;try{return[].slice.call(document.querySelectorAll(e))}catch(e){return[]}}function x(e,t,n){if(!t)return n();var i=f(e.popper),o=i.tooltip,r=!1,a=function(e){e.target!==o||r||(r=!0,n())};o.addEventListener("webkitTransitionEnd",a),o.addEventListener("transitionend",a),clearTimeout(e._transitionendTimeout),e._transitionendTimeout=setTimeout(function(){r||n()},t)}function w(e){var t=!1,n=0,i=document.createElement("span");return new MutationObserver(function(){e(),t=!1}).observe(i,{attributes:!0}),function(){t||(t=!0,i.setAttribute("x-index",n),n+=1)}}function C(e){var t=!1;return function(){t||(t=!0,setTimeout(function(){t=!1,e()},Ve))}}function S(e){var t={};return e&&"[object Function]"===t.toString.call(e)}function T(e,t){if(1!==e.nodeType)return[];var n=window.getComputedStyle(e,null);return t?n[t]:n}function k(e){return"HTML"===e.nodeName?e:e.parentNode||e.host}function E(e){if(!e||-1!==["HTML","BODY","#document"].indexOf(e.nodeName))return window.document.body;var t=T(e),n=t.overflow,i=t.overflowX;return/(auto|scroll)/.test(n+t.overflowY+i)?e:E(k(e))}function D(e){var t=e&&e.offsetParent,n=t&&t.nodeName;return n&&"BODY"!==n&&"HTML"!==n?-1!==["TD","TABLE"].indexOf(t.nodeName)&&"static"===T(t,"position")?D(t):t:window.document.documentElement}function M(e){var t=e.nodeName;return"BODY"!==t&&("HTML"===t||D(e.firstElementChild)===e)}function P(e){return null!==e.parentNode?P(e.parentNode):e}function A(e,t){if(!(e&&e.nodeType&&t&&t.nodeType))return window.document.documentElement;var n=e.compareDocumentPosition(t)&Node.DOCUMENT_POSITION_FOLLOWING,i=n?e:t,o=n?t:e,r=document.createRange();r.setStart(i,0),r.setEnd(o,0);var a=r.commonAncestorContainer;if(e!==a&&t!==a||i.contains(o))return M(a)?a:D(a);var s=P(e);return s.host?A(s.host,t):A(e,P(t).host)}function L(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"top",n="top"===t?"scrollTop":"scrollLeft",i=e.nodeName;if("BODY"===i||"HTML"===i){var o=window.document.documentElement;return(window.document.scrollingElement||o)[n]}return e[n]}function O(e,t){var n=arguments.length>2&&void 0!==arguments[2]&&arguments[2],i=L(t,"top"),o=L(t,"left"),r=n?-1:1;return e.top+=i*r,e.bottom+=i*r,e.left+=o*r,e.right+=o*r,e}function N(e,t){var n="x"===t?"Left":"Top",i="Left"===n?"Right":"Bottom";return+e["border"+n+"Width"].split("px")[0]+ +e["border"+i+"Width"].split("px")[0]}function I(e,t,n,i,o){return Math.max(t["offset"+e],o?t["scroll"+e]:0,n["client"+e],n["offset"+e],o?n["scroll"+e]:0,Je()?n["offset"+e]+i["margin"+("Height"===e?"Top":"Left")]+i["margin"+("Height"===e?"Bottom":"Right")]:0)}function $(){var e=!(arguments.length>0&&void 0!==arguments[0])||arguments[0],t=window.document.body,n=window.document.documentElement,i=Je()&&window.getComputedStyle(n);return{height:I("Height",t,n,i,e),width:I("Width",t,n,i,e)}}function j(e){return it({},e,{right:e.left+e.width,bottom:e.top+e.height})}function F(e){var t={};if(Je())try{t=e.getBoundingClientRect();var n=L(e,"top"),i=L(e,"left");t.top+=n,t.left+=i,t.bottom+=n,t.right+=i}catch(e){}else t=e.getBoundingClientRect();var o={left:t.left,top:t.top,width:t.right-t.left,height:t.bottom-t.top},r="HTML"===e.nodeName?$():{},a=r.width||e.clientWidth||o.right-o.left,s=r.height||e.clientHeight||o.bottom-o.top,l=e.offsetWidth-a,c=e.offsetHeight-s;if(l||c){var u=T(e);l-=N(u,"x"),c-=N(u,"y"),o.width-=l,o.height-=c}return j(o)}function H(e,t){var n=Je(),i="HTML"===t.nodeName,o=F(e),r=F(t),a=E(e),s=T(t),l=+s.borderTopWidth.split("px")[0],c=+s.borderLeftWidth.split("px")[0],u=j({top:o.top-r.top-l,left:o.left-r.left-c,width:o.width,height:o.height});if(u.marginTop=0,u.marginLeft=0,!n&&i){var d=+s.marginTop.split("px")[0],f=+s.marginLeft.split("px")[0];u.top-=l-d,u.bottom-=l-d,u.left-=c-f,u.right-=c-f,u.marginTop=d,u.marginLeft=f}return(n?t.contains(a):t===a&&"BODY"!==a.nodeName)&&(u=O(u,t)),u}function R(e){var t=window.document.documentElement,n=H(e,t),i=Math.max(t.clientWidth,window.innerWidth||0),o=Math.max(t.clientHeight,window.innerHeight||0),r=L(t),a=L(t,"left");return j({top:r-n.top+n.marginTop,left:a-n.left+n.marginLeft,width:i,height:o})}function q(e){var t=e.nodeName;return"BODY"!==t&&"HTML"!==t&&("fixed"===T(e,"position")||q(k(e)))}function Y(e,t,n,i){var o={top:0,left:0},r=A(e,t);if("viewport"===i)o=R(r);else{var a=void 0;"scrollParent"===i?(a=E(k(e)),"BODY"===a.nodeName&&(a=window.document.documentElement)):a="window"===i?window.document.documentElement:i;var s=H(a,r);if("HTML"!==a.nodeName||q(r))o=s;else{var l=$(!1),c=l.height,u=l.width;o.top+=s.top-s.marginTop,o.bottom=c+s.top,o.left+=s.left-s.marginLeft,o.right=u+s.left}}return o.left+=n,o.top+=n,o.right-=n,o.bottom-=n,o}function _(e){return e.width*e.height}function W(e,t,n,i,o){var r=arguments.length>5&&void 0!==arguments[5]?arguments[5]:0;if(-1===e.indexOf("auto"))return e;var a=Y(n,i,r,o),s={top:{width:a.width,height:t.top-a.top},right:{width:a.right-t.right,height:a.height},bottom:{width:a.width,height:a.bottom-t.bottom},left:{width:t.left-a.left,height:a.height}},l=Object.keys(s).map(function(e){return it({key:e},s[e],{area:_(s[e])})}).sort(function(e,t){return t.area-e.area
}),c=l.filter(function(e){var t=e.width,i=e.height;return t>=n.clientWidth&&i>=n.clientHeight}),u=c.length>0?c[0].key:l[0].key,d=e.split("-")[1];return u+(d?"-"+d:"")}function B(e,t,n){return H(n,A(t,n))}function z(e){var t=window.getComputedStyle(e),n=parseFloat(t.marginTop)+parseFloat(t.marginBottom),i=parseFloat(t.marginLeft)+parseFloat(t.marginRight);return{width:e.offsetWidth+i,height:e.offsetHeight+n}}function X(e){var t={left:"right",right:"left",bottom:"top",top:"bottom"};return e.replace(/left|right|bottom|top/g,function(e){return t[e]})}function U(e,t,n){n=n.split("-")[0];var i=z(e),o={width:i.width,height:i.height},r=-1!==["right","left"].indexOf(n),a=r?"top":"left",s=r?"left":"top",l=r?"height":"width",c=r?"width":"height";return o[a]=t[a]+t[l]/2-i[l]/2,o[s]=n===s?t[s]-i[c]:t[X(s)],o}function V(e,t){return Array.prototype.find?e.find(t):e.filter(t)[0]}function G(e,t,n){if(Array.prototype.findIndex)return e.findIndex(function(e){return e[t]===n});var i=V(e,function(e){return e[t]===n});return e.indexOf(i)}function K(e,t,n){return(void 0===n?e:e.slice(0,G(e,"name",n))).forEach(function(e){e.function&&console.warn("`modifier.function` is deprecated, use `modifier.fn`!");var n=e.function||e.fn;e.enabled&&S(n)&&(t.offsets.popper=j(t.offsets.popper),t.offsets.reference=j(t.offsets.reference),t=n(t,e))}),t}function Z(){if(!this.state.isDestroyed){var e={instance:this,styles:{},arrowStyles:{},attributes:{},flipped:!1,offsets:{}};e.offsets.reference=B(this.state,this.popper,this.reference),e.placement=W(this.options.placement,e.offsets.reference,this.popper,this.reference,this.options.modifiers.flip.boundariesElement,this.options.modifiers.flip.padding),e.originalPlacement=e.placement,e.offsets.popper=U(this.popper,e.offsets.reference,e.placement),e.offsets.popper.position="absolute",e=K(this.modifiers,e),this.state.isCreated?this.options.onUpdate(e):(this.state.isCreated=!0,this.options.onCreate(e))}}function Q(e,t){return e.some(function(e){var n=e.name;return e.enabled&&n===t})}function J(e){for(var t=[!1,"ms","Webkit","Moz","O"],n=e.charAt(0).toUpperCase()+e.slice(1),i=0;i<t.length-1;i++){var o=t[i],r=o?""+o+n:e;if(void 0!==window.document.body.style[r])return r}return null}function ee(){return this.state.isDestroyed=!0,Q(this.modifiers,"applyStyle")&&(this.popper.removeAttribute("x-placement"),this.popper.style.left="",this.popper.style.position="",this.popper.style.top="",this.popper.style[J("transform")]=""),this.disableEventListeners(),this.options.removeOnDestroy&&this.popper.parentNode.removeChild(this.popper),this}function te(e,t,n,i){var o="BODY"===e.nodeName,r=o?window:e;r.addEventListener(t,n,{passive:!0}),o||te(E(r.parentNode),t,n,i),i.push(r)}function ne(e,t,n,i){n.updateBound=i,window.addEventListener("resize",n.updateBound,{passive:!0});var o=E(e);return te(o,"scroll",n.updateBound,n.scrollParents),n.scrollElement=o,n.eventsEnabled=!0,n}function ie(){this.state.eventsEnabled||(this.state=ne(this.reference,this.options,this.state,this.scheduleUpdate))}function oe(e,t){return window.removeEventListener("resize",t.updateBound),t.scrollParents.forEach(function(e){e.removeEventListener("scroll",t.updateBound)}),t.updateBound=null,t.scrollParents=[],t.scrollElement=null,t.eventsEnabled=!1,t}function re(){this.state.eventsEnabled&&(window.cancelAnimationFrame(this.scheduleUpdate),this.state=oe(this.reference,this.state))}function ae(e){return""!==e&&!isNaN(parseFloat(e))&&isFinite(e)}function se(e,t){Object.keys(t).forEach(function(n){var i="";-1!==["width","height","top","right","bottom","left"].indexOf(n)&&ae(t[n])&&(i="px"),e.style[n]=t[n]+i})}function le(e,t){Object.keys(t).forEach(function(n){!1!==t[n]?e.setAttribute(n,t[n]):e.removeAttribute(n)})}function ce(e){return se(e.instance.popper,e.styles),le(e.instance.popper,e.attributes),e.arrowElement&&Object.keys(e.arrowStyles).length&&se(e.arrowElement,e.arrowStyles),e}function ue(e,t,n,i,o){var r=B(o,t,e),a=W(n.placement,r,t,e,n.modifiers.flip.boundariesElement,n.modifiers.flip.padding);return t.setAttribute("x-placement",a),se(t,{position:"absolute"}),n}function de(e,t){var n=t.x,i=t.y,o=e.offsets.popper,r=V(e.instance.modifiers,function(e){return"applyStyle"===e.name}).gpuAcceleration;void 0!==r&&console.warn("WARNING: `gpuAcceleration` option moved to `computeStyle` modifier and will not be supported in future versions of Popper.js!");var a=void 0!==r?r:t.gpuAcceleration,s=D(e.instance.popper),l=F(s),c={position:o.position},u={left:Math.floor(o.left),top:Math.floor(o.top),bottom:Math.floor(o.bottom),right:Math.floor(o.right)},d="bottom"===n?"top":"bottom",f="right"===i?"left":"right",p=J("transform"),h=void 0,g=void 0;if(g="bottom"===d?-l.height+u.bottom:u.top,h="right"===f?-l.width+u.right:u.left,a&&p)c[p]="translate3d("+h+"px, "+g+"px, 0)",c[d]=0,c[f]=0,c.willChange="transform";else{var m="bottom"===d?-1:1,v="right"===f?-1:1;c[d]=g*m,c[f]=h*v,c.willChange=d+", "+f}var b={"x-placement":e.placement};return e.attributes=it({},b,e.attributes),e.styles=it({},c,e.styles),e.arrowStyles=it({},e.offsets.arrow,e.arrowStyles),e}function fe(e,t,n){var i=V(e,function(e){return e.name===t}),o=!!i&&e.some(function(e){return e.name===n&&e.enabled&&e.order<i.order});if(!o){var r="`"+t+"`",a="`"+n+"`";console.warn(a+" modifier is required by "+r+" modifier in order to work, be sure to include it before "+r+"!")}return o}function pe(e,t){if(!fe(e.instance.modifiers,"arrow","keepTogether"))return e;var n=t.element;if("string"==typeof n){if(!(n=e.instance.popper.querySelector(n)))return e}else if(!e.instance.popper.contains(n))return console.warn("WARNING: `arrow.element` must be child of its popper element!"),e;var i=e.placement.split("-")[0],o=e.offsets,r=o.popper,a=o.reference,s=-1!==["left","right"].indexOf(i),l=s?"height":"width",c=s?"Top":"Left",u=c.toLowerCase(),d=s?"left":"top",f=s?"bottom":"right",p=z(n)[l];a[f]-p<r[u]&&(e.offsets.popper[u]-=r[u]-(a[f]-p)),a[u]+p>r[f]&&(e.offsets.popper[u]+=a[u]+p-r[f]);var h=a[u]+a[l]/2-p/2,g=T(e.instance.popper,"margin"+c).replace("px",""),m=h-j(e.offsets.popper)[u]-g;return m=Math.max(Math.min(r[l]-p,m),0),e.arrowElement=n,e.offsets.arrow={},e.offsets.arrow[u]=Math.round(m),e.offsets.arrow[d]="",e}function he(e){return"end"===e?"start":"start"===e?"end":e}function ge(e){var t=arguments.length>1&&void 0!==arguments[1]&&arguments[1],n=rt.indexOf(e),i=rt.slice(n+1).concat(rt.slice(0,n));return t?i.reverse():i}function me(e,t){if(Q(e.instance.modifiers,"inner"))return e;if(e.flipped&&e.placement===e.originalPlacement)return e;var n=Y(e.instance.popper,e.instance.reference,t.padding,t.boundariesElement),i=e.placement.split("-")[0],o=X(i),r=e.placement.split("-")[1]||"",a=[];switch(t.behavior){case at.FLIP:a=[i,o];break;case at.CLOCKWISE:a=ge(i);break;case at.COUNTERCLOCKWISE:a=ge(i,!0);break;default:a=t.behavior}return a.forEach(function(s,l){if(i!==s||a.length===l+1)return e;i=e.placement.split("-")[0],o=X(i);var c=e.offsets.popper,u=e.offsets.reference,d=Math.floor,f="left"===i&&d(c.right)>d(u.left)||"right"===i&&d(c.left)<d(u.right)||"top"===i&&d(c.bottom)>d(u.top)||"bottom"===i&&d(c.top)<d(u.bottom),p=d(c.left)<d(n.left),h=d(c.right)>d(n.right),g=d(c.top)<d(n.top),m=d(c.bottom)>d(n.bottom),v="left"===i&&p||"right"===i&&h||"top"===i&&g||"bottom"===i&&m,b=-1!==["top","bottom"].indexOf(i),y=!!t.flipVariations&&(b&&"start"===r&&p||b&&"end"===r&&h||!b&&"start"===r&&g||!b&&"end"===r&&m);(f||v||y)&&(e.flipped=!0,(f||v)&&(i=a[l+1]),y&&(r=he(r)),e.placement=i+(r?"-"+r:""),e.offsets.popper=it({},e.offsets.popper,U(e.instance.popper,e.offsets.reference,e.placement)),e=K(e.instance.modifiers,e,"flip"))}),e}function ve(e){var t=e.offsets,n=t.popper,i=t.reference,o=e.placement.split("-")[0],r=Math.floor,a=-1!==["top","bottom"].indexOf(o),s=a?"right":"bottom",l=a?"left":"top",c=a?"width":"height";return n[s]<r(i[l])&&(e.offsets.popper[l]=r(i[l])-n[c]),n[l]>r(i[s])&&(e.offsets.popper[l]=r(i[s])),e}function be(e,t,n,i){var o=e.match(/((?:\-|\+)?\d*\.?\d*)(.*)/),r=+o[1],a=o[2];if(!r)return e;if(0===a.indexOf("%")){var s=void 0;switch(a){case"%p":s=n;break;case"%":case"%r":default:s=i}return j(s)[t]/100*r}if("vh"===a||"vw"===a){return("vh"===a?Math.max(document.documentElement.clientHeight,window.innerHeight||0):Math.max(document.documentElement.clientWidth,window.innerWidth||0))/100*r}return r}function ye(e,t,n,i){var o=[0,0],r=-1!==["right","left"].indexOf(i),a=e.split(/(\+|\-)/).map(function(e){return e.trim()}),s=a.indexOf(V(a,function(e){return-1!==e.search(/,|\s/)}));a[s]&&-1===a[s].indexOf(",")&&console.warn("Offsets separated by white space(s) are deprecated, use a comma (,) instead.");var l=/\s*,\s*|\s+/,c=-1!==s?[a.slice(0,s).concat([a[s].split(l)[0]]),[a[s].split(l)[1]].concat(a.slice(s+1))]:[a];return c=c.map(function(e,i){var o=(1===i?!r:r)?"height":"width",a=!1;return e.reduce(function(e,t){return""===e[e.length-1]&&-1!==["+","-"].indexOf(t)?(e[e.length-1]=t,a=!0,e):a?(e[e.length-1]+=t,a=!1,e):e.concat(t)},[]).map(function(e){return be(e,o,t,n)})}),c.forEach(function(e,t){e.forEach(function(n,i){ae(n)&&(o[t]+=n*("-"===e[i-1]?-1:1))})}),o}function xe(e,t){var n=t.offset,i=e.placement,o=e.offsets,r=o.popper,a=o.reference,s=i.split("-")[0],l=void 0;return l=ae(+n)?[+n,0]:ye(n,r,a,s),"left"===s?(r.top+=l[0],r.left-=l[1]):"right"===s?(r.top+=l[0],r.left+=l[1]):"top"===s?(r.left+=l[0],r.top-=l[1]):"bottom"===s&&(r.left+=l[0],r.top+=l[1]),e.popper=r,e}function we(e,t){var n=t.boundariesElement||D(e.instance.popper);e.instance.reference===n&&(n=D(n));var i=Y(e.instance.popper,e.instance.reference,t.padding,n);t.boundaries=i;var o=t.priority,r=e.offsets.popper,a={primary:function(e){var n=r[e];return r[e]<i[e]&&!t.escapeWithReference&&(n=Math.max(r[e],i[e])),nt({},e,n)},secondary:function(e){var n="right"===e?"left":"top",o=r[n];return r[e]>i[e]&&!t.escapeWithReference&&(o=Math.min(r[n],i[e]-("right"===e?r.width:r.height))),nt({},n,o)}};return o.forEach(function(e){var t=-1!==["left","top"].indexOf(e)?"primary":"secondary";r=it({},r,a[t](e))}),e.offsets.popper=r,e}function Ce(e){var t=e.placement,n=t.split("-")[0],i=t.split("-")[1];if(i){var o=e.offsets,r=o.reference,a=o.popper,s=-1!==["bottom","top"].indexOf(n),l=s?"left":"top",c=s?"width":"height",u={start:nt({},l,r[l]),end:nt({},l,r[l]+r[c]-a[c])};e.offsets.popper=it({},a,u[i])}return e}function Se(e){if(!fe(e.instance.modifiers,"hide","preventOverflow"))return e;var t=e.offsets.reference,n=V(e.instance.modifiers,function(e){return"preventOverflow"===e.name}).boundaries;if(t.bottom<n.top||t.left>n.right||t.top>n.bottom||t.right<n.left){if(!0===e.hide)return e;e.hide=!0,e.attributes["x-out-of-boundaries"]=""}else{if(!1===e.hide)return e;e.hide=!1,e.attributes["x-out-of-boundaries"]=!1}return e}function Te(e){var t=e.placement,n=t.split("-")[0],i=e.offsets,o=i.popper,r=i.reference,a=-1!==["left","right"].indexOf(n),s=-1===["top","left"].indexOf(n);return o[a?"left":"top"]=r[n]-(s?o[a?"width":"height"]:0),e.placement=X(t),e.offsets.popper=j(o),e}function ke(e){return-(e-qe.distance)+"px"}function Ee(e){var t=e.el,n=e.popper,i=e.settings,o=i.position,s=i.popperOptions,l=i.offset,c=i.distance,u=i.flipDuration,d=f(n),p=d.tooltip,h=ft({placement:o},s||{},{modifiers:ft({},s?s.modifiers:{},{flip:ft({padding:c+5},s&&s.modifiers?s.modifiers.flip:{}),offset:ft({offset:l},s&&s.modifiers?s.modifiers.offset:{})}),onUpdate:function(){var e=p.style;e.top="",e.bottom="",e.left="",e.right="",e[v(n.getAttribute("x-placement"))]=ke(c)}});if(window.MutationObserver){var g=n.style,m=new MutationObserver(function(){g[a("transitionDuration")]="0ms",e.popperInstance.update(),r(function(){g[a("transitionDuration")]=u+"ms"})});m.observe(n,{childList:!0,subtree:!0,characterData:!0}),e._mutationObservers.push(m)}return new ct(t,n,h)}function De(e){var t=e.el,n=e.popper,i=e.settings,o=i.appendTo,r=i.followCursor;o.contains(n)||(o.appendChild(n),e.popperInstance?(e.popperInstance.update(),r&&!Fe.touch||e.popperInstance.enableEventListeners()):e.popperInstance=Ee(e),r&&!Fe.touch&&(t.addEventListener("mousemove",b),e.popperInstance.disableEventListeners()))}function Me(e){var t=e.popper,n=e.popperInstance,i=e.settings.stickyDuration,o=function(){return t.style[a("transitionDuration")]=i+"ms"},s=function(){return t.style[a("transitionDuration")]=""};r(function e(){n&&n.scheduleUpdate(),o(),h(t)?window.requestAnimationFrame(e):s()})}function Pe(e,t){var n=Ye.reduce(function(n,i){var o=e.getAttribute("data-"+i.toLowerCase())||t[i];return"false"===o&&(o=!1),"true"===o&&(o=!0),isFinite(o)&&!isNaN(parseFloat(o))&&(o=parseFloat(o)),"string"==typeof o&&"["===o.trim().charAt(0)&&(o=JSON.parse(o)),n[i]=o,n},{});return ft({},t,n)}function Ae(e,t,n){var i=n.position,o=n.distance,r=n.arrow,a=n.animateFill,s=n.inertia,l=n.animation,c=n.arrowSize,u=n.size,d=n.theme,f=n.html,p=n.zIndex,h=n.interactive,g=document.createElement("div");g.setAttribute("class","tippy-popper"),g.setAttribute("role","tooltip"),g.setAttribute("aria-hidden","true"),g.setAttribute("id","tippy-tooltip-"+e),g.style.zIndex=p;var m=document.createElement("div");if(m.setAttribute("class","tippy-tooltip tippy-tooltip--"+u+" leave"),m.setAttribute("data-animation",l),d.split(" ").forEach(function(e){m.classList.add(e+"-theme")}),r){var b=document.createElement("div");b.setAttribute("class","arrow-"+c),b.setAttribute("x-arrow",""),m.appendChild(b)}if(a){m.setAttribute("data-animatefill","");var y=document.createElement("div");y.setAttribute("class","leave"),y.setAttribute("x-circle",""),m.appendChild(y)}s&&m.setAttribute("data-inertia",""),h&&m.setAttribute("data-interactive","");var x=document.createElement("div");if(x.setAttribute("class","tippy-tooltip-content"),f){var w=void 0;f instanceof Element?(x.appendChild(f),w="#"+f.id||"tippy-html-template"):(x.innerHTML=document.getElementById(f.replace("#","")).innerHTML,w=f),g.classList.add("html-template"),h&&g.setAttribute("tabindex","-1"),m.setAttribute("data-template-id",w)}else x.innerHTML=t;return m.style[v(i)]=ke(o),m.appendChild(x),g.appendChild(m),g}function Le(e,t,n,i){var o=[];return"manual"===e?o:(t.addEventListener(e,n.handleTrigger),o.push({event:e,handler:n.handleTrigger}),"mouseenter"===e&&(Fe.SUPPORTS_TOUCH&&i&&(t.addEventListener("touchstart",n.handleTrigger),o.push({event:"touchstart",handler:n.handleTrigger}),t.addEventListener("touchend",n.handleMouseleave),o.push({event:"touchend",handler:n.handleMouseleave})),t.addEventListener("mouseleave",n.handleMouseleave),o.push({event:"mouseleave",handler:n.handleMouseleave})),"focus"===e&&(t.addEventListener("blur",n.handleBlur),o.push({event:"blur",handler:n.handleBlur})),o)}function Oe(e,t,n){if(!t.getAttribute("x-placement"))return!0;var i=e.clientX,o=e.clientY,r=n.interactiveBorder,a=n.distance,s=t.getBoundingClientRect(),l=v(t.getAttribute("x-placement")),c=r+a,u={top:s.top-o>r,bottom:o-s.bottom>r,left:s.left-i>r,right:i-s.right>r};switch(l){case"top":u.top=s.top-o>c;break;case"bottom":u.bottom=o-s.bottom>c;break;case"left":u.left=s.left-i>c;break;case"right":u.right=i-s.right>c}return u.top||u.bottom||u.left||u.right}function Ne(e,n,i){var o=this,r=(i.position,i.delay),a=(i.duration,i.interactive),s=(i.interactiveBorder,i.distance,i.hideOnClick),l=i.trigger,c=i.touchHold,u=(i.touchWait,void 0),d=void 0,f=function(){clearTimeout(u),clearTimeout(d)},p=function(){if(f(),!h(n)){var e=Array.isArray(r)?r[0]:r;r?u=setTimeout(function(){return o.show(n)},e):o.show(n)}},g=function(e){return o.callbacks.wait?o.callbacks.wait.call(n,p,e):p()},m=function(){f();var e=Array.isArray(r)?r[1]:r;r?d=setTimeout(function(){return o.hide(n)},e):o.hide(n)};return{handleTrigger:function(t){var i="mouseenter"===t.type&&Fe.SUPPORTS_TOUCH&&Fe.touch;if(!i||!c){var o="click"===t.type,r="persistent"!==s;o&&h(n)&&r?m():g(t),i&&Fe.iOS()&&e.click&&e.click()}},handleMouseleave:function(o){if(!("mouseleave"===o.type&&Fe.SUPPORTS_TOUCH&&Fe.touch&&c)){if(a){var r=function o(r){var a=function(){document.body.removeEventListener("mouseleave",m),document.removeEventListener("mousemove",o),m()},s=t(r.target,Re.TOOLTIPPED_EL),c=t(r.target,Re.POPPER)===n,u=s===e,d=-1!==l.indexOf("click");if(s&&s!==e)return a();c||u||d||Oe(r,n,i)&&a()};return document.body.addEventListener("mouseleave",m),void document.addEventListener("mousemove",r)}m()}},handleBlur:function(e){e.relatedTarget&&!Fe.touch&&(t(e.relatedTarget,Re.POPPER)||m())}}}function Ie(e){return e.arrow&&(e.animateFill=!1),e.appendTo&&"function"==typeof e.appendTo&&(e.appendTo=e.appendTo()),e}function $e(e){var t=this;return e.reduce(function(e,n){var i=pt,o=ft({},Ie(t.settings.performance?t.settings:Pe(n,t.settings)));"function"==typeof o.html&&(o.html=o.html(n));var r=o.html,a=o.trigger,s=o.touchHold,c=o.dynamicTitle,u=n.getAttribute("title");if(!u&&!r)return e;n.setAttribute("data-tooltipped",""),n.setAttribute("aria-describedby","tippy-tooltip-"+i),l(n);var d=Ae(i,u,o),p=Ne.call(t,n,d,o),h=[];a.trim().split(" ").forEach(function(e){return h=h.concat(Le(e,n,p,s))});var g=void 0;if(c&&window.MutationObserver){var m=f(d),v=m.content;g=new MutationObserver(function(){var e=n.getAttribute("title");e&&(v.innerHTML=e,l(n))}),g.observe(n,{attributes:!0})}return e.push({id:i,el:n,popper:d,settings:o,listeners:h,tippyInstance:t,_mutationObservers:[g]}),pt++,e},[])}function je(e,t){return m(e)&&(e={refObj:!0,attributes:e.attributes||{},getBoundingClientRect:e.getBoundingClientRect,clientWidth:e.clientWidth,clientHeight:e.clientHeight,setAttribute:function(t,n){e.attributes[t]=n},getAttribute:function(t){return e.attributes[t]},removeAttribute:function(t){delete e.attributes[t]},addEventListener:function(){},removeEventListener:function(){},classList:{classNames:{},add:function(t){e.classList.classNames[t]=!0},remove:function(t){return e.classList.classNames[t]=!1,!0},contains:function(t){return!!e.classList.classNames[t]}}}),new ht(e,t)}var Fe={};"undefined"!=typeof window&&(Fe.SUPPORTED="requestAnimationFrame"in window,Fe.SUPPORTS_TOUCH="ontouchstart"in window,Fe.touch=!1,Fe.dynamicInputDetection=!0,Fe.iOS=function(){return/iPhone|iPad|iPod/.test(navigator.userAgent)&&!window.MSStream});var He=[],Re={POPPER:".tippy-popper",TOOLTIP:".tippy-tooltip",CONTENT:".tippy-tooltip-content",CIRCLE:"[x-circle]",ARROW:"[x-arrow]",TOOLTIPPED_EL:"[data-tooltipped]",CONTROLLER:"[data-tippy-controller]"},qe={html:!1,position:"top",animation:"shift",animateFill:!0,arrow:!1,arrowSize:"regular",delay:0,trigger:"mouseenter focus",duration:350,interactive:!1,interactiveBorder:2,theme:"dark",size:"regular",distance:10,offset:0,hideOnClick:!0,multiple:!1,followCursor:!1,inertia:!1,flipDuration:350,sticky:!1,stickyDuration:200,appendTo:function(){return document.body},zIndex:9999,touchHold:!1,performance:!1,dynamicTitle:!1,popperOptions:{}},Ye=Fe.SUPPORTED&&Object.keys(qe),_e={};if("undefined"!=typeof Element){var We=Element.prototype;_e=We.matches||We.matchesSelector||We.webkitMatchesSelector||We.mozMatchesSelector||We.msMatchesSelector||function(e){for(var t=(this.document||this.ownerDocument).querySelectorAll(e),n=t.length;--n>=0&&t.item(n)!==this;);return n>-1}}for(var Be=_e,ze=["native code","[object MutationObserverConstructor]"],Xe="undefined"!=typeof window,Ue=["Edge","Trident","Firefox"],Ve=0,Ge=0;Ge<Ue.length;Ge+=1)if(Xe&&navigator.userAgent.indexOf(Ue[Ge])>=0){Ve=1;break}var Ke=Xe&&function(e){return ze.some(function(t){return(e||"").toString().indexOf(t)>-1})}(window.MutationObserver),Ze=Ke?w:C,Qe=void 0,Je=function(){return void 0===Qe&&(Qe=-1!==navigator.appVersion.indexOf("MSIE 10")),Qe},et=function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")},tt=function(){function e(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}return function(t,n,i){return n&&e(t.prototype,n),i&&e(t,i),t}}(),nt=function(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e},it=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var i in n)Object.prototype.hasOwnProperty.call(n,i)&&(e[i]=n[i])}return e},ot=["auto-start","auto","auto-end","top-start","top","top-end","right-start","right","right-end","bottom-end","bottom","bottom-start","left-end","left","left-start"],rt=ot.slice(3),at={FLIP:"flip",CLOCKWISE:"clockwise",COUNTERCLOCKWISE:"counterclockwise"},st={shift:{order:100,enabled:!0,fn:Ce},offset:{order:200,enabled:!0,fn:xe,offset:0},preventOverflow:{order:300,enabled:!0,fn:we,priority:["left","right","top","bottom"],padding:5,boundariesElement:"scrollParent"},keepTogether:{order:400,enabled:!0,fn:ve},arrow:{order:500,enabled:!0,fn:pe,element:"[x-arrow]"},flip:{order:600,enabled:!0,fn:me,behavior:"flip",padding:5,boundariesElement:"viewport"},inner:{order:700,enabled:!1,fn:Te},hide:{order:800,enabled:!0,fn:Se},computeStyle:{order:850,enabled:!0,fn:de,gpuAcceleration:!0,x:"bottom",y:"right"},applyStyle:{order:900,enabled:!0,fn:ce,onLoad:ue,gpuAcceleration:void 0}},lt={placement:"bottom",eventsEnabled:!0,removeOnDestroy:!1,onCreate:function(){},onUpdate:function(){},modifiers:st},ct=function(){function e(t,n){var i=this,o=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};et(this,e),this.scheduleUpdate=function(){return requestAnimationFrame(i.update)},this.update=Ze(this.update.bind(this)),this.options=it({},e.Defaults,o),this.state={isDestroyed:!1,isCreated:!1,scrollParents:[]},this.reference=t.jquery?t[0]:t,this.popper=n.jquery?n[0]:n,this.options.modifiers={},Object.keys(it({},e.Defaults.modifiers,o.modifiers)).forEach(function(t){i.options.modifiers[t]=it({},e.Defaults.modifiers[t]||{},o.modifiers?o.modifiers[t]:{})}),this.modifiers=Object.keys(this.options.modifiers).map(function(e){return it({name:e},i.options.modifiers[e])}).sort(function(e,t){return e.order-t.order}),this.modifiers.forEach(function(e){e.enabled&&S(e.onLoad)&&e.onLoad(i.reference,i.popper,i.options,e,i.state)}),this.update();var r=this.options.eventsEnabled;r&&this.enableEventListeners(),this.state.eventsEnabled=r}return tt(e,[{key:"update",value:function(){return Z.call(this)}},{key:"destroy",value:function(){return ee.call(this)}},{key:"enableEventListeners",value:function(){return ie.call(this)}},{key:"disableEventListeners",value:function(){return re.call(this)}}]),e}();ct.Utils=("undefined"!=typeof window?window:global).PopperUtils,ct.placements=ot,ct.Defaults=lt;var ut=function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")},dt=function(){function e(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}return function(t,n,i){return n&&e(t.prototype,n),i&&e(t,i),t}}(),ft=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var i in n)Object.prototype.hasOwnProperty.call(n,i)&&(e[i]=n[i])}return e},pt=1,ht=function(){function e(t){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};ut(this,e),Fe.SUPPORTED&&(o(),this.state={destroyed:!1},this.selector=t,this.settings=ft({},qe,n),(n.show||n.shown||n.hide||n.hidden)&&console.warn("Callbacks without the `on` prefix are deprecated (with the exception of `wait`). Use onShow, onShown, onHide, and onHidden instead."),this.callbacks={wait:n.wait,show:n.onShow||n.show||g,shown:n.onShown||n.shown||g,hide:n.onHide||n.hide||g,hidden:n.onHidden||n.hidden||g},this.store=$e.call(this,y(t)),He.push.apply(He,this.store))}return dt(e,[{key:"getPopperElement",value:function(e){try{return n(this.store,function(t){return t.el===e}).popper}catch(e){console.error("[getPopperElement]: Element passed as the argument does not exist in the instance")}}},{key:"getReferenceElement",value:function(e){try{return n(this.store,function(t){return t.popper===e}).el}catch(e){console.error("[getReferenceElement]: Popper passed as the argument does not exist in the instance")}}},{key:"getReferenceData",value:function(e){return n(this.store,function(t){return t.el===e||t.popper===e})}},{key:"show",value:function(e,t){var i=this;if(!this.state.destroyed){var o=n(this.store,function(t){return t.popper===e}),a=f(e),s=a.tooltip,l=a.circle,c=a.content;if(!this.selector.refObj&&!document.body.contains(o.el))return void this.destroy(e);this.callbacks.show.call(e);var g=o.el,m=o.settings,v=(m.appendTo,m.sticky),b=m.interactive,y=m.followCursor,w=m.flipDuration,C=m.duration,S=void 0!==t?t:Array.isArray(C)?C[0]:C;p([e,s,l],0),De(o),e.style.visibility="visible",e.setAttribute("aria-hidden","false"),r(function(){h(e)&&(y&&!Fe.touch||(o.popperInstance.update(),p([e],w)),p([s,l],S),l&&(c.style.opacity=1),b&&g.classList.add("active"),v&&Me(o),u(s,l),d([s,l],function(e){e.contains("tippy-notransition")&&e.remove("tippy-notransition"),e.remove("leave"),e.add("enter")}),x(o,S,function(){h(e)&&!o._onShownFired&&(b&&e.focus(),s.classList.add("tippy-notransition"),o._onShownFired=!0,i.callbacks.shown.call(e))}))})}}},{key:"hide",value:function(e,t){var i=this;if(!this.state.destroyed){this.callbacks.hide.call(e);var o=n(this.store,function(t){return t.popper===e}),r=f(e),a=r.tooltip,s=r.circle,l=r.content,u=o.el,g=o.settings,m=g.appendTo,v=(g.sticky,g.interactive),y=(g.followCursor,g.html),w=g.trigger,C=g.duration,S=void 0!==t?t:Array.isArray(C)?C[1]:C;o._onShownFired=!1,v&&u.classList.remove("active"),e.style.visibility="hidden",e.setAttribute("aria-hidden","true"),p([a,s,s?l:null],S),s&&(l.style.opacity=0),d([a,s],function(e){e.contains("tippy-tooltip")&&e.remove("tippy-notransition"),e.remove("enter"),e.add("leave")}),y&&-1!==w.indexOf("click")&&c(u)&&u.focus(),x(o,S,function(){!h(e)&&m.contains(e)&&"1"!==getComputedStyle(a).opacity&&(u.removeEventListener("mousemove",b),o.popperInstance.disableEventListeners(),m.removeChild(e),i.callbacks.hidden.call(e))})}}},{key:"update",value:function(e){if(!this.state.destroyed){var t=n(this.store,function(t){return t.popper===e}),i=f(e),o=i.content,r=t.el,a=t.settings.html;if(a instanceof Element)return void console.warn("Aborted: update() should not be used if `html` is a DOM element");o.innerHTML=a?document.getElementById(a.replace("#","")).innerHTML:r.getAttribute("title")||r.getAttribute("data-original-title"),a||l(r)}}},{key:"destroy",value:function(e,t){var i=this;if(!this.state.destroyed){var o=n(this.store,function(t){return t.popper===e}),r=o.el,a=o.popperInstance,l=o.listeners,c=o._mutationObservers;h(e)&&this.hide(e,0),l.forEach(function(e){return r.removeEventListener(e.event,e.handler)}),r.setAttribute("title",r.getAttribute("data-original-title")),r.removeAttribute("data-original-title"),r.removeAttribute("data-tooltipped"),r.removeAttribute("aria-describedby"),a&&a.destroy(),c.forEach(function(e){e&&e.disconnect()}),He.splice(s(He,function(t){return t.popper===e}),1),(void 0===t||t)&&(this.store=He.filter(function(e){return e.tippyInstance===i}))}}},{key:"destroyAll",value:function(){var e=this;if(!this.state.destroyed){var t=this.store.length;this.store.forEach(function(n,i){var o=n.popper;e.destroy(o,i===t-1)}),this.store=null,this.state.destroyed=!0}}}]),e}();return je.Browser=Fe,je.Defaults=qe,je.disableDynamicInputDetection=function(){return Fe.dynamicInputDetection=!1},je.enableDynamicInputDetection=function(){return Fe.dynamicInputDetection=!0},je}),function(){$("[data-flatpickr]").each(function(){var e={locale:"ru",dateFormat:"d.m.Y"},t=$(this).data("flatpickr");for(var n in t)e[n]=t[n];$(this).flatpickr(e)})}(),function(){$(".js-header-slider").each(function(){var e=$(this).bxSlider({infiniteLoop:!0,pager:!1,controls:!1});$(".js-header-slider-next").click(function(){return e.goToNextSlide(),!1}),$(".js-header-slider-prev").click(function(){return e.goToPrevSlide(),!1}),$(window).resize(function(){e.reloadSlider()})})}(),function(e){e.fn.maskedinput=function(){this.each(function(){var t=e(this).data("masked-input"),n=e(this).data("masked-input-placeholder"),i=e(this).is("[data-masked-input-clearifnotmatch]");e(this).mask(t,{placeholder:n,clearIfNotMatch:i})})}}(jQuery),function(){$(".js-logotypes-slider").each(function(){var e=$(this).bxSlider({infiniteLoop:!0,pager:!1,controls:!1});$(this).closest(".logotypes-block-slider").find(".js-logotypes-slider-next").click(function(){return e.goToNextSlide(),!1}),$(this).closest(".logotypes-block-slider").find(".js-logotypes-slider-prev").click(function(){return e.goToPrevSlide(),!1}),$(window).resize(function(){e.reloadSlider()})})}(),function(){function e(t,n,i){$(t.target).closest(n).length||(i(),$(document).off("click","body",e))}$(".js-offcanvas").click(function(){function t(){$(".js-offcanvas, "+n).removeClass("active")}var n="#offcanvas",i="#offcanvas > .main-offcanvas";return $(this).hasClass("active")?t():function(){$(".js-offcanvas").addClass("active"),$(n).addClass("active"),$(document).on("click","body",function(n){e(n,i,t)})}(),!1})}(),function(e){e.fn.toggler=function(){return this.each(function(){e(this).on("click",function(t){var n=e(this).data("toggle")||e(this).attr("href"),i=e(this).data("toggle-class")||"active",o=e(this).data("toggle-group"),r=e(this).is("[data-toggle-self-deactive]");return console.log(n,i,o),e('[data-toggle-group="'+o+'"]').not(this).each(function(){var t=e(this).data("toggle")||e(this).attr("href"),n=e(this).data("toggle-class")||"active";e(t).removeClass(n),e(this).removeClass(n)}),e(this).hasClass(i)&&r?(e(this).removeClass(i),e(n).removeClass(i)):(e(this).addClass(i),e(n).addClass(i)),!1})}),this}}(jQuery),$(document).ready(function(){$("[data-toggle]").toggler(),$("[data-masked-input]").maskedinput(),tippy("[data-tooltip]",{theme:"light"})});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
